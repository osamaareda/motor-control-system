

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Oct 19 20:50:24 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    47                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    48                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    49   000000                     
    50                           ; Generated 23/03/2023 GMT
    51                           ; 
    52                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution. Publication is not required when
    66                           ;        this file is used in an embedded application.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC18F4620 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84   000000                     
    85                           	psect	idataCOMRAM
    86   00EBAE                     __pidataCOMRAM:
    87                           	callstack 0
    88                           
    89                           ;initializer for _portx
    90   00EBAE  80                 	db	128
    91   00EBAF  0F                 	db	15
    92   00EBB0  81                 	db	129
    93   00EBB1  0F                 	db	15
    94   00EBB2  82                 	db	130
    95   00EBB3  0F                 	db	15
    96   00EBB4  83                 	db	131
    97   00EBB5  0F                 	db	15
    98   00EBB6  84                 	db	132
    99   00EBB7  0F                 	db	15
   100                           
   101                           ;initializer for _latx
   102   00EBB8  89                 	db	137
   103   00EBB9  0F                 	db	15
   104   00EBBA  8A                 	db	138
   105   00EBBB  0F                 	db	15
   106   00EBBC  8B                 	db	139
   107   00EBBD  0F                 	db	15
   108   00EBBE  8C                 	db	140
   109   00EBBF  0F                 	db	15
   110   00EBC0  8D                 	db	141
   111   00EBC1  0F                 	db	15
   112                           
   113                           ;initializer for _trisx
   114   00EBC2  92                 	db	146
   115   00EBC3  0F                 	db	15
   116   00EBC4  93                 	db	147
   117   00EBC5  0F                 	db	15
   118   00EBC6  94                 	db	148
   119   00EBC7  0F                 	db	15
   120   00EBC8  95                 	db	149
   121   00EBC9  0F                 	db	15
   122   00EBCA  96                 	db	150
   123   00EBCB  0F                 	db	15
   124                           
   125                           ;initializer for _t
   126   00EBCC  C8                 	db	200
   127                           
   128                           ;initializer for _n
   129   00EBCD  04                 	db	4
   130                           
   131                           ;initializer for _customChar1
   132   00EBCE  01                 	db	1
   133   00EBCF  03                 	db	3
   134   00EBD0  07                 	db	7
   135   00EBD1  0E                 	db	14
   136   00EBD2  1E                 	db	30
   137   00EBD3  1F                 	db	31
   138   00EBD4  1F                 	db	31
   139   00EBD5  1F                 	db	31
   140                           
   141                           ;initializer for _keypad
   142   00EBD6  08                 	db	8
   143   00EBD7  10                 	db	16
   144   00EBD8  18                 	db	24
   145   00EBD9  28                 	db	40
   146   00EBDA  22                 	db	34
   147   00EBDB  2A                 	db	42
   148   00EBDC  3A                 	db	58
   149   00EBDD  02                 	db	2
   150                           
   151                           ;initializer for _lcd
   152   00EBDE  31                 	db	49
   153   00EBDF  39                 	db	57
   154   00EBE0  03                 	db	3
   155   00EBE1  0B                 	db	11
   156   00EBE2  13                 	db	19
   157   00EBE3  1B                 	db	27
   158                           
   159                           ;initializer for _motor2
   160   00EBE4  33                 	db	51
   161   00EBE5  3B                 	db	59
   162   00EBE6  00                 	db	0
   163                           
   164                           ;initializer for _motor1
   165   00EBE7  11                 	db	17
   166   00EBE8  19                 	db	25
   167   00EBE9  00                 	db	0
   168                           
   169                           ;initializer for _motor2_led2
   170   00EBEA  2B                 	db	43
   171   00EBEB  00                 	db	0
   172                           
   173                           ;initializer for _motor2_led1
   174   00EBEC  29                 	db	41
   175   00EBED  00                 	db	0
   176                           
   177                           ;initializer for _motor1_led2
   178   00EBEE  23                 	db	35
   179   00EBEF  00                 	db	0
   180                           
   181                           ;initializer for _motor1_led1
   182   00EBF0  21                 	db	33
   183   00EBF1  00                 	db	0
   184                           
   185                           	psect	idataBANK0
   186   00F0A8                     __pidataBANK0:
   187                           	callstack 0
   188                           
   189                           ;initializer for _keypad_btns
   190   00F0A8  37                 	db	55
   191   00F0A9  38                 	db	56
   192   00F0AA  39                 	db	57
   193   00F0AB  2F                 	db	47
   194   00F0AC  34                 	db	52
   195   00F0AD  35                 	db	53
   196   00F0AE  36                 	db	54
   197   00F0AF  2A                 	db	42
   198   00F0B0  31                 	db	49
   199   00F0B1  32                 	db	50
   200   00F0B2  33                 	db	51
   201   00F0B3  2D                 	db	45
   202   00F0B4  23                 	db	35
   203   00F0B5  30                 	db	48
   204   00F0B6  3D                 	db	61
   205   00F0B7  2B                 	db	43
   206                           
   207                           ;initializer for _customChar12
   208   00F0B8  1F                 	db	31
   209   00F0B9  1F                 	db	31
   210   00F0BA  0F                 	db	15
   211   00F0BB  07                 	db	7
   212   00F0BC  16                 	db	22
   213   00F0BD  1C                 	db	28
   214   00F0BE  18                 	db	24
   215   00F0BF  10                 	db	16
   216                           
   217                           ;initializer for _customChar11
   218   00F0C0  1F                 	db	31
   219   00F0C1  00                 	db	0
   220   00F0C2  00                 	db	0
   221   00F0C3  1F                 	db	31
   222   00F0C4  1F                 	db	31
   223   00F0C5  1F                 	db	31
   224   00F0C6  1F                 	db	31
   225   00F0C7  1F                 	db	31
   226                           
   227                           ;initializer for _customChar10
   228   00F0C8  1F                 	db	31
   229   00F0C9  1F                 	db	31
   230   00F0CA  1E                 	db	30
   231   00F0CB  1C                 	db	28
   232   00F0CC  0D                 	db	13
   233   00F0CD  07                 	db	7
   234   00F0CE  03                 	db	3
   235   00F0CF  01                 	db	1
   236                           
   237                           ;initializer for _customChar9
   238   00F0D0  10                 	db	16
   239   00F0D1  18                 	db	24
   240   00F0D2  1C                 	db	28
   241   00F0D3  06                 	db	6
   242   00F0D4  03                 	db	3
   243   00F0D5  1F                 	db	31
   244   00F0D6  1F                 	db	31
   245   00F0D7  1F                 	db	31
   246                           
   247                           ;initializer for _customChar8
   248   00F0D8  1F                 	db	31
   249   00F0D9  1F                 	db	31
   250   00F0DA  1F                 	db	31
   251   00F0DB  0E                 	db	14
   252   00F0DC  04                 	db	4
   253   00F0DD  1F                 	db	31
   254   00F0DE  1F                 	db	31
   255   00F0DF  1F                 	db	31
   256                           
   257                           ;initializer for _customChar7
   258   00F0E0  01                 	db	1
   259   00F0E1  03                 	db	3
   260   00F0E2  07                 	db	7
   261   00F0E3  0E                 	db	14
   262   00F0E4  1C                 	db	28
   263   00F0E5  1F                 	db	31
   264   00F0E6  1F                 	db	31
   265   00F0E7  1F                 	db	31
   266                           
   267                           ;initializer for _customChar6
   268   00F0E8  1B                 	db	27
   269   00F0E9  03                 	db	3
   270   00F0EA  07                 	db	7
   271   00F0EB  0F                 	db	15
   272   00F0EC  1E                 	db	30
   273   00F0ED  1C                 	db	28
   274   00F0EE  18                 	db	24
   275   00F0EF  10                 	db	16
   276                           
   277                           ;initializer for _customChar5
   278   00F0F0  1F                 	db	31
   279   00F0F1  00                 	db	0
   280   00F0F2  00                 	db	0
   281   00F0F3  00                 	db	0
   282   00F0F4  00                 	db	0
   283   00F0F5  1F                 	db	31
   284   00F0F6  1F                 	db	31
   285   00F0F7  1F                 	db	31
   286                           
   287                           ;initializer for _customChar4
   288   00F0F8  13                 	db	19
   289   00F0F9  18                 	db	24
   290   00F0FA  1C                 	db	28
   291   00F0FB  1E                 	db	30
   292   00F0FC  0F                 	db	15
   293   00F0FD  07                 	db	7
   294   00F0FE  03                 	db	3
   295   00F0FF  01                 	db	1
   296                           
   297                           ;initializer for _customChar3
   298   00F100  10                 	db	16
   299   00F101  18                 	db	24
   300   00F102  1C                 	db	28
   301   00F103  06                 	db	6
   302   00F104  07                 	db	7
   303   00F105  1F                 	db	31
   304   00F106  1F                 	db	31
   305   00F107  1F                 	db	31
   306                           
   307                           ;initializer for _customChar2
   308   00F108  1F                 	db	31
   309   00F109  1F                 	db	31
   310   00F10A  1F                 	db	31
   311   00F10B  0E                 	db	14
   312   00F10C  0E                 	db	14
   313   00F10D  1F                 	db	31
   314   00F10E  1F                 	db	31
   315   00F10F  1F                 	db	31
   316                           
   317                           	psect	nvCOMRAM
   318   000075                     __pnvCOMRAM:
   319                           	callstack 0
   320   000075                     _ret:
   321                           	callstack 0
   322   000075                     	ds	1
   323   000000                     _PORTE	set	3972
   324   000000                     _PORTD	set	3971
   325   000000                     _PORTC	set	3970
   326   000000                     _PORTB	set	3969
   327   000000                     _PORTA	set	3968
   328   000000                     _LATA	set	3977
   329   000000                     _TRISA	set	3986
   330   000000                     _TRISE	set	3990
   331   000000                     _TRISD	set	3989
   332   000000                     _TRISC	set	3988
   333   000000                     _TRISB	set	3987
   334   000000                     _LATE	set	3981
   335   000000                     _LATD	set	3980
   336   000000                     _LATC	set	3979
   337   000000                     _LATB	set	3978
   338                           
   339                           	psect	mediumconst
   340   00FEDA                     __pmediumconst:
   341                           	callstack 0
   342   00FEDA  00                 	db	0
   343   00FEDB                     STR_19:
   344   00FEDB  35                 	db	53	;'5'
   345   00FEDC  2D                 	db	45
   346   00FEDD  62                 	db	98	;'b'
   347   00FEDE  61                 	db	97	;'a'
   348   00FEDF  63                 	db	99	;'c'
   349   00FEE0  6B                 	db	107	;'k'
   350   00FEE1  20                 	db	32
   351   00FEE2  20                 	db	32
   352   00FEE3  A0                 	db	-96
   353   00FEE4  A0                 	db	-96
   354   00FEE5  A0                 	db	-96
   355   00FEE6  A0                 	db	-96
   356   00FEE7  A0                 	db	-96
   357   00FEE8  A0                 	db	-96
   358   00FEE9  A0                 	db	-96
   359   00FEEA  A0                 	db	-96
   360   00FEEB  A0                 	db	-96
   361   00FEEC  A0                 	db	-96
   362   00FEED  A0                 	db	-96
   363   00FEEE  00                 	db	0
   364   00FEEF                     STR_11:
   365   00FEEF  20                 	db	32
   366   00FEF0  20                 	db	32
   367   00FEF1  20                 	db	32
   368   00FEF2  20                 	db	32
   369   00FEF3  20                 	db	32
   370   00FEF4  20                 	db	32
   371   00FEF5  20                 	db	32
   372   00FEF6  20                 	db	32
   373   00FEF7  20                 	db	32
   374   00FEF8  20                 	db	32
   375   00FEF9  20                 	db	32
   376   00FEFA  20                 	db	32
   377   00FEFB  20                 	db	32
   378   00FEFC  20                 	db	32
   379   00FEFD  20                 	db	32
   380   00FEFE  20                 	db	32
   381   00FEFF  20                 	db	32
   382   00FF00  20                 	db	32
   383   00FF01  20                 	db	32
   384   00FF02  00                 	db	0
   385   00FF03                     STR_15:
   386   00FF03  35                 	db	53	;'5'
   387   00FF04  2D                 	db	45
   388   00FF05  62                 	db	98	;'b'
   389   00FF06  61                 	db	97	;'a'
   390   00FF07  63                 	db	99	;'c'
   391   00FF08  6B                 	db	107	;'k'
   392   00FF09  20                 	db	32
   393   00FF0A  20                 	db	32
   394   00FF0B  20                 	db	32
   395   00FF0C  20                 	db	32
   396   00FF0D  20                 	db	32
   397   00FF0E  20                 	db	32
   398   00FF0F  20                 	db	32
   399   00FF10  20                 	db	32
   400   00FF11  20                 	db	32
   401   00FF12  20                 	db	32
   402   00FF13  20                 	db	32
   403   00FF14  20                 	db	32
   404   00FF15  20                 	db	32
   405   00FF16  00                 	db	0
   406   00FF17                     STR_9:
   407   00FF17  31                 	db	49	;'1'
   408   00FF18  2D                 	db	45
   409   00FF19  6D                 	db	109	;'m'
   410   00FF1A  6F                 	db	111	;'o'
   411   00FF1B  74                 	db	116	;'t'
   412   00FF1C  6F                 	db	111	;'o'
   413   00FF1D  72                 	db	114	;'r'
   414   00FF1E  31                 	db	49	;'1'
   415   00FF1F  20                 	db	32
   416   00FF20  20                 	db	32
   417   00FF21  20                 	db	32
   418   00FF22  20                 	db	32
   419   00FF23  20                 	db	32
   420   00FF24  20                 	db	32
   421   00FF25  20                 	db	32
   422   00FF26  20                 	db	32
   423   00FF27  20                 	db	32
   424   00FF28  20                 	db	32
   425   00FF29  20                 	db	32
   426   00FF2A  00                 	db	0
   427   00FF2B                     STR_10:
   428   00FF2B  32                 	db	50	;'2'
   429   00FF2C  2D                 	db	45
   430   00FF2D  6D                 	db	109	;'m'
   431   00FF2E  6F                 	db	111	;'o'
   432   00FF2F  74                 	db	116	;'t'
   433   00FF30  6F                 	db	111	;'o'
   434   00FF31  72                 	db	114	;'r'
   435   00FF32  32                 	db	50	;'2'
   436   00FF33  20                 	db	32
   437   00FF34  20                 	db	32
   438   00FF35  20                 	db	32
   439   00FF36  20                 	db	32
   440   00FF37  20                 	db	32
   441   00FF38  20                 	db	32
   442   00FF39  20                 	db	32
   443   00FF3A  20                 	db	32
   444   00FF3B  20                 	db	32
   445   00FF3C  20                 	db	32
   446   00FF3D  20                 	db	32
   447   00FF3E  00                 	db	0
   448   00FF3F                     STR_14:
   449   00FF3F  34                 	db	52	;'4'
   450   00FF40  2D                 	db	45
   451   00FF41  6D                 	db	109	;'m'
   452   00FF42  6F                 	db	111	;'o'
   453   00FF43  74                 	db	116	;'t'
   454   00FF44  6F                 	db	111	;'o'
   455   00FF45  72                 	db	114	;'r'
   456   00FF46  31                 	db	49	;'1'
   457   00FF47  20                 	db	32
   458   00FF48  6F                 	db	111	;'o'
   459   00FF49  66                 	db	102	;'f'
   460   00FF4A  66                 	db	102	;'f'
   461   00FF4B  20                 	db	32
   462   00FF4C  20                 	db	32
   463   00FF4D  20                 	db	32
   464   00FF4E  20                 	db	32
   465   00FF4F  20                 	db	32
   466   00FF50  20                 	db	32
   467   00FF51  20                 	db	32
   468   00FF52  00                 	db	0
   469   00FF53                     STR_18:
   470   00FF53  34                 	db	52	;'4'
   471   00FF54  2D                 	db	45
   472   00FF55  6D                 	db	109	;'m'
   473   00FF56  6F                 	db	111	;'o'
   474   00FF57  74                 	db	116	;'t'
   475   00FF58  6F                 	db	111	;'o'
   476   00FF59  72                 	db	114	;'r'
   477   00FF5A  32                 	db	50	;'2'
   478   00FF5B  20                 	db	32
   479   00FF5C  6F                 	db	111	;'o'
   480   00FF5D  66                 	db	102	;'f'
   481   00FF5E  66                 	db	102	;'f'
   482   00FF5F  20                 	db	32
   483   00FF60  20                 	db	32
   484   00FF61  20                 	db	32
   485   00FF62  20                 	db	32
   486   00FF63  20                 	db	32
   487   00FF64  20                 	db	32
   488   00FF65  20                 	db	32
   489   00FF66  00                 	db	0
   490   00FF67                     STR_8:
   491   00FF67  73                 	db	115	;'s'
   492   00FF68  65                 	db	101	;'e'
   493   00FF69  6C                 	db	108	;'l'
   494   00FF6A  65                 	db	101	;'e'
   495   00FF6B  63                 	db	99	;'c'
   496   00FF6C  74                 	db	116	;'t'
   497   00FF6D  20                 	db	32
   498   00FF6E  6D                 	db	109	;'m'
   499   00FF6F  6F                 	db	111	;'o'
   500   00FF70  74                 	db	116	;'t'
   501   00FF71  6F                 	db	111	;'o'
   502   00FF72  72                 	db	114	;'r'
   503   00FF73  20                 	db	32
   504   00FF74  20                 	db	32
   505   00FF75  20                 	db	32
   506   00FF76  20                 	db	32
   507   00FF77  20                 	db	32
   508   00FF78  20                 	db	32
   509   00FF79  20                 	db	32
   510   00FF7A  00                 	db	0
   511   00FF7B                     STR_12:
   512   00FF7B  31                 	db	49	;'1'
   513   00FF7C  2D                 	db	45
   514   00FF7D  6D                 	db	109	;'m'
   515   00FF7E  6F                 	db	111	;'o'
   516   00FF7F  74                 	db	116	;'t'
   517   00FF80  6F                 	db	111	;'o'
   518   00FF81  72                 	db	114	;'r'
   519   00FF82  31                 	db	49	;'1'
   520   00FF83  20                 	db	32
   521   00FF84  6F                 	db	111	;'o'
   522   00FF85  6E                 	db	110	;'n'
   523   00FF86  20                 	db	32
   524   00FF87  43                 	db	67	;'C'
   525   00FF88  57                 	db	87	;'W'
   526   00FF89  20                 	db	32
   527   00FF8A  20                 	db	32
   528   00FF8B  20                 	db	32
   529   00FF8C  20                 	db	32
   530   00FF8D  20                 	db	32
   531   00FF8E  00                 	db	0
   532   00FF8F                     STR_16:
   533   00FF8F  31                 	db	49	;'1'
   534   00FF90  2D                 	db	45
   535   00FF91  6D                 	db	109	;'m'
   536   00FF92  6F                 	db	111	;'o'
   537   00FF93  74                 	db	116	;'t'
   538   00FF94  6F                 	db	111	;'o'
   539   00FF95  72                 	db	114	;'r'
   540   00FF96  32                 	db	50	;'2'
   541   00FF97  20                 	db	32
   542   00FF98  6F                 	db	111	;'o'
   543   00FF99  6E                 	db	110	;'n'
   544   00FF9A  20                 	db	32
   545   00FF9B  43                 	db	67	;'C'
   546   00FF9C  57                 	db	87	;'W'
   547   00FF9D  20                 	db	32
   548   00FF9E  20                 	db	32
   549   00FF9F  20                 	db	32
   550   00FFA0  20                 	db	32
   551   00FFA1  20                 	db	32
   552   00FFA2  00                 	db	0
   553   00FFA3                     STR_13:
   554   00FFA3  32                 	db	50	;'2'
   555   00FFA4  2D                 	db	45
   556   00FFA5  6D                 	db	109	;'m'
   557   00FFA6  6F                 	db	111	;'o'
   558   00FFA7  74                 	db	116	;'t'
   559   00FFA8  6F                 	db	111	;'o'
   560   00FFA9  72                 	db	114	;'r'
   561   00FFAA  31                 	db	49	;'1'
   562   00FFAB  20                 	db	32
   563   00FFAC  6F                 	db	111	;'o'
   564   00FFAD  6E                 	db	110	;'n'
   565   00FFAE  20                 	db	32
   566   00FFAF  43                 	db	67	;'C'
   567   00FFB0  43                 	db	67	;'C'
   568   00FFB1  57                 	db	87	;'W'
   569   00FFB2  20                 	db	32
   570   00FFB3  20                 	db	32
   571   00FFB4  20                 	db	32
   572   00FFB5  20                 	db	32
   573   00FFB6  00                 	db	0
   574   00FFB7                     STR_17:
   575   00FFB7  32                 	db	50	;'2'
   576   00FFB8  2D                 	db	45
   577   00FFB9  6D                 	db	109	;'m'
   578   00FFBA  6F                 	db	111	;'o'
   579   00FFBB  74                 	db	116	;'t'
   580   00FFBC  6F                 	db	111	;'o'
   581   00FFBD  72                 	db	114	;'r'
   582   00FFBE  32                 	db	50	;'2'
   583   00FFBF  20                 	db	32
   584   00FFC0  6F                 	db	111	;'o'
   585   00FFC1  6E                 	db	110	;'n'
   586   00FFC2  20                 	db	32
   587   00FFC3  43                 	db	67	;'C'
   588   00FFC4  43                 	db	67	;'C'
   589   00FFC5  57                 	db	87	;'W'
   590   00FFC6  20                 	db	32
   591   00FFC7  20                 	db	32
   592   00FFC8  20                 	db	32
   593   00FFC9  20                 	db	32
   594   00FFCA  00                 	db	0
   595   00FFCB                     STR_5:
   596   00FFCB  70                 	db	112	;'p'
   597   00FFCC  72                 	db	114	;'r'
   598   00FFCD  65                 	db	101	;'e'
   599   00FFCE  73                 	db	115	;'s'
   600   00FFCF  73                 	db	115	;'s'
   601   00FFD0  20                 	db	32
   602   00FFD1  6F                 	db	111	;'o'
   603   00FFD2  6E                 	db	110	;'n'
   604   00FFD3  20                 	db	32
   605   00FFD4  74                 	db	116	;'t'
   606   00FFD5  6F                 	db	111	;'o'
   607   00FFD6  20                 	db	32
   608   00FFD7  73                 	db	115	;'s'
   609   00FFD8  74                 	db	116	;'t'
   610   00FFD9  61                 	db	97	;'a'
   611   00FFDA  72                 	db	114	;'r'
   612   00FFDB  74                 	db	116	;'t'
   613   00FFDC  00                 	db	0
   614   00FFDD                     STR_7:
   615   00FFDD  65                 	db	101	;'e'
   616   00FFDE  6E                 	db	110	;'n'
   617   00FFDF  74                 	db	116	;'t'
   618   00FFE0  65                 	db	101	;'e'
   619   00FFE1  72                 	db	114	;'r'
   620   00FFE2  20                 	db	32
   621   00FFE3  76                 	db	118	;'v'
   622   00FFE4  61                 	db	97	;'a'
   623   00FFE5  6C                 	db	108	;'l'
   624   00FFE6  69                 	db	105	;'i'
   625   00FFE7  64                 	db	100	;'d'
   626   00FFE8  20                 	db	32
   627   00FFE9  6F                 	db	111	;'o'
   628   00FFEA  70                 	db	112	;'p'
   629   00FFEB  00                 	db	0
   630   00FFEC                     STR_6:
   631   00FFEC  69                 	db	105	;'i'
   632   00FFED  6E                 	db	110	;'n'
   633   00FFEE  76                 	db	118	;'v'
   634   00FFEF  61                 	db	97	;'a'
   635   00FFF0  6C                 	db	108	;'l'
   636   00FFF1  69                 	db	105	;'i'
   637   00FFF2  64                 	db	100	;'d'
   638   00FFF3  00                 	db	0
   639   00FFF4                     STR_4:
   640   00FFF4  77                 	db	119	;'w'
   641   00FFF5  65                 	db	101	;'e'
   642   00FFF6  6C                 	db	108	;'l'
   643   00FFF7  63                 	db	99	;'c'
   644   00FFF8  6F                 	db	111	;'o'
   645   00FFF9  6D                 	db	109	;'m'
   646   00FFFA  65                 	db	101	;'e'
   647   00FFFB  00                 	db	0
   648   00FFFC                     STR_1:
   649   00FFFC  25                 	db	37
   650   00FFFD  69                 	db	105	;'i'
   651   00FFFE  00                 	db	0
   652   00FFFF  00                 	db	0	; dummy byte at the end
   653   000000                     
   654                           ; #config settings
   655                           
   656                           	psect	cinit
   657   00EE5A                     __pcinit:
   658                           	callstack 0
   659   00EE5A                     start_initialization:
   660                           	callstack 0
   661   00EE5A                     __initialization:
   662                           	callstack 0
   663                           
   664                           ; Initialize objects allocated to BANK0 (104 bytes)
   665                           ; load TBLPTR registers with __pidataBANK0
   666   00EE5A  0EA8               	movlw	low __pidataBANK0
   667   00EE5C  6EF6               	movwf	tblptrl,c
   668   00EE5E  0EF0               	movlw	high __pidataBANK0
   669   00EE60  6EF7               	movwf	tblptrh,c
   670   00EE62  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   671   00EE64  6EF8               	movwf	tblptru,c
   672   00EE66  EE00  F080         	lfsr	0,__pdataBANK0
   673   00EE6A  EE10 F068          	lfsr	1,104
   674   00EE6E                     copy_data0:
   675   00EE6E  0009               	tblrd		*+
   676   00EE70  CFF5 FFEE          	movff	tablat,postinc0
   677   00EE74  50E5               	movf	postdec1,w,c
   678   00EE76  50E1               	movf	fsr1l,w,c
   679   00EE78  E1FA               	bnz	copy_data0
   680                           
   681                           ; Initialize objects allocated to COMRAM (68 bytes)
   682                           ; load TBLPTR registers with __pidataCOMRAM
   683   00EE7A  0EAE               	movlw	low __pidataCOMRAM
   684   00EE7C  6EF6               	movwf	tblptrl,c
   685   00EE7E  0EEB               	movlw	high __pidataCOMRAM
   686   00EE80  6EF7               	movwf	tblptrh,c
   687   00EE82  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   688   00EE84  6EF8               	movwf	tblptru,c
   689   00EE86  EE00  F001         	lfsr	0,__pdataCOMRAM
   690   00EE8A  EE10 F044          	lfsr	1,68
   691   00EE8E                     copy_data1:
   692   00EE8E  0009               	tblrd		*+
   693   00EE90  CFF5 FFEE          	movff	tablat,postinc0
   694   00EE94  50E5               	movf	postdec1,w,c
   695   00EE96  50E1               	movf	fsr1l,w,c
   696   00EE98  E1FA               	bnz	copy_data1
   697                           
   698                           ; Clear objects allocated to COMRAM (5 bytes)
   699   00EE9A  6A74               	clrf	(__pbssCOMRAM+4)& (0+255),c
   700   00EE9C  6A73               	clrf	(__pbssCOMRAM+3)& (0+255),c
   701   00EE9E  6A72               	clrf	(__pbssCOMRAM+2)& (0+255),c
   702   00EEA0  6A71               	clrf	(__pbssCOMRAM+1)& (0+255),c
   703   00EEA2  6A70               	clrf	__pbssCOMRAM& (0+255),c
   704   00EEA4                     end_of_initialization:
   705                           	callstack 0
   706   00EEA4                     __end_of__initialization:
   707                           	callstack 0
   708   00EEA4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   709   00EEA6  6EF8               	movwf	tblptru,c
   710   00EEA8  0100               	movlb	0
   711   00EEAA  EF6F  F07D         	goto	_main	;jump to C main() function
   712                           
   713                           	psect	bssCOMRAM
   714   000070                     __pbssCOMRAM:
   715                           	callstack 0
   716   000070                     _in3:
   717                           	callstack 0
   718   000070                     	ds	1
   719   000071                     lcd_send_custom_char@counter:
   720                           	callstack 0
   721   000071                     	ds	1
   722   000072                     _in2:
   723                           	callstack 0
   724   000072                     	ds	1
   725   000073                     _in1:
   726                           	callstack 0
   727   000073                     	ds	1
   728   000074                     _in0:
   729                           	callstack 0
   730   000074                     	ds	1
   731                           
   732                           	psect	dataCOMRAM
   733   000001                     __pdataCOMRAM:
   734                           	callstack 0
   735   000001                     _portx:
   736                           	callstack 0
   737   000001                     	ds	10
   738   00000B                     _latx:
   739                           	callstack 0
   740   00000B                     	ds	10
   741   000015                     _trisx:
   742                           	callstack 0
   743   000015                     	ds	10
   744   00001F                     _t:
   745                           	callstack 0
   746   00001F                     	ds	1
   747   000020                     _n:
   748                           	callstack 0
   749   000020                     	ds	1
   750   000021                     _customChar1:
   751                           	callstack 0
   752   000021                     	ds	8
   753   000029                     _keypad:
   754                           	callstack 0
   755   000029                     	ds	8
   756   000031                     _lcd:
   757                           	callstack 0
   758   000031                     	ds	6
   759   000037                     _motor2:
   760                           	callstack 0
   761   000037                     	ds	3
   762   00003A                     _motor1:
   763                           	callstack 0
   764   00003A                     	ds	3
   765   00003D                     _motor2_led2:
   766                           	callstack 0
   767   00003D                     	ds	2
   768   00003F                     _motor2_led1:
   769                           	callstack 0
   770   00003F                     	ds	2
   771   000041                     _motor1_led2:
   772                           	callstack 0
   773   000041                     	ds	2
   774   000043                     _motor1_led1:
   775                           	callstack 0
   776   000043                     	ds	2
   777                           
   778                           	psect	dataBANK0
   779   000080                     __pdataBANK0:
   780                           	callstack 0
   781   000080                     _keypad_btns:
   782                           	callstack 0
   783   000080                     	ds	16
   784   000090                     _customChar12:
   785                           	callstack 0
   786   000090                     	ds	8
   787   000098                     _customChar11:
   788                           	callstack 0
   789   000098                     	ds	8
   790   0000A0                     _customChar10:
   791                           	callstack 0
   792   0000A0                     	ds	8
   793   0000A8                     _customChar9:
   794                           	callstack 0
   795   0000A8                     	ds	8
   796   0000B0                     _customChar8:
   797                           	callstack 0
   798   0000B0                     	ds	8
   799   0000B8                     _customChar7:
   800                           	callstack 0
   801   0000B8                     	ds	8
   802   0000C0                     _customChar6:
   803                           	callstack 0
   804   0000C0                     	ds	8
   805   0000C8                     _customChar5:
   806                           	callstack 0
   807   0000C8                     	ds	8
   808   0000D0                     _customChar4:
   809                           	callstack 0
   810   0000D0                     	ds	8
   811   0000D8                     _customChar3:
   812                           	callstack 0
   813   0000D8                     	ds	8
   814   0000E0                     _customChar2:
   815                           	callstack 0
   816   0000E0                     	ds	8
   817                           
   818                           	psect	cstackCOMRAM
   819   000045                     __pcstackCOMRAM:
   820                           	callstack 0
   821   000045                     gpio_pin_direction_init@pin:
   822                           	callstack 0
   823   000045                     gpio_pin_logic_write@pin:
   824                           	callstack 0
   825   000045                     gpio_pin_logic_read@pin:
   826                           	callstack 0
   827                           
   828                           ; 1 bytes @ 0x0
   829   000045                     	ds	1
   830   000046                     gpio_pin_direction_init@pin_direction:
   831                           	callstack 0
   832   000046                     gpio_pin_logic_write@pin_logic:
   833                           	callstack 0
   834   000046                     gpio_pin_logic_read@pin_logic_read:
   835                           	callstack 0
   836                           
   837                           ; 1 bytes @ 0x1
   838   000046                     	ds	1
   839   000047                     ??_gpio_pin_logic_write:
   840   000047                     ??_gpio_pin_logic_read:
   841   000047                     ??_gpio_pin_direction_init:
   842                           
   843                           ; 1 bytes @ 0x2
   844   000047                     	ds	4
   845   00004B                     gpio_pin_logic_read@ret:
   846                           	callstack 0
   847                           
   848                           ; 1 bytes @ 0x6
   849   00004B                     	ds	1
   850   00004C                     gpio_pin_direction_init@ret:
   851                           	callstack 0
   852   00004C                     gpio_pin_logic_write@ret:
   853                           	callstack 0
   854                           
   855                           ; 1 bytes @ 0x7
   856   00004C                     	ds	1
   857   00004D                     dc_motor_move_right@dc_motor:
   858                           	callstack 0
   859   00004D                     dc_motor_move_left@dc_motor:
   860                           	callstack 0
   861   00004D                     dc_motor_stop@dc_motor:
   862                           	callstack 0
   863   00004D                     keypad_read@keypad:
   864                           	callstack 0
   865   00004D                     lcd_send_nbits@lcd:
   866                           	callstack 0
   867   00004D                     lcd_send_enable@lcd:
   868                           	callstack 0
   869   00004D                     led_on@led:
   870                           	callstack 0
   871   00004D                     led_off@led:
   872                           	callstack 0
   873   00004D                     gpio_pin_output_low_init@pin:
   874                           	callstack 0
   875   00004D                     gpio_pin_input_init@pin:
   876                           	callstack 0
   877                           
   878                           ; 1 bytes @ 0x8
   879   00004D                     	ds	1
   880   00004E                     ??_gpio_pin_output_low_init:
   881   00004E                     ??_gpio_pin_input_init:
   882   00004E                     dc_motor_move_right@gpio_ret:
   883                           	callstack 0
   884   00004E                     dc_motor_move_left@gpio_ret:
   885                           	callstack 0
   886   00004E                     dc_motor_stop@gpio_ret:
   887                           	callstack 0
   888   00004E                     keypad_read@num:
   889                           	callstack 0
   890   00004E                     lcd_send_nbits@data_or_command:
   891                           	callstack 0
   892   00004E                     lcd_send_enable@gpio_ret:
   893                           	callstack 0
   894   00004E                     led_on@gpio_ret:
   895                           	callstack 0
   896   00004E                     led_off@gpio_ret:
   897                           	callstack 0
   898                           
   899                           ; 1 bytes @ 0x9
   900   00004E                     	ds	1
   901   00004F                     ??_lcd_send_nbits:
   902   00004F                     ??_keypad_read:
   903   00004F                     dc_motor_move_right@ret:
   904                           	callstack 0
   905   00004F                     dc_motor_move_left@ret:
   906                           	callstack 0
   907   00004F                     dc_motor_stop@ret:
   908                           	callstack 0
   909   00004F                     gpio_pin_output_low_init@gpio_ret:
   910                           	callstack 0
   911   00004F                     gpio_pin_input_init@gpio_ret:
   912                           	callstack 0
   913                           
   914                           ; 1 bytes @ 0xA
   915   00004F                     	ds	1
   916   000050                     keypad_read@gpio_ret:
   917                           	callstack 0
   918   000050                     gpio_pin_output_low_init@ret:
   919                           	callstack 0
   920   000050                     gpio_pin_input_init@ret:
   921                           	callstack 0
   922                           
   923                           ; 1 bytes @ 0xB
   924   000050                     	ds	1
   925   000051                     dc_motor_init@dc_motor:
   926                           	callstack 0
   927   000051                     keypad_init@keypad:
   928                           	callstack 0
   929   000051                     keypad_read@ret:
   930                           	callstack 0
   931   000051                     lcd_send_nbits@ret:
   932                           	callstack 0
   933   000051                     led_init@led:
   934                           	callstack 0
   935                           
   936                           ; 1 bytes @ 0xC
   937   000051                     	ds	1
   938   000052                     dc_motor_init@gpio_ret:
   939                           	callstack 0
   940   000052                     keypad_init@gpio_ret:
   941                           	callstack 0
   942   000052                     keypad_read@column_logic:
   943                           	callstack 0
   944   000052                     lcd_send_nbits@pin_counter:
   945                           	callstack 0
   946   000052                     led_init@gpio_ret:
   947                           	callstack 0
   948                           
   949                           ; 1 bytes @ 0xD
   950   000052                     	ds	1
   951   000053                     dc_motor_init@ret:
   952                           	callstack 0
   953   000053                     keypad_init@ret:
   954                           	callstack 0
   955   000053                     keypad_read@counter:
   956                           	callstack 0
   957   000053                     lcd_send_command@lcd:
   958                           	callstack 0
   959   000053                     lcd_send_char_data@lcd:
   960                           	callstack 0
   961   000053                     led_init@ret:
   962                           	callstack 0
   963                           
   964                           ; 1 bytes @ 0xE
   965   000053                     	ds	1
   966   000054                     keypad_init@row:
   967                           	callstack 0
   968   000054                     keypad_read@row:
   969                           	callstack 0
   970   000054                     lcd_send_command@command:
   971                           	callstack 0
   972   000054                     lcd_send_char_data@data:
   973                           	callstack 0
   974                           
   975                           ; 1 bytes @ 0xF
   976   000054                     	ds	1
   977   000055                     keypad_init@column:
   978                           	callstack 0
   979   000055                     keypad_read@column:
   980                           	callstack 0
   981   000055                     lcd_send_command@gpio_ret:
   982                           	callstack 0
   983   000055                     lcd_send_char_data@gpio_ret:
   984                           	callstack 0
   985                           
   986                           ; 1 bytes @ 0x10
   987   000055                     	ds	1
   988   000056                     lcd_send_command@lcd_ret:
   989                           	callstack 0
   990   000056                     lcd_send_char_data@lcd_ret:
   991                           	callstack 0
   992                           
   993                           ; 1 bytes @ 0x11
   994   000056                     	ds	1
   995   000057                     lcd_send_command@ret:
   996                           	callstack 0
   997   000057                     lcd_send_char_data@ret:
   998                           	callstack 0
   999                           
  1000                           ; 1 bytes @ 0x12
  1001   000057                     	ds	1
  1002   000058                     lcd_init@lcd:
  1003                           	callstack 0
  1004   000058                     lcd_send_string@lcd:
  1005                           	callstack 0
  1006   000058                     lcd_set_curser@lcd:
  1007                           	callstack 0
  1008                           
  1009                           ; 1 bytes @ 0x13
  1010   000058                     	ds	1
  1011   000059                     ??_lcd_init:
  1012   000059                     lcd_set_curser@row:
  1013                           	callstack 0
  1014   000059                     lcd_send_string@str:
  1015                           	callstack 0
  1016                           
  1017                           ; 2 bytes @ 0x14
  1018   000059                     	ds	1
  1019   00005A                     lcd_init@gpio_ret:
  1020                           	callstack 0
  1021   00005A                     lcd_set_curser@column:
  1022                           	callstack 0
  1023                           
  1024                           ; 1 bytes @ 0x15
  1025   00005A                     	ds	1
  1026   00005B                     ??_lcd_set_curser:
  1027   00005B                     lcd_init@ret:
  1028                           	callstack 0
  1029   00005B                     lcd_send_string@gpio_ret:
  1030                           	callstack 0
  1031                           
  1032                           ; 1 bytes @ 0x16
  1033   00005B                     	ds	1
  1034   00005C                     lcd_init@pins_counter:
  1035                           	callstack 0
  1036   00005C                     lcd_send_string@lcd_ret:
  1037                           	callstack 0
  1038                           
  1039                           ; 1 bytes @ 0x17
  1040   00005C                     	ds	1
  1041   00005D                     lcd_init@lcd_ret:
  1042                           	callstack 0
  1043   00005D                     lcd_send_string@ret:
  1044                           	callstack 0
  1045   00005D                     lcd_set_curser@gpio_ret:
  1046                           	callstack 0
  1047                           
  1048                           ; 1 bytes @ 0x18
  1049   00005D                     	ds	1
  1050   00005E                     lcd_set_curser@lcd_ret:
  1051                           	callstack 0
  1052                           
  1053                           ; 1 bytes @ 0x19
  1054   00005E                     	ds	1
  1055   00005F                     lcd_send_char_data_pos@lcd:
  1056                           	callstack 0
  1057   00005F                     lcd_send_string_pos@lcd:
  1058                           	callstack 0
  1059                           
  1060                           ; 1 bytes @ 0x1A
  1061   00005F                     	ds	1
  1062   000060                     lcd_send_char_data_pos@row:
  1063                           	callstack 0
  1064   000060                     lcd_send_string_pos@row:
  1065                           	callstack 0
  1066                           
  1067                           ; 1 bytes @ 0x1B
  1068   000060                     	ds	1
  1069   000061                     lcd_send_char_data_pos@column:
  1070                           	callstack 0
  1071   000061                     lcd_send_string_pos@column:
  1072                           	callstack 0
  1073                           
  1074                           ; 1 bytes @ 0x1C
  1075   000061                     	ds	1
  1076   000062                     lcd_send_char_data_pos@data:
  1077                           	callstack 0
  1078   000062                     lcd_send_string_pos@str:
  1079                           	callstack 0
  1080                           
  1081                           ; 2 bytes @ 0x1D
  1082   000062                     	ds	1
  1083   000063                     lcd_send_char_data_pos@gpio_ret:
  1084                           	callstack 0
  1085                           
  1086                           ; 1 bytes @ 0x1E
  1087   000063                     	ds	1
  1088   000064                     lcd_send_char_data_pos@lcd_ret:
  1089                           	callstack 0
  1090   000064                     lcd_send_string_pos@gpio_ret:
  1091                           	callstack 0
  1092                           
  1093                           ; 1 bytes @ 0x1F
  1094   000064                     	ds	1
  1095   000065                     lcd_send_char_data_pos@ret:
  1096                           	callstack 0
  1097   000065                     lcd_send_string_pos@lcd_ret:
  1098                           	callstack 0
  1099                           
  1100                           ; 1 bytes @ 0x20
  1101   000065                     	ds	1
  1102   000066                     lcd_send_string_pos@ret:
  1103                           	callstack 0
  1104   000066                     lcd_send_custom_char@lcd:
  1105                           	callstack 0
  1106                           
  1107                           ; 1 bytes @ 0x21
  1108   000066                     	ds	1
  1109   000067                     lcd_send_custom_char@row:
  1110                           	callstack 0
  1111                           
  1112                           ; 1 bytes @ 0x22
  1113   000067                     	ds	1
  1114   000068                     lcd_send_custom_char@column:
  1115                           	callstack 0
  1116                           
  1117                           ; 1 bytes @ 0x23
  1118   000068                     	ds	1
  1119   000069                     lcd_send_custom_char@_chr:
  1120                           	callstack 0
  1121                           
  1122                           ; 1 bytes @ 0x24
  1123   000069                     	ds	1
  1124   00006A                     lcd_send_custom_char@mem_pos:
  1125                           	callstack 0
  1126                           
  1127                           ; 1 bytes @ 0x25
  1128   00006A                     	ds	1
  1129   00006B                     lcd_send_custom_char@gpio_ret:
  1130                           	callstack 0
  1131                           
  1132                           ; 1 bytes @ 0x26
  1133   00006B                     	ds	1
  1134   00006C                     lcd_send_custom_char@lcd_ret:
  1135                           	callstack 0
  1136                           
  1137                           ; 1 bytes @ 0x27
  1138   00006C                     	ds	1
  1139   00006D                     lcd_send_custom_char@ret:
  1140                           	callstack 0
  1141                           
  1142                           ; 1 bytes @ 0x28
  1143   00006D                     	ds	1
  1144   00006E                     ??_main:
  1145                           
  1146                           ; 1 bytes @ 0x29
  1147   00006E                     	ds	2
  1148                           
  1149 ;;
  1150 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1151 ;;
  1152 ;; *************** function _main *****************
  1153 ;; Defined at:
  1154 ;;		line 18 in file "app.c"
  1155 ;; Parameters:    Size  Location     Type
  1156 ;;		None
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;		None
  1159 ;; Return value:  Size  Location     Type
  1160 ;;                  2  397[None  ] int 
  1161 ;; Registers used:
  1162 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1163 ;; Tracked objects:
  1164 ;;		On entry : 0/0
  1165 ;;		On exit  : 0/0
  1166 ;;		Unchanged: 0/0
  1167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1170 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1171 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1172 ;;Total ram usage:        2 bytes
  1173 ;; Hardware stack levels required when called: 7
  1174 ;; This function calls:
  1175 ;;		_app_init
  1176 ;;		_dc_motor_move_left
  1177 ;;		_dc_motor_move_right
  1178 ;;		_dc_motor_stop
  1179 ;;		_keypad_read
  1180 ;;		_lcd_send_command
  1181 ;;		_led_off
  1182 ;;		_led_on
  1183 ;;		_print_invalid
  1184 ;;		_print_motor1_operation
  1185 ;;		_print_motor2_operation
  1186 ;;		_print_select_bage
  1187 ;;		_print_welcome
  1188 ;; This function is called by:
  1189 ;;		Startup code after reset
  1190 ;; This function uses a non-reentrant model
  1191 ;;
  1192                           
  1193                           	psect	text0
  1194   00FADE                     __ptext0:
  1195                           	callstack 0
  1196   00FADE                     _main:
  1197                           	callstack 24
  1198   00FADE                     
  1199                           ;app.c: 20:     app_init();
  1200   00FADE  EC7D  F075         	call	_app_init	;wreg free
  1201   00FAE2                     
  1202                           ;app.c: 21:     print_welcome();
  1203   00FAE2  ECED  F07A         	call	_print_welcome	;wreg free
  1204   00FAE6  EF7E  F07D         	goto	l3813
  1205   00FAEA                     l3809:
  1206                           
  1207                           ;app.c: 28:         print_welcome();
  1208   00FAEA  ECED  F07A         	call	_print_welcome	;wreg free
  1209   00FAEE                     
  1210                           ;app.c: 29:         ret=keypad_read(&keypad,&in0);
  1211   00FAEE  0E29               	movlw	low _keypad
  1212   00FAF0  6E4D               	movwf	keypad_read@keypad^0,c
  1213   00FAF2  0E74               	movlw	low _in0
  1214   00FAF4  6E4E               	movwf	keypad_read@num^0,c
  1215   00FAF6  EC56  F07B         	call	_keypad_read	;wreg free
  1216   00FAFA  6E75               	movwf	_ret^0,c
  1217   00FAFC                     l3813:
  1218                           
  1219                           ;app.c: 27:     while(in0==0){
  1220   00FAFC  5074               	movf	_in0^0,w,c
  1221   00FAFE  B4D8               	btfsc	status,2,c
  1222   00FB00  EF84  F07D         	goto	u3061
  1223   00FB04  EF86  F07D         	goto	u3060
  1224   00FB08                     u3061:
  1225   00FB08  EF75  F07D         	goto	l3809
  1226   00FB0C                     u3060:
  1227   00FB0C                     
  1228                           ;app.c: 31:     _delay((unsigned long)((t)*(8000000/4000.0)));
  1229   00FB0C  0E03               	movlw	3
  1230   00FB0E  6E6F               	movwf	(??_main+1)^0,c
  1231   00FB10  0E08               	movlw	8
  1232   00FB12  6E6E               	movwf	??_main^0,c
  1233   00FB14  0E77               	movlw	119
  1234   00FB16                     u3237:
  1235   00FB16  2EE8               	decfsz	wreg,f,c
  1236   00FB18  D7FE               	bra	u3237
  1237   00FB1A  2E6E               	decfsz	??_main^0,f,c
  1238   00FB1C  D7FC               	bra	u3237
  1239   00FB1E  2E6F               	decfsz	(??_main+1)^0,f,c
  1240   00FB20  D7FA               	bra	u3237
  1241   00FB22  0000               	nop	
  1242   00FB24                     
  1243                           ;app.c: 32:     if(in0=='#'){
  1244   00FB24  0E23               	movlw	35
  1245   00FB26  1874               	xorwf	_in0^0,w,c
  1246   00FB28  A4D8               	btfss	status,2,c
  1247   00FB2A  EF99  F07D         	goto	u3071
  1248   00FB2E  EF9B  F07D         	goto	u3070
  1249   00FB32                     u3071:
  1250   00FB32  EF67  F07F         	goto	l3971
  1251   00FB36                     u3070:
  1252   00FB36                     
  1253                           ;app.c: 33:         print_select_bage();
  1254   00FB36  ECF2  F078         	call	_print_select_bage	;wreg free
  1255   00FB3A                     l3821:
  1256                           
  1257                           ;app.c: 35:             ret=keypad_read(&keypad,&in1);
  1258   00FB3A  0E29               	movlw	low _keypad
  1259   00FB3C  6E4D               	movwf	keypad_read@keypad^0,c
  1260   00FB3E  0E73               	movlw	low _in1
  1261   00FB40  6E4E               	movwf	keypad_read@num^0,c
  1262   00FB42  EC56  F07B         	call	_keypad_read	;wreg free
  1263   00FB46  6E75               	movwf	_ret^0,c
  1264   00FB48                     
  1265                           ;app.c: 36:         }while(in1=='0');
  1266   00FB48  0E30               	movlw	48
  1267   00FB4A  1873               	xorwf	_in1^0,w,c
  1268   00FB4C  B4D8               	btfsc	status,2,c
  1269   00FB4E  EFAB  F07D         	goto	u3081
  1270   00FB52  EFAD  F07D         	goto	u3080
  1271   00FB56                     u3081:
  1272   00FB56  EF9D  F07D         	goto	l3821
  1273   00FB5A                     u3080:
  1274   00FB5A                     
  1275                           ;app.c: 37:         _delay((unsigned long)((100)*(8000000/4000.0)));
  1276   00FB5A  0E02               	movlw	2
  1277   00FB5C  6E6F               	movwf	(??_main+1)^0,c
  1278   00FB5E  0E04               	movlw	4
  1279   00FB60  6E6E               	movwf	??_main^0,c
  1280   00FB62  0EBA               	movlw	186
  1281   00FB64                     u3247:
  1282   00FB64  2EE8               	decfsz	wreg,f,c
  1283   00FB66  D7FE               	bra	u3247
  1284   00FB68  2E6E               	decfsz	??_main^0,f,c
  1285   00FB6A  D7FC               	bra	u3247
  1286   00FB6C  2E6F               	decfsz	(??_main+1)^0,f,c
  1287   00FB6E  D7FA               	bra	u3247
  1288   00FB70  D000               	nop2	
  1289                           
  1290                           ;app.c: 40:         while(in1=='1'){
  1291   00FB72  EF87  F07E         	goto	l3897
  1292   00FB76                     l3827:
  1293                           
  1294                           ;app.c: 42:                 print_motor1_operation();
  1295   00FB76  EC88  F078         	call	_print_motor1_operation	;wreg free
  1296   00FB7A                     
  1297                           ;app.c: 43:                 ret=keypad_read(&keypad,&in2);
  1298   00FB7A  0E29               	movlw	low _keypad
  1299   00FB7C  6E4D               	movwf	keypad_read@keypad^0,c
  1300   00FB7E  0E72               	movlw	low _in2
  1301   00FB80  6E4E               	movwf	keypad_read@num^0,c
  1302   00FB82  EC56  F07B         	call	_keypad_read	;wreg free
  1303   00FB86  6E75               	movwf	_ret^0,c
  1304   00FB88                     
  1305                           ;app.c: 44:             }while(in2==0);
  1306   00FB88  5072               	movf	_in2^0,w,c
  1307   00FB8A  B4D8               	btfsc	status,2,c
  1308   00FB8C  EFCA  F07D         	goto	u3091
  1309   00FB90  EFCC  F07D         	goto	u3090
  1310   00FB94                     u3091:
  1311   00FB94  EFBB  F07D         	goto	l3827
  1312   00FB98                     u3090:
  1313   00FB98                     
  1314                           ;app.c: 45:             _delay((unsigned long)((t)*(8000000/4000.0)));
  1315   00FB98  0E03               	movlw	3
  1316   00FB9A  6E6F               	movwf	(??_main+1)^0,c
  1317   00FB9C  0E08               	movlw	8
  1318   00FB9E  6E6E               	movwf	??_main^0,c
  1319   00FBA0  0E77               	movlw	119
  1320   00FBA2                     u3257:
  1321   00FBA2  2EE8               	decfsz	wreg,f,c
  1322   00FBA4  D7FE               	bra	u3257
  1323   00FBA6  2E6E               	decfsz	??_main^0,f,c
  1324   00FBA8  D7FC               	bra	u3257
  1325   00FBAA  2E6F               	decfsz	(??_main+1)^0,f,c
  1326   00FBAC  D7FA               	bra	u3257
  1327   00FBAE  0000               	nop	
  1328   00FBB0                     
  1329                           ;app.c: 46:             if(in2=='1'){
  1330   00FBB0  0E31               	movlw	49
  1331   00FBB2  1872               	xorwf	_in2^0,w,c
  1332   00FBB4  A4D8               	btfss	status,2,c
  1333   00FBB6  EFDF  F07D         	goto	u3101
  1334   00FBBA  EFE1  F07D         	goto	u3100
  1335   00FBBE                     u3101:
  1336   00FBBE  EFF2  F07D         	goto	l3843
  1337   00FBC2                     u3100:
  1338   00FBC2                     
  1339                           ;app.c: 47:                 led_on(&motor1_led1);
  1340   00FBC2  0E43               	movlw	low _motor1_led1
  1341   00FBC4  6E4D               	movwf	led_on@led^0,c
  1342   00FBC6  EC1E  F076         	call	_led_on	;wreg free
  1343                           
  1344                           ;app.c: 48:                 led_off(&motor1_led2);
  1345   00FBCA  0E41               	movlw	low _motor1_led2
  1346   00FBCC  6E4D               	movwf	led_off@led^0,c
  1347   00FBCE  ECF9  F075         	call	_led_off	;wreg free
  1348   00FBD2                     
  1349                           ;app.c: 49:                 ret=dc_motor_move_right(&motor1);
  1350   00FBD2  0E3A               	movlw	low _motor1
  1351   00FBD4  6E4D               	movwf	dc_motor_move_right@dc_motor^0,c
  1352   00FBD6  ECB6  F076         	call	_dc_motor_move_right	;wreg free
  1353   00FBDA  6E75               	movwf	_ret^0,c
  1354   00FBDC                     l3841:
  1355                           
  1356                           ;app.c: 50:                 in2=0;
  1357   00FBDC  0E00               	movlw	0
  1358   00FBDE  6E72               	movwf	_in2^0,c
  1359                           
  1360                           ;app.c: 51:             }
  1361   00FBE0  EF87  F07E         	goto	l3897
  1362   00FBE4                     l3843:
  1363   00FBE4  0E32               	movlw	50
  1364   00FBE6  1872               	xorwf	_in2^0,w,c
  1365   00FBE8  A4D8               	btfss	status,2,c
  1366   00FBEA  EFF9  F07D         	goto	u3111
  1367   00FBEE  EFFB  F07D         	goto	u3110
  1368   00FBF2                     u3111:
  1369   00FBF2  EF0A  F07E         	goto	l3851
  1370   00FBF6                     u3110:
  1371   00FBF6                     
  1372                           ;app.c: 53:                 led_off(&motor1_led1);
  1373   00FBF6  0E43               	movlw	low _motor1_led1
  1374   00FBF8  6E4D               	movwf	led_off@led^0,c
  1375   00FBFA  ECF9  F075         	call	_led_off	;wreg free
  1376                           
  1377                           ;app.c: 54:                 led_on(&motor1_led2);
  1378   00FBFE  0E41               	movlw	low _motor1_led2
  1379   00FC00  6E4D               	movwf	led_on@led^0,c
  1380   00FC02  EC1E  F076         	call	_led_on	;wreg free
  1381   00FC06                     
  1382                           ;app.c: 55:                 ret=dc_motor_move_left(&motor1);
  1383   00FC06  0E3A               	movlw	low _motor1
  1384   00FC08  6E4D               	movwf	dc_motor_move_left@dc_motor^0,c
  1385   00FC0A  EC8F  F076         	call	_dc_motor_move_left	;wreg free
  1386   00FC0E  6E75               	movwf	_ret^0,c
  1387   00FC10  EFEE  F07D         	goto	l3841
  1388   00FC14                     l3851:
  1389   00FC14  0E34               	movlw	52
  1390   00FC16  1872               	xorwf	_in2^0,w,c
  1391   00FC18  A4D8               	btfss	status,2,c
  1392   00FC1A  EF11  F07E         	goto	u3121
  1393   00FC1E  EF13  F07E         	goto	u3120
  1394   00FC22                     u3121:
  1395   00FC22  EF22  F07E         	goto	l3859
  1396   00FC26                     u3120:
  1397   00FC26                     
  1398                           ;app.c: 59:                 led_off(&motor1_led1);
  1399   00FC26  0E43               	movlw	low _motor1_led1
  1400   00FC28  6E4D               	movwf	led_off@led^0,c
  1401   00FC2A  ECF9  F075         	call	_led_off	;wreg free
  1402                           
  1403                           ;app.c: 60:                 led_off(&motor1_led2);
  1404   00FC2E  0E41               	movlw	low _motor1_led2
  1405   00FC30  6E4D               	movwf	led_off@led^0,c
  1406   00FC32  ECF9  F075         	call	_led_off	;wreg free
  1407   00FC36                     
  1408                           ;app.c: 61:                 ret=dc_motor_stop(&motor1);
  1409   00FC36  0E3A               	movlw	low _motor1
  1410   00FC38  6E4D               	movwf	dc_motor_stop@dc_motor^0,c
  1411   00FC3A  EC69  F076         	call	_dc_motor_stop	;wreg free
  1412   00FC3E  6E75               	movwf	_ret^0,c
  1413   00FC40  EFEE  F07D         	goto	l3841
  1414   00FC44                     l3859:
  1415   00FC44  0E35               	movlw	53
  1416   00FC46  1872               	xorwf	_in2^0,w,c
  1417   00FC48  A4D8               	btfss	status,2,c
  1418   00FC4A  EF29  F07E         	goto	u3131
  1419   00FC4E  EF2B  F07E         	goto	u3130
  1420   00FC52                     u3131:
  1421   00FC52  EF31  F07E         	goto	l3865
  1422   00FC56                     u3130:
  1423   00FC56                     
  1424                           ;app.c: 66:                 in1=0;
  1425   00FC56  0E00               	movlw	0
  1426   00FC58  6E73               	movwf	_in1^0,c
  1427                           
  1428                           ;app.c: 67:                 in2=0;
  1429   00FC5A  0E00               	movlw	0
  1430   00FC5C  6E72               	movwf	_in2^0,c
  1431                           
  1432                           ;app.c: 68:                 break;
  1433   00FC5E  EF5C  F07F         	goto	l3969
  1434   00FC62                     l3865:
  1435   00FC62  0E23               	movlw	35
  1436   00FC64  1872               	xorwf	_in2^0,w,c
  1437   00FC66  A4D8               	btfss	status,2,c
  1438   00FC68  EF38  F07E         	goto	u3141
  1439   00FC6C  EF3A  F07E         	goto	u3140
  1440   00FC70                     u3141:
  1441   00FC70  EF6A  F07E         	goto	l3889
  1442   00FC74                     u3140:
  1443   00FC74                     
  1444                           ;app.c: 72:                 led_off(&motor1_led1);
  1445   00FC74  0E43               	movlw	low _motor1_led1
  1446   00FC76  6E4D               	movwf	led_off@led^0,c
  1447   00FC78  ECF9  F075         	call	_led_off	;wreg free
  1448                           
  1449                           ;app.c: 73:                 led_off(&motor1_led2);
  1450   00FC7C  0E41               	movlw	low _motor1_led2
  1451   00FC7E  6E4D               	movwf	led_off@led^0,c
  1452   00FC80  ECF9  F075         	call	_led_off	;wreg free
  1453   00FC84                     
  1454                           ;app.c: 74:                 ret=dc_motor_stop(&motor1);
  1455   00FC84  0E3A               	movlw	low _motor1
  1456   00FC86  6E4D               	movwf	dc_motor_stop@dc_motor^0,c
  1457   00FC88  EC69  F076         	call	_dc_motor_stop	;wreg free
  1458   00FC8C  6E75               	movwf	_ret^0,c
  1459   00FC8E                     
  1460                           ;app.c: 75:                 led_off(&motor2_led1);
  1461   00FC8E  0E3F               	movlw	low _motor2_led1
  1462   00FC90  6E4D               	movwf	led_off@led^0,c
  1463   00FC92  ECF9  F075         	call	_led_off	;wreg free
  1464   00FC96                     
  1465                           ;app.c: 76:                 led_off(&motor2_led2);
  1466   00FC96  0E3D               	movlw	low _motor2_led2
  1467   00FC98  6E4D               	movwf	led_off@led^0,c
  1468   00FC9A  ECF9  F075         	call	_led_off	;wreg free
  1469   00FC9E                     
  1470                           ;app.c: 77:                 ret=dc_motor_stop(&motor2);
  1471   00FC9E  0E37               	movlw	low _motor2
  1472   00FCA0  6E4D               	movwf	dc_motor_stop@dc_motor^0,c
  1473   00FCA2  EC69  F076         	call	_dc_motor_stop	;wreg free
  1474   00FCA6  6E75               	movwf	_ret^0,c
  1475   00FCA8                     
  1476                           ;app.c: 78:                 ret=lcd_send_command(&lcd,0X01);
  1477   00FCA8  0E31               	movlw	low _lcd
  1478   00FCAA  6E53               	movwf	lcd_send_command@lcd^0,c
  1479   00FCAC  0E01               	movlw	1
  1480   00FCAE  6E54               	movwf	lcd_send_command@command^0,c
  1481   00FCB0  ECBA  F077         	call	_lcd_send_command	;wreg free
  1482   00FCB4  6E75               	movwf	_ret^0,c
  1483   00FCB6                     
  1484                           ;app.c: 79:                 ret=lcd_send_command(&lcd,0x02);
  1485   00FCB6  0E31               	movlw	low _lcd
  1486   00FCB8  6E53               	movwf	lcd_send_command@lcd^0,c
  1487   00FCBA  0E02               	movlw	2
  1488   00FCBC  6E54               	movwf	lcd_send_command@command^0,c
  1489   00FCBE  ECBA  F077         	call	_lcd_send_command	;wreg free
  1490   00FCC2  6E75               	movwf	_ret^0,c
  1491   00FCC4                     
  1492                           ;app.c: 80:                 in0=0;
  1493   00FCC4  0E00               	movlw	0
  1494   00FCC6  6E74               	movwf	_in0^0,c
  1495   00FCC8                     
  1496                           ;app.c: 81:                 in1=0;
  1497   00FCC8  0E00               	movlw	0
  1498   00FCCA  6E73               	movwf	_in1^0,c
  1499   00FCCC                     l3885:
  1500                           
  1501                           ;app.c: 82:                 in2=0;
  1502   00FCCC  0E00               	movlw	0
  1503   00FCCE  6E72               	movwf	_in2^0,c
  1504                           
  1505                           ;app.c: 83:                 break;
  1506   00FCD0  EF5C  F07F         	goto	l3969
  1507   00FCD4                     l3889:
  1508                           
  1509                           ;app.c: 86:                 ret=lcd_send_command(&lcd,0X01);
  1510   00FCD4  0E31               	movlw	low _lcd
  1511   00FCD6  6E53               	movwf	lcd_send_command@lcd^0,c
  1512   00FCD8  0E01               	movlw	1
  1513   00FCDA  6E54               	movwf	lcd_send_command@command^0,c
  1514   00FCDC  ECBA  F077         	call	_lcd_send_command	;wreg free
  1515   00FCE0  6E75               	movwf	_ret^0,c
  1516                           
  1517                           ;app.c: 87:                 ret=lcd_send_command(&lcd,0x02);
  1518   00FCE2  0E31               	movlw	low _lcd
  1519   00FCE4  6E53               	movwf	lcd_send_command@lcd^0,c
  1520   00FCE6  0E02               	movlw	2
  1521   00FCE8  6E54               	movwf	lcd_send_command@command^0,c
  1522   00FCEA  ECBA  F077         	call	_lcd_send_command	;wreg free
  1523   00FCEE  6E75               	movwf	_ret^0,c
  1524   00FCF0                     
  1525                           ;app.c: 88:                 print_invalid();
  1526   00FCF0  EC84  F07A         	call	_print_invalid	;wreg free
  1527   00FCF4                     
  1528                           ;app.c: 89:                 _delay((unsigned long)((1000)*(8000000/4000.0)));
  1529   00FCF4  0E0B               	movlw	11
  1530   00FCF6  6E6F               	movwf	(??_main+1)^0,c
  1531   00FCF8  0E26               	movlw	38
  1532   00FCFA  6E6E               	movwf	??_main^0,c
  1533   00FCFC  0E5E               	movlw	94
  1534   00FCFE                     u3267:
  1535   00FCFE  2EE8               	decfsz	wreg,f,c
  1536   00FD00  D7FE               	bra	u3267
  1537   00FD02  2E6E               	decfsz	??_main^0,f,c
  1538   00FD04  D7FC               	bra	u3267
  1539   00FD06  2E6F               	decfsz	(??_main+1)^0,f,c
  1540   00FD08  D7FA               	bra	u3267
  1541   00FD0A  EFEE  F07D         	goto	l3841
  1542   00FD0E                     l3897:
  1543                           
  1544                           ;app.c: 40:         while(in1=='1'){
  1545   00FD0E  0E31               	movlw	49
  1546   00FD10  1873               	xorwf	_in1^0,w,c
  1547   00FD12  B4D8               	btfsc	status,2,c
  1548   00FD14  EF8E  F07E         	goto	u3151
  1549   00FD18  EF90  F07E         	goto	u3150
  1550   00FD1C                     u3151:
  1551   00FD1C  EFBB  F07D         	goto	l3827
  1552   00FD20                     u3150:
  1553   00FD20  EF5C  F07F         	goto	l3969
  1554   00FD24                     l3899:
  1555                           
  1556                           ;app.c: 97:             print_motor2_operation();
  1557   00FD24  ECBD  F078         	call	_print_motor2_operation	;wreg free
  1558   00FD28                     
  1559                           ;app.c: 98:             ret=keypad_read(&keypad,&in2);
  1560   00FD28  0E29               	movlw	low _keypad
  1561   00FD2A  6E4D               	movwf	keypad_read@keypad^0,c
  1562   00FD2C  0E72               	movlw	low _in2
  1563   00FD2E  6E4E               	movwf	keypad_read@num^0,c
  1564   00FD30  EC56  F07B         	call	_keypad_read	;wreg free
  1565   00FD34  6E75               	movwf	_ret^0,c
  1566   00FD36                     
  1567                           ;app.c: 99:             }while(in2==0);
  1568   00FD36  5072               	movf	_in2^0,w,c
  1569   00FD38  B4D8               	btfsc	status,2,c
  1570   00FD3A  EFA1  F07E         	goto	u3161
  1571   00FD3E  EFA3  F07E         	goto	u3160
  1572   00FD42                     u3161:
  1573   00FD42  EF92  F07E         	goto	l3899
  1574   00FD46                     u3160:
  1575   00FD46                     
  1576                           ;app.c: 100:             _delay((unsigned long)((t)*(8000000/4000.0)));
  1577   00FD46  0E03               	movlw	3
  1578   00FD48  6E6F               	movwf	(??_main+1)^0,c
  1579   00FD4A  0E08               	movlw	8
  1580   00FD4C  6E6E               	movwf	??_main^0,c
  1581   00FD4E  0E77               	movlw	119
  1582   00FD50                     u3277:
  1583   00FD50  2EE8               	decfsz	wreg,f,c
  1584   00FD52  D7FE               	bra	u3277
  1585   00FD54  2E6E               	decfsz	??_main^0,f,c
  1586   00FD56  D7FC               	bra	u3277
  1587   00FD58  2E6F               	decfsz	(??_main+1)^0,f,c
  1588   00FD5A  D7FA               	bra	u3277
  1589   00FD5C  0000               	nop	
  1590   00FD5E                     
  1591                           ;app.c: 101:             if(in2=='1'){
  1592   00FD5E  0E31               	movlw	49
  1593   00FD60  1872               	xorwf	_in2^0,w,c
  1594   00FD62  A4D8               	btfss	status,2,c
  1595   00FD64  EFB6  F07E         	goto	u3171
  1596   00FD68  EFB8  F07E         	goto	u3170
  1597   00FD6C                     u3171:
  1598   00FD6C  EFC7  F07E         	goto	l3915
  1599   00FD70                     u3170:
  1600   00FD70                     
  1601                           ;app.c: 102:                 led_on(&motor2_led1);
  1602   00FD70  0E3F               	movlw	low _motor2_led1
  1603   00FD72  6E4D               	movwf	led_on@led^0,c
  1604   00FD74  EC1E  F076         	call	_led_on	;wreg free
  1605                           
  1606                           ;app.c: 103:                 led_off(&motor2_led2);
  1607   00FD78  0E3D               	movlw	low _motor2_led2
  1608   00FD7A  6E4D               	movwf	led_off@led^0,c
  1609   00FD7C  ECF9  F075         	call	_led_off	;wreg free
  1610   00FD80                     
  1611                           ;app.c: 104:                 ret=dc_motor_move_right(&motor2);
  1612   00FD80  0E37               	movlw	low _motor2
  1613   00FD82  6E4D               	movwf	dc_motor_move_right@dc_motor^0,c
  1614   00FD84  ECB6  F076         	call	_dc_motor_move_right	;wreg free
  1615   00FD88  6E75               	movwf	_ret^0,c
  1616   00FD8A  EF66  F07E         	goto	l3885
  1617   00FD8E                     l3915:
  1618   00FD8E  0E32               	movlw	50
  1619   00FD90  1872               	xorwf	_in2^0,w,c
  1620   00FD92  A4D8               	btfss	status,2,c
  1621   00FD94  EFCE  F07E         	goto	u3181
  1622   00FD98  EFD0  F07E         	goto	u3180
  1623   00FD9C                     u3181:
  1624   00FD9C  EFDF  F07E         	goto	l3923
  1625   00FDA0                     u3180:
  1626   00FDA0                     
  1627                           ;app.c: 108:                 led_off(&motor2_led1);
  1628   00FDA0  0E3F               	movlw	low _motor2_led1
  1629   00FDA2  6E4D               	movwf	led_off@led^0,c
  1630   00FDA4  ECF9  F075         	call	_led_off	;wreg free
  1631                           
  1632                           ;app.c: 109:                 led_on(&motor2_led2);
  1633   00FDA8  0E3D               	movlw	low _motor2_led2
  1634   00FDAA  6E4D               	movwf	led_on@led^0,c
  1635   00FDAC  EC1E  F076         	call	_led_on	;wreg free
  1636   00FDB0                     
  1637                           ;app.c: 110:                 ret=dc_motor_move_left(&motor2);
  1638   00FDB0  0E37               	movlw	low _motor2
  1639   00FDB2  6E4D               	movwf	dc_motor_move_left@dc_motor^0,c
  1640   00FDB4  EC8F  F076         	call	_dc_motor_move_left	;wreg free
  1641   00FDB8  6E75               	movwf	_ret^0,c
  1642   00FDBA  EF66  F07E         	goto	l3885
  1643   00FDBE                     l3923:
  1644   00FDBE  0E34               	movlw	52
  1645   00FDC0  1872               	xorwf	_in2^0,w,c
  1646   00FDC2  A4D8               	btfss	status,2,c
  1647   00FDC4  EFE6  F07E         	goto	u3191
  1648   00FDC8  EFE8  F07E         	goto	u3190
  1649   00FDCC                     u3191:
  1650   00FDCC  EFF7  F07E         	goto	l3931
  1651   00FDD0                     u3190:
  1652   00FDD0                     
  1653                           ;app.c: 114:                 led_off(&motor2_led1);
  1654   00FDD0  0E3F               	movlw	low _motor2_led1
  1655   00FDD2  6E4D               	movwf	led_off@led^0,c
  1656   00FDD4  ECF9  F075         	call	_led_off	;wreg free
  1657                           
  1658                           ;app.c: 115:                 led_off(&motor2_led2);
  1659   00FDD8  0E3D               	movlw	low _motor2_led2
  1660   00FDDA  6E4D               	movwf	led_off@led^0,c
  1661   00FDDC  ECF9  F075         	call	_led_off	;wreg free
  1662   00FDE0                     
  1663                           ;app.c: 116:                 ret=dc_motor_stop(&motor2);
  1664   00FDE0  0E37               	movlw	low _motor2
  1665   00FDE2  6E4D               	movwf	dc_motor_stop@dc_motor^0,c
  1666   00FDE4  EC69  F076         	call	_dc_motor_stop	;wreg free
  1667   00FDE8  6E75               	movwf	_ret^0,c
  1668   00FDEA  EF66  F07E         	goto	l3885
  1669   00FDEE                     l3931:
  1670   00FDEE  0E35               	movlw	53
  1671   00FDF0  1872               	xorwf	_in2^0,w,c
  1672   00FDF2  A4D8               	btfss	status,2,c
  1673   00FDF4  EFFE  F07E         	goto	u3201
  1674   00FDF8  EF00  F07F         	goto	u3200
  1675   00FDFC                     u3201:
  1676   00FDFC  EF06  F07F         	goto	l3937
  1677   00FE00                     u3200:
  1678   00FE00                     
  1679                           ;app.c: 121:                 in1=0;
  1680   00FE00  0E00               	movlw	0
  1681   00FE02  6E73               	movwf	_in1^0,c
  1682                           
  1683                           ;app.c: 122:                 in2=0;
  1684   00FE04  0E00               	movlw	0
  1685   00FE06  6E72               	movwf	_in2^0,c
  1686                           
  1687                           ;app.c: 123:                 break;
  1688   00FE08  EF7E  F07D         	goto	l3813
  1689   00FE0C                     l3937:
  1690   00FE0C  0E23               	movlw	35
  1691   00FE0E  1872               	xorwf	_in2^0,w,c
  1692   00FE10  A4D8               	btfss	status,2,c
  1693   00FE12  EF0D  F07F         	goto	u3211
  1694   00FE16  EF0F  F07F         	goto	u3210
  1695   00FE1A                     u3211:
  1696   00FE1A  EF3F  F07F         	goto	l3961
  1697   00FE1E                     u3210:
  1698   00FE1E                     
  1699                           ;app.c: 127:                 led_off(&motor1_led1);
  1700   00FE1E  0E43               	movlw	low _motor1_led1
  1701   00FE20  6E4D               	movwf	led_off@led^0,c
  1702   00FE22  ECF9  F075         	call	_led_off	;wreg free
  1703                           
  1704                           ;app.c: 128:                 led_off(&motor1_led2);
  1705   00FE26  0E41               	movlw	low _motor1_led2
  1706   00FE28  6E4D               	movwf	led_off@led^0,c
  1707   00FE2A  ECF9  F075         	call	_led_off	;wreg free
  1708   00FE2E                     
  1709                           ;app.c: 129:                 ret=dc_motor_stop(&motor1);
  1710   00FE2E  0E3A               	movlw	low _motor1
  1711   00FE30  6E4D               	movwf	dc_motor_stop@dc_motor^0,c
  1712   00FE32  EC69  F076         	call	_dc_motor_stop	;wreg free
  1713   00FE36  6E75               	movwf	_ret^0,c
  1714   00FE38                     
  1715                           ;app.c: 130:                 led_off(&motor2_led1);
  1716   00FE38  0E3F               	movlw	low _motor2_led1
  1717   00FE3A  6E4D               	movwf	led_off@led^0,c
  1718   00FE3C  ECF9  F075         	call	_led_off	;wreg free
  1719   00FE40                     
  1720                           ;app.c: 131:                 led_off(&motor2_led2);
  1721   00FE40  0E3D               	movlw	low _motor2_led2
  1722   00FE42  6E4D               	movwf	led_off@led^0,c
  1723   00FE44  ECF9  F075         	call	_led_off	;wreg free
  1724   00FE48                     
  1725                           ;app.c: 132:                 ret=dc_motor_stop(&motor2);
  1726   00FE48  0E37               	movlw	low _motor2
  1727   00FE4A  6E4D               	movwf	dc_motor_stop@dc_motor^0,c
  1728   00FE4C  EC69  F076         	call	_dc_motor_stop	;wreg free
  1729   00FE50  6E75               	movwf	_ret^0,c
  1730   00FE52                     
  1731                           ;app.c: 133:                 ret=lcd_send_command(&lcd,0X01);
  1732   00FE52  0E31               	movlw	low _lcd
  1733   00FE54  6E53               	movwf	lcd_send_command@lcd^0,c
  1734   00FE56  0E01               	movlw	1
  1735   00FE58  6E54               	movwf	lcd_send_command@command^0,c
  1736   00FE5A  ECBA  F077         	call	_lcd_send_command	;wreg free
  1737   00FE5E  6E75               	movwf	_ret^0,c
  1738   00FE60                     
  1739                           ;app.c: 134:                 ret=lcd_send_command(&lcd,0x02);
  1740   00FE60  0E31               	movlw	low _lcd
  1741   00FE62  6E53               	movwf	lcd_send_command@lcd^0,c
  1742   00FE64  0E02               	movlw	2
  1743   00FE66  6E54               	movwf	lcd_send_command@command^0,c
  1744   00FE68  ECBA  F077         	call	_lcd_send_command	;wreg free
  1745   00FE6C  6E75               	movwf	_ret^0,c
  1746   00FE6E                     
  1747                           ;app.c: 135:                 in0=0;
  1748   00FE6E  0E00               	movlw	0
  1749   00FE70  6E74               	movwf	_in0^0,c
  1750   00FE72                     
  1751                           ;app.c: 136:                 in1=0;
  1752   00FE72  0E00               	movlw	0
  1753   00FE74  6E73               	movwf	_in1^0,c
  1754   00FE76                     
  1755                           ;app.c: 137:                 in2=0;
  1756   00FE76  0E00               	movlw	0
  1757   00FE78  6E72               	movwf	_in2^0,c
  1758                           
  1759                           ;app.c: 138:                 break;
  1760   00FE7A  EF7E  F07D         	goto	l3813
  1761   00FE7E                     l3961:
  1762                           
  1763                           ;app.c: 141:                 ret=lcd_send_command(&lcd,0X01);
  1764   00FE7E  0E31               	movlw	low _lcd
  1765   00FE80  6E53               	movwf	lcd_send_command@lcd^0,c
  1766   00FE82  0E01               	movlw	1
  1767   00FE84  6E54               	movwf	lcd_send_command@command^0,c
  1768   00FE86  ECBA  F077         	call	_lcd_send_command	;wreg free
  1769   00FE8A  6E75               	movwf	_ret^0,c
  1770                           
  1771                           ;app.c: 142:                 ret=lcd_send_command(&lcd,0x02);
  1772   00FE8C  0E31               	movlw	low _lcd
  1773   00FE8E  6E53               	movwf	lcd_send_command@lcd^0,c
  1774   00FE90  0E02               	movlw	2
  1775   00FE92  6E54               	movwf	lcd_send_command@command^0,c
  1776   00FE94  ECBA  F077         	call	_lcd_send_command	;wreg free
  1777   00FE98  6E75               	movwf	_ret^0,c
  1778   00FE9A                     
  1779                           ;app.c: 143:                 print_invalid();
  1780   00FE9A  EC84  F07A         	call	_print_invalid	;wreg free
  1781   00FE9E                     
  1782                           ;app.c: 144:                 _delay((unsigned long)((1000)*(8000000/4000.0)));
  1783   00FE9E  0E0B               	movlw	11
  1784   00FEA0  6E6F               	movwf	(??_main+1)^0,c
  1785   00FEA2  0E26               	movlw	38
  1786   00FEA4  6E6E               	movwf	??_main^0,c
  1787   00FEA6  0E5E               	movlw	94
  1788   00FEA8                     u3287:
  1789   00FEA8  2EE8               	decfsz	wreg,f,c
  1790   00FEAA  D7FE               	bra	u3287
  1791   00FEAC  2E6E               	decfsz	??_main^0,f,c
  1792   00FEAE  D7FC               	bra	u3287
  1793   00FEB0  2E6F               	decfsz	(??_main+1)^0,f,c
  1794   00FEB2  D7FA               	bra	u3287
  1795   00FEB4  EF66  F07E         	goto	l3885
  1796   00FEB8                     l3969:
  1797                           
  1798                           ;app.c: 95:         while(in1=='2'){
  1799   00FEB8  0E32               	movlw	50
  1800   00FEBA  1873               	xorwf	_in1^0,w,c
  1801   00FEBC  B4D8               	btfsc	status,2,c
  1802   00FEBE  EF63  F07F         	goto	u3221
  1803   00FEC2  EF65  F07F         	goto	u3220
  1804   00FEC6                     u3221:
  1805   00FEC6  EF92  F07E         	goto	l3899
  1806   00FECA                     u3220:
  1807   00FECA  EF7E  F07D         	goto	l3813
  1808   00FECE                     l3971:
  1809                           
  1810                           ;app.c: 150:         in0=0;
  1811   00FECE  0E00               	movlw	0
  1812   00FED0  6E74               	movwf	_in0^0,c
  1813   00FED2  EF7E  F07D         	goto	l3813
  1814   00FED6  EF00  F000         	goto	start
  1815   00FEDA                     __end_of_main:
  1816                           	callstack 0
  1817                           
  1818 ;; *************** function _print_welcome *****************
  1819 ;; Defined at:
  1820 ;;		line 169 in file "app.c"
  1821 ;; Parameters:    Size  Location     Type
  1822 ;;		None
  1823 ;; Auto vars:     Size  Location     Type
  1824 ;;		None
  1825 ;; Return value:  Size  Location     Type
  1826 ;;                  1    wreg      void 
  1827 ;; Registers used:
  1828 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1829 ;; Tracked objects:
  1830 ;;		On entry : 0/0
  1831 ;;		On exit  : 0/0
  1832 ;;		Unchanged: 0/0
  1833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1838 ;;Total ram usage:        0 bytes
  1839 ;; Hardware stack levels used: 1
  1840 ;; Hardware stack levels required when called: 6
  1841 ;; This function calls:
  1842 ;;		_lcd_send_custom_char
  1843 ;;		_lcd_send_string_pos
  1844 ;; This function is called by:
  1845 ;;		_main
  1846 ;; This function uses a non-reentrant model
  1847 ;;
  1848                           
  1849                           	psect	text1
  1850   00F5DA                     __ptext1:
  1851                           	callstack 0
  1852   00F5DA                     _print_welcome:
  1853                           	callstack 24
  1854   00F5DA                     
  1855                           ;app.c: 170:     ret=lcd_send_string_pos(&lcd,1,7,"welcome");
  1856   00F5DA  0E31               	movlw	low _lcd
  1857   00F5DC  6E5F               	movwf	lcd_send_string_pos@lcd^0,c
  1858   00F5DE  0E01               	movlw	1
  1859   00F5E0  6E60               	movwf	lcd_send_string_pos@row^0,c
  1860   00F5E2  0E07               	movlw	7
  1861   00F5E4  6E61               	movwf	lcd_send_string_pos@column^0,c
  1862   00F5E6  0EF4               	movlw	low STR_4
  1863   00F5E8  6E62               	movwf	lcd_send_string_pos@str^0,c
  1864   00F5EA  0EFF               	movlw	high STR_4
  1865   00F5EC  6E63               	movwf	(lcd_send_string_pos@str+1)^0,c
  1866   00F5EE  EC5F  F079         	call	_lcd_send_string_pos	;wreg free
  1867   00F5F2  6E75               	movwf	_ret^0,c
  1868   00F5F4                     
  1869                           ;app.c: 171:     ret=lcd_send_custom_char(&lcd,2,9,customChar1,0);
  1870   00F5F4  0E31               	movlw	low _lcd
  1871   00F5F6  6E66               	movwf	lcd_send_custom_char@lcd^0,c
  1872   00F5F8  0E02               	movlw	2
  1873   00F5FA  6E67               	movwf	lcd_send_custom_char@row^0,c
  1874   00F5FC  0E09               	movlw	9
  1875   00F5FE  6E68               	movwf	lcd_send_custom_char@column^0,c
  1876   00F600  0E21               	movlw	low _customChar1
  1877   00F602  6E69               	movwf	lcd_send_custom_char@_chr^0,c
  1878   00F604  0E00               	movlw	0
  1879   00F606  6E6A               	movwf	lcd_send_custom_char@mem_pos^0,c
  1880   00F608  ECE6  F079         	call	_lcd_send_custom_char	;wreg free
  1881   00F60C  6E75               	movwf	_ret^0,c
  1882   00F60E                     
  1883                           ;app.c: 172:     ret=lcd_send_custom_char(&lcd,2,10,customChar2,1);
  1884   00F60E  0E31               	movlw	low _lcd
  1885   00F610  6E66               	movwf	lcd_send_custom_char@lcd^0,c
  1886   00F612  0E02               	movlw	2
  1887   00F614  6E67               	movwf	lcd_send_custom_char@row^0,c
  1888   00F616  0E0A               	movlw	10
  1889   00F618  6E68               	movwf	lcd_send_custom_char@column^0,c
  1890   00F61A  0EE0               	movlw	low _customChar2
  1891   00F61C  6E69               	movwf	lcd_send_custom_char@_chr^0,c
  1892   00F61E  0E01               	movlw	1
  1893   00F620  6E6A               	movwf	lcd_send_custom_char@mem_pos^0,c
  1894   00F622  ECE6  F079         	call	_lcd_send_custom_char	;wreg free
  1895   00F626  6E75               	movwf	_ret^0,c
  1896   00F628                     
  1897                           ;app.c: 173:     ret=lcd_send_custom_char(&lcd,2,11,customChar3,2);
  1898   00F628  0E31               	movlw	low _lcd
  1899   00F62A  6E66               	movwf	lcd_send_custom_char@lcd^0,c
  1900   00F62C  0E02               	movlw	2
  1901   00F62E  6E67               	movwf	lcd_send_custom_char@row^0,c
  1902   00F630  0E0B               	movlw	11
  1903   00F632  6E68               	movwf	lcd_send_custom_char@column^0,c
  1904   00F634  0ED8               	movlw	low _customChar3
  1905   00F636  6E69               	movwf	lcd_send_custom_char@_chr^0,c
  1906   00F638  0E02               	movlw	2
  1907   00F63A  6E6A               	movwf	lcd_send_custom_char@mem_pos^0,c
  1908   00F63C  ECE6  F079         	call	_lcd_send_custom_char	;wreg free
  1909   00F640  6E75               	movwf	_ret^0,c
  1910   00F642                     
  1911                           ;app.c: 174:     ret=lcd_send_custom_char(&lcd,3,9,customChar4,3);
  1912   00F642  0E31               	movlw	low _lcd
  1913   00F644  6E66               	movwf	lcd_send_custom_char@lcd^0,c
  1914   00F646  0E03               	movlw	3
  1915   00F648  6E67               	movwf	lcd_send_custom_char@row^0,c
  1916   00F64A  0E09               	movlw	9
  1917   00F64C  6E68               	movwf	lcd_send_custom_char@column^0,c
  1918   00F64E  0ED0               	movlw	low _customChar4
  1919   00F650  6E69               	movwf	lcd_send_custom_char@_chr^0,c
  1920   00F652  0E03               	movlw	3
  1921   00F654  6E6A               	movwf	lcd_send_custom_char@mem_pos^0,c
  1922   00F656  ECE6  F079         	call	_lcd_send_custom_char	;wreg free
  1923   00F65A  6E75               	movwf	_ret^0,c
  1924   00F65C                     
  1925                           ;app.c: 175:     ret=lcd_send_custom_char(&lcd,3,10,customChar5,4);
  1926   00F65C  0E31               	movlw	low _lcd
  1927   00F65E  6E66               	movwf	lcd_send_custom_char@lcd^0,c
  1928   00F660  0E03               	movlw	3
  1929   00F662  6E67               	movwf	lcd_send_custom_char@row^0,c
  1930   00F664  0E0A               	movlw	10
  1931   00F666  6E68               	movwf	lcd_send_custom_char@column^0,c
  1932   00F668  0EC8               	movlw	low _customChar5
  1933   00F66A  6E69               	movwf	lcd_send_custom_char@_chr^0,c
  1934   00F66C  0E04               	movlw	4
  1935   00F66E  6E6A               	movwf	lcd_send_custom_char@mem_pos^0,c
  1936   00F670  ECE6  F079         	call	_lcd_send_custom_char	;wreg free
  1937   00F674  6E75               	movwf	_ret^0,c
  1938   00F676                     
  1939                           ;app.c: 176:     ret=lcd_send_custom_char(&lcd,3,11,customChar6,5);
  1940   00F676  0E31               	movlw	low _lcd
  1941   00F678  6E66               	movwf	lcd_send_custom_char@lcd^0,c
  1942   00F67A  0E03               	movlw	3
  1943   00F67C  6E67               	movwf	lcd_send_custom_char@row^0,c
  1944   00F67E  0E0B               	movlw	11
  1945   00F680  6E68               	movwf	lcd_send_custom_char@column^0,c
  1946   00F682  0EC0               	movlw	low _customChar6
  1947   00F684  6E69               	movwf	lcd_send_custom_char@_chr^0,c
  1948   00F686  0E05               	movlw	5
  1949   00F688  6E6A               	movwf	lcd_send_custom_char@mem_pos^0,c
  1950   00F68A  ECE6  F079         	call	_lcd_send_custom_char	;wreg free
  1951   00F68E  6E75               	movwf	_ret^0,c
  1952                           
  1953                           ;app.c: 177:     ret=lcd_send_string_pos(&lcd,4,3,"press on to start");
  1954   00F690  0E31               	movlw	low _lcd
  1955   00F692  6E5F               	movwf	lcd_send_string_pos@lcd^0,c
  1956   00F694  0E04               	movlw	4
  1957   00F696  6E60               	movwf	lcd_send_string_pos@row^0,c
  1958   00F698  0E03               	movlw	3
  1959   00F69A  6E61               	movwf	lcd_send_string_pos@column^0,c
  1960   00F69C  0ECB               	movlw	low STR_5
  1961   00F69E  6E62               	movwf	lcd_send_string_pos@str^0,c
  1962   00F6A0  0EFF               	movlw	high STR_5
  1963   00F6A2  6E63               	movwf	(lcd_send_string_pos@str+1)^0,c
  1964   00F6A4  EC5F  F079         	call	_lcd_send_string_pos	;wreg free
  1965   00F6A8  6E75               	movwf	_ret^0,c
  1966   00F6AA  0012               	return		;funcret
  1967   00F6AC                     __end_of_print_welcome:
  1968                           	callstack 0
  1969                           
  1970 ;; *************** function _print_select_bage *****************
  1971 ;; Defined at:
  1972 ;;		line 191 in file "app.c"
  1973 ;; Parameters:    Size  Location     Type
  1974 ;;		None
  1975 ;; Auto vars:     Size  Location     Type
  1976 ;;		None
  1977 ;; Return value:  Size  Location     Type
  1978 ;;                  1    wreg      void 
  1979 ;; Registers used:
  1980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1981 ;; Tracked objects:
  1982 ;;		On entry : 0/0
  1983 ;;		On exit  : 0/0
  1984 ;;		Unchanged: 0/0
  1985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1990 ;;Total ram usage:        0 bytes
  1991 ;; Hardware stack levels used: 1
  1992 ;; Hardware stack levels required when called: 5
  1993 ;; This function calls:
  1994 ;;		_lcd_send_string_pos
  1995 ;; This function is called by:
  1996 ;;		_main
  1997 ;; This function uses a non-reentrant model
  1998 ;;
  1999                           
  2000                           	psect	text2
  2001   00F1E4                     __ptext2:
  2002                           	callstack 0
  2003   00F1E4                     _print_select_bage:
  2004                           	callstack 25
  2005   00F1E4                     
  2006                           ;app.c: 192:     ret=lcd_send_string_pos(&lcd,1,1,"select motor       ");
  2007   00F1E4  0E31               	movlw	low _lcd
  2008   00F1E6  6E5F               	movwf	lcd_send_string_pos@lcd^0,c
  2009   00F1E8  0E01               	movlw	1
  2010   00F1EA  6E60               	movwf	lcd_send_string_pos@row^0,c
  2011   00F1EC  0E01               	movlw	1
  2012   00F1EE  6E61               	movwf	lcd_send_string_pos@column^0,c
  2013   00F1F0  0E67               	movlw	low STR_8
  2014   00F1F2  6E62               	movwf	lcd_send_string_pos@str^0,c
  2015   00F1F4  0EFF               	movlw	high STR_8
  2016   00F1F6  6E63               	movwf	(lcd_send_string_pos@str+1)^0,c
  2017   00F1F8  EC5F  F079         	call	_lcd_send_string_pos	;wreg free
  2018   00F1FC  6E75               	movwf	_ret^0,c
  2019                           
  2020                           ;app.c: 193:     ret=lcd_send_string_pos(&lcd,2,1,"1-motor1           ");
  2021   00F1FE  0E31               	movlw	low _lcd
  2022   00F200  6E5F               	movwf	lcd_send_string_pos@lcd^0,c
  2023   00F202  0E02               	movlw	2
  2024   00F204  6E60               	movwf	lcd_send_string_pos@row^0,c
  2025   00F206  0E01               	movlw	1
  2026   00F208  6E61               	movwf	lcd_send_string_pos@column^0,c
  2027   00F20A  0E17               	movlw	low STR_9
  2028   00F20C  6E62               	movwf	lcd_send_string_pos@str^0,c
  2029   00F20E  0EFF               	movlw	high STR_9
  2030   00F210  6E63               	movwf	(lcd_send_string_pos@str+1)^0,c
  2031   00F212  EC5F  F079         	call	_lcd_send_string_pos	;wreg free
  2032   00F216  6E75               	movwf	_ret^0,c
  2033                           
  2034                           ;app.c: 194:     ret=lcd_send_string_pos(&lcd,3,1,"2-motor2           ");
  2035   00F218  0E31               	movlw	low _lcd
  2036   00F21A  6E5F               	movwf	lcd_send_string_pos@lcd^0,c
  2037   00F21C  0E03               	movlw	3
  2038   00F21E  6E60               	movwf	lcd_send_string_pos@row^0,c
  2039   00F220  0E01               	movlw	1
  2040   00F222  6E61               	movwf	lcd_send_string_pos@column^0,c
  2041   00F224  0E2B               	movlw	low STR_10
  2042   00F226  6E62               	movwf	lcd_send_string_pos@str^0,c
  2043   00F228  0EFF               	movlw	high STR_10
  2044   00F22A  6E63               	movwf	(lcd_send_string_pos@str+1)^0,c
  2045   00F22C  EC5F  F079         	call	_lcd_send_string_pos	;wreg free
  2046   00F230  6E75               	movwf	_ret^0,c
  2047                           
  2048                           ;app.c: 195:     ret=lcd_send_string_pos(&lcd,4,1,"                   ");
  2049   00F232  0E31               	movlw	low _lcd
  2050   00F234  6E5F               	movwf	lcd_send_string_pos@lcd^0,c
  2051   00F236  0E04               	movlw	4
  2052   00F238  6E60               	movwf	lcd_send_string_pos@row^0,c
  2053   00F23A  0E01               	movlw	1
  2054   00F23C  6E61               	movwf	lcd_send_string_pos@column^0,c
  2055   00F23E  0EEF               	movlw	low STR_11
  2056   00F240  6E62               	movwf	lcd_send_string_pos@str^0,c
  2057   00F242  0EFE               	movlw	high STR_11
  2058   00F244  6E63               	movwf	(lcd_send_string_pos@str+1)^0,c
  2059   00F246  EC5F  F079         	call	_lcd_send_string_pos	;wreg free
  2060   00F24A  6E75               	movwf	_ret^0,c
  2061   00F24C  0012               	return		;funcret
  2062   00F24E                     __end_of_print_select_bage:
  2063                           	callstack 0
  2064                           
  2065 ;; *************** function _print_motor2_operation *****************
  2066 ;; Defined at:
  2067 ;;		line 205 in file "app.c"
  2068 ;; Parameters:    Size  Location     Type
  2069 ;;		None
  2070 ;; Auto vars:     Size  Location     Type
  2071 ;;		None
  2072 ;; Return value:  Size  Location     Type
  2073 ;;                  1    wreg      void 
  2074 ;; Registers used:
  2075 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2076 ;; Tracked objects:
  2077 ;;		On entry : 0/0
  2078 ;;		On exit  : 0/0
  2079 ;;		Unchanged: 0/0
  2080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2085 ;;Total ram usage:        0 bytes
  2086 ;; Hardware stack levels used: 1
  2087 ;; Hardware stack levels required when called: 5
  2088 ;; This function calls:
  2089 ;;		_lcd_send_string_pos
  2090 ;; This function is called by:
  2091 ;;		_main
  2092 ;; This function uses a non-reentrant model
  2093 ;;
  2094                           
  2095                           	psect	text3
  2096   00F17A                     __ptext3:
  2097                           	callstack 0
  2098   00F17A                     _print_motor2_operation:
  2099                           	callstack 25
  2100   00F17A                     
  2101                           ;app.c: 206:     ret=lcd_send_string_pos(&lcd,1,1,"1-motor2 on CW     ");
  2102   00F17A  0E31               	movlw	low _lcd
  2103   00F17C  6E5F               	movwf	lcd_send_string_pos@lcd^0,c
  2104   00F17E  0E01               	movlw	1
  2105   00F180  6E60               	movwf	lcd_send_string_pos@row^0,c
  2106   00F182  0E01               	movlw	1
  2107   00F184  6E61               	movwf	lcd_send_string_pos@column^0,c
  2108   00F186  0E8F               	movlw	low STR_16
  2109   00F188  6E62               	movwf	lcd_send_string_pos@str^0,c
  2110   00F18A  0EFF               	movlw	high STR_16
  2111   00F18C  6E63               	movwf	(lcd_send_string_pos@str+1)^0,c
  2112   00F18E  EC5F  F079         	call	_lcd_send_string_pos	;wreg free
  2113   00F192  6E75               	movwf	_ret^0,c
  2114                           
  2115                           ;app.c: 207:     ret=lcd_send_string_pos(&lcd,2,1,"2-motor2 on CCW    ");
  2116   00F194  0E31               	movlw	low _lcd
  2117   00F196  6E5F               	movwf	lcd_send_string_pos@lcd^0,c
  2118   00F198  0E02               	movlw	2
  2119   00F19A  6E60               	movwf	lcd_send_string_pos@row^0,c
  2120   00F19C  0E01               	movlw	1
  2121   00F19E  6E61               	movwf	lcd_send_string_pos@column^0,c
  2122   00F1A0  0EB7               	movlw	low STR_17
  2123   00F1A2  6E62               	movwf	lcd_send_string_pos@str^0,c
  2124   00F1A4  0EFF               	movlw	high STR_17
  2125   00F1A6  6E63               	movwf	(lcd_send_string_pos@str+1)^0,c
  2126   00F1A8  EC5F  F079         	call	_lcd_send_string_pos	;wreg free
  2127   00F1AC  6E75               	movwf	_ret^0,c
  2128                           
  2129                           ;app.c: 208:     ret=lcd_send_string_pos(&lcd,3,1,"4-motor2 off       ");
  2130   00F1AE  0E31               	movlw	low _lcd
  2131   00F1B0  6E5F               	movwf	lcd_send_string_pos@lcd^0,c
  2132   00F1B2  0E03               	movlw	3
  2133   00F1B4  6E60               	movwf	lcd_send_string_pos@row^0,c
  2134   00F1B6  0E01               	movlw	1
  2135   00F1B8  6E61               	movwf	lcd_send_string_pos@column^0,c
  2136   00F1BA  0E53               	movlw	low STR_18
  2137   00F1BC  6E62               	movwf	lcd_send_string_pos@str^0,c
  2138   00F1BE  0EFF               	movlw	high STR_18
  2139   00F1C0  6E63               	movwf	(lcd_send_string_pos@str+1)^0,c
  2140   00F1C2  EC5F  F079         	call	_lcd_send_string_pos	;wreg free
  2141   00F1C6  6E75               	movwf	_ret^0,c
  2142                           
  2143                           ;app.c: 209:     ret=lcd_send_string_pos(&lcd,4,1,"5-back             ");
  2144   00F1C8  0E31               	movlw	low _lcd
  2145   00F1CA  6E5F               	movwf	lcd_send_string_pos@lcd^0,c
  2146   00F1CC  0E04               	movlw	4
  2147   00F1CE  6E60               	movwf	lcd_send_string_pos@row^0,c
  2148   00F1D0  0E01               	movlw	1
  2149   00F1D2  6E61               	movwf	lcd_send_string_pos@column^0,c
  2150   00F1D4  0EDB               	movlw	low STR_19
  2151   00F1D6  6E62               	movwf	lcd_send_string_pos@str^0,c
  2152   00F1D8  0EFE               	movlw	high STR_19
  2153   00F1DA  6E63               	movwf	(lcd_send_string_pos@str+1)^0,c
  2154   00F1DC  EC5F  F079         	call	_lcd_send_string_pos	;wreg free
  2155   00F1E0  6E75               	movwf	_ret^0,c
  2156   00F1E2  0012               	return		;funcret
  2157   00F1E4                     __end_of_print_motor2_operation:
  2158                           	callstack 0
  2159                           
  2160 ;; *************** function _print_motor1_operation *****************
  2161 ;; Defined at:
  2162 ;;		line 198 in file "app.c"
  2163 ;; Parameters:    Size  Location     Type
  2164 ;;		None
  2165 ;; Auto vars:     Size  Location     Type
  2166 ;;		None
  2167 ;; Return value:  Size  Location     Type
  2168 ;;                  1    wreg      void 
  2169 ;; Registers used:
  2170 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2171 ;; Tracked objects:
  2172 ;;		On entry : 0/0
  2173 ;;		On exit  : 0/0
  2174 ;;		Unchanged: 0/0
  2175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2179 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2180 ;;Total ram usage:        0 bytes
  2181 ;; Hardware stack levels used: 1
  2182 ;; Hardware stack levels required when called: 5
  2183 ;; This function calls:
  2184 ;;		_lcd_send_string_pos
  2185 ;; This function is called by:
  2186 ;;		_main
  2187 ;; This function uses a non-reentrant model
  2188 ;;
  2189                           
  2190                           	psect	text4
  2191   00F110                     __ptext4:
  2192                           	callstack 0
  2193   00F110                     _print_motor1_operation:
  2194                           	callstack 25
  2195   00F110                     
  2196                           ;app.c: 199:     ret=lcd_send_string_pos(&lcd,1,1,"1-motor1 on CW     ");
  2197   00F110  0E31               	movlw	low _lcd
  2198   00F112  6E5F               	movwf	lcd_send_string_pos@lcd^0,c
  2199   00F114  0E01               	movlw	1
  2200   00F116  6E60               	movwf	lcd_send_string_pos@row^0,c
  2201   00F118  0E01               	movlw	1
  2202   00F11A  6E61               	movwf	lcd_send_string_pos@column^0,c
  2203   00F11C  0E7B               	movlw	low STR_12
  2204   00F11E  6E62               	movwf	lcd_send_string_pos@str^0,c
  2205   00F120  0EFF               	movlw	high STR_12
  2206   00F122  6E63               	movwf	(lcd_send_string_pos@str+1)^0,c
  2207   00F124  EC5F  F079         	call	_lcd_send_string_pos	;wreg free
  2208   00F128  6E75               	movwf	_ret^0,c
  2209                           
  2210                           ;app.c: 200:     ret=lcd_send_string_pos(&lcd,2,1,"2-motor1 on CCW    ");
  2211   00F12A  0E31               	movlw	low _lcd
  2212   00F12C  6E5F               	movwf	lcd_send_string_pos@lcd^0,c
  2213   00F12E  0E02               	movlw	2
  2214   00F130  6E60               	movwf	lcd_send_string_pos@row^0,c
  2215   00F132  0E01               	movlw	1
  2216   00F134  6E61               	movwf	lcd_send_string_pos@column^0,c
  2217   00F136  0EA3               	movlw	low STR_13
  2218   00F138  6E62               	movwf	lcd_send_string_pos@str^0,c
  2219   00F13A  0EFF               	movlw	high STR_13
  2220   00F13C  6E63               	movwf	(lcd_send_string_pos@str+1)^0,c
  2221   00F13E  EC5F  F079         	call	_lcd_send_string_pos	;wreg free
  2222   00F142  6E75               	movwf	_ret^0,c
  2223                           
  2224                           ;app.c: 201:     ret=lcd_send_string_pos(&lcd,3,1,"4-motor1 off       ");
  2225   00F144  0E31               	movlw	low _lcd
  2226   00F146  6E5F               	movwf	lcd_send_string_pos@lcd^0,c
  2227   00F148  0E03               	movlw	3
  2228   00F14A  6E60               	movwf	lcd_send_string_pos@row^0,c
  2229   00F14C  0E01               	movlw	1
  2230   00F14E  6E61               	movwf	lcd_send_string_pos@column^0,c
  2231   00F150  0E3F               	movlw	low STR_14
  2232   00F152  6E62               	movwf	lcd_send_string_pos@str^0,c
  2233   00F154  0EFF               	movlw	high STR_14
  2234   00F156  6E63               	movwf	(lcd_send_string_pos@str+1)^0,c
  2235   00F158  EC5F  F079         	call	_lcd_send_string_pos	;wreg free
  2236   00F15C  6E75               	movwf	_ret^0,c
  2237                           
  2238                           ;app.c: 202:     ret=lcd_send_string_pos(&lcd,4,1,"5-back             ");
  2239   00F15E  0E31               	movlw	low _lcd
  2240   00F160  6E5F               	movwf	lcd_send_string_pos@lcd^0,c
  2241   00F162  0E04               	movlw	4
  2242   00F164  6E60               	movwf	lcd_send_string_pos@row^0,c
  2243   00F166  0E01               	movlw	1
  2244   00F168  6E61               	movwf	lcd_send_string_pos@column^0,c
  2245   00F16A  0E03               	movlw	low STR_15
  2246   00F16C  6E62               	movwf	lcd_send_string_pos@str^0,c
  2247   00F16E  0EFF               	movlw	high STR_15
  2248   00F170  6E63               	movwf	(lcd_send_string_pos@str+1)^0,c
  2249   00F172  EC5F  F079         	call	_lcd_send_string_pos	;wreg free
  2250   00F176  6E75               	movwf	_ret^0,c
  2251   00F178  0012               	return		;funcret
  2252   00F17A                     __end_of_print_motor1_operation:
  2253                           	callstack 0
  2254                           
  2255 ;; *************** function _print_invalid *****************
  2256 ;; Defined at:
  2257 ;;		line 180 in file "app.c"
  2258 ;; Parameters:    Size  Location     Type
  2259 ;;		None
  2260 ;; Auto vars:     Size  Location     Type
  2261 ;;		None
  2262 ;; Return value:  Size  Location     Type
  2263 ;;                  1    wreg      void 
  2264 ;; Registers used:
  2265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2266 ;; Tracked objects:
  2267 ;;		On entry : 0/0
  2268 ;;		On exit  : 0/0
  2269 ;;		Unchanged: 0/0
  2270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2274 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2275 ;;Total ram usage:        0 bytes
  2276 ;; Hardware stack levels used: 1
  2277 ;; Hardware stack levels required when called: 6
  2278 ;; This function calls:
  2279 ;;		_lcd_send_custom_char
  2280 ;;		_lcd_send_string_pos
  2281 ;; This function is called by:
  2282 ;;		_main
  2283 ;; This function uses a non-reentrant model
  2284 ;;
  2285                           
  2286                           	psect	text5
  2287   00F508                     __ptext5:
  2288                           	callstack 0
  2289   00F508                     _print_invalid:
  2290                           	callstack 24
  2291   00F508                     
  2292                           ;app.c: 181:     ret=lcd_send_string_pos(&lcd,1,7,"invalid");
  2293   00F508  0E31               	movlw	low _lcd
  2294   00F50A  6E5F               	movwf	lcd_send_string_pos@lcd^0,c
  2295   00F50C  0E01               	movlw	1
  2296   00F50E  6E60               	movwf	lcd_send_string_pos@row^0,c
  2297   00F510  0E07               	movlw	7
  2298   00F512  6E61               	movwf	lcd_send_string_pos@column^0,c
  2299   00F514  0EEC               	movlw	low STR_6
  2300   00F516  6E62               	movwf	lcd_send_string_pos@str^0,c
  2301   00F518  0EFF               	movlw	high STR_6
  2302   00F51A  6E63               	movwf	(lcd_send_string_pos@str+1)^0,c
  2303   00F51C  EC5F  F079         	call	_lcd_send_string_pos	;wreg free
  2304   00F520  6E75               	movwf	_ret^0,c
  2305   00F522                     
  2306                           ;app.c: 182:     ret=lcd_send_custom_char(&lcd,2,9,customChar7,0);
  2307   00F522  0E31               	movlw	low _lcd
  2308   00F524  6E66               	movwf	lcd_send_custom_char@lcd^0,c
  2309   00F526  0E02               	movlw	2
  2310   00F528  6E67               	movwf	lcd_send_custom_char@row^0,c
  2311   00F52A  0E09               	movlw	9
  2312   00F52C  6E68               	movwf	lcd_send_custom_char@column^0,c
  2313   00F52E  0EB8               	movlw	low _customChar7
  2314   00F530  6E69               	movwf	lcd_send_custom_char@_chr^0,c
  2315   00F532  0E00               	movlw	0
  2316   00F534  6E6A               	movwf	lcd_send_custom_char@mem_pos^0,c
  2317   00F536  ECE6  F079         	call	_lcd_send_custom_char	;wreg free
  2318   00F53A  6E75               	movwf	_ret^0,c
  2319   00F53C                     
  2320                           ;app.c: 183:     ret=lcd_send_custom_char(&lcd,2,10,customChar8,1);
  2321   00F53C  0E31               	movlw	low _lcd
  2322   00F53E  6E66               	movwf	lcd_send_custom_char@lcd^0,c
  2323   00F540  0E02               	movlw	2
  2324   00F542  6E67               	movwf	lcd_send_custom_char@row^0,c
  2325   00F544  0E0A               	movlw	10
  2326   00F546  6E68               	movwf	lcd_send_custom_char@column^0,c
  2327   00F548  0EB0               	movlw	low _customChar8
  2328   00F54A  6E69               	movwf	lcd_send_custom_char@_chr^0,c
  2329   00F54C  0E01               	movlw	1
  2330   00F54E  6E6A               	movwf	lcd_send_custom_char@mem_pos^0,c
  2331   00F550  ECE6  F079         	call	_lcd_send_custom_char	;wreg free
  2332   00F554  6E75               	movwf	_ret^0,c
  2333   00F556                     
  2334                           ;app.c: 184:     ret=lcd_send_custom_char(&lcd,2,11,customChar9,2);
  2335   00F556  0E31               	movlw	low _lcd
  2336   00F558  6E66               	movwf	lcd_send_custom_char@lcd^0,c
  2337   00F55A  0E02               	movlw	2
  2338   00F55C  6E67               	movwf	lcd_send_custom_char@row^0,c
  2339   00F55E  0E0B               	movlw	11
  2340   00F560  6E68               	movwf	lcd_send_custom_char@column^0,c
  2341   00F562  0EA8               	movlw	low _customChar9
  2342   00F564  6E69               	movwf	lcd_send_custom_char@_chr^0,c
  2343   00F566  0E02               	movlw	2
  2344   00F568  6E6A               	movwf	lcd_send_custom_char@mem_pos^0,c
  2345   00F56A  ECE6  F079         	call	_lcd_send_custom_char	;wreg free
  2346   00F56E  6E75               	movwf	_ret^0,c
  2347   00F570                     
  2348                           ;app.c: 185:     ret=lcd_send_custom_char(&lcd,3,9,customChar10,3);
  2349   00F570  0E31               	movlw	low _lcd
  2350   00F572  6E66               	movwf	lcd_send_custom_char@lcd^0,c
  2351   00F574  0E03               	movlw	3
  2352   00F576  6E67               	movwf	lcd_send_custom_char@row^0,c
  2353   00F578  0E09               	movlw	9
  2354   00F57A  6E68               	movwf	lcd_send_custom_char@column^0,c
  2355   00F57C  0EA0               	movlw	low _customChar10
  2356   00F57E  6E69               	movwf	lcd_send_custom_char@_chr^0,c
  2357   00F580  0E03               	movlw	3
  2358   00F582  6E6A               	movwf	lcd_send_custom_char@mem_pos^0,c
  2359   00F584  ECE6  F079         	call	_lcd_send_custom_char	;wreg free
  2360   00F588  6E75               	movwf	_ret^0,c
  2361   00F58A                     
  2362                           ;app.c: 186:     ret=lcd_send_custom_char(&lcd,3,10,customChar11,4);
  2363   00F58A  0E31               	movlw	low _lcd
  2364   00F58C  6E66               	movwf	lcd_send_custom_char@lcd^0,c
  2365   00F58E  0E03               	movlw	3
  2366   00F590  6E67               	movwf	lcd_send_custom_char@row^0,c
  2367   00F592  0E0A               	movlw	10
  2368   00F594  6E68               	movwf	lcd_send_custom_char@column^0,c
  2369   00F596  0E98               	movlw	low _customChar11
  2370   00F598  6E69               	movwf	lcd_send_custom_char@_chr^0,c
  2371   00F59A  0E04               	movlw	4
  2372   00F59C  6E6A               	movwf	lcd_send_custom_char@mem_pos^0,c
  2373   00F59E  ECE6  F079         	call	_lcd_send_custom_char	;wreg free
  2374   00F5A2  6E75               	movwf	_ret^0,c
  2375   00F5A4                     
  2376                           ;app.c: 187:     ret=lcd_send_custom_char(&lcd,3,11,customChar12,5);
  2377   00F5A4  0E31               	movlw	low _lcd
  2378   00F5A6  6E66               	movwf	lcd_send_custom_char@lcd^0,c
  2379   00F5A8  0E03               	movlw	3
  2380   00F5AA  6E67               	movwf	lcd_send_custom_char@row^0,c
  2381   00F5AC  0E0B               	movlw	11
  2382   00F5AE  6E68               	movwf	lcd_send_custom_char@column^0,c
  2383   00F5B0  0E90               	movlw	low _customChar12
  2384   00F5B2  6E69               	movwf	lcd_send_custom_char@_chr^0,c
  2385   00F5B4  0E05               	movlw	5
  2386   00F5B6  6E6A               	movwf	lcd_send_custom_char@mem_pos^0,c
  2387   00F5B8  ECE6  F079         	call	_lcd_send_custom_char	;wreg free
  2388   00F5BC  6E75               	movwf	_ret^0,c
  2389                           
  2390                           ;app.c: 188:     ret=lcd_send_string_pos(&lcd,4,3,"enter valid op");
  2391   00F5BE  0E31               	movlw	low _lcd
  2392   00F5C0  6E5F               	movwf	lcd_send_string_pos@lcd^0,c
  2393   00F5C2  0E04               	movlw	4
  2394   00F5C4  6E60               	movwf	lcd_send_string_pos@row^0,c
  2395   00F5C6  0E03               	movlw	3
  2396   00F5C8  6E61               	movwf	lcd_send_string_pos@column^0,c
  2397   00F5CA  0EDD               	movlw	low STR_7
  2398   00F5CC  6E62               	movwf	lcd_send_string_pos@str^0,c
  2399   00F5CE  0EFF               	movlw	high STR_7
  2400   00F5D0  6E63               	movwf	(lcd_send_string_pos@str+1)^0,c
  2401   00F5D2  EC5F  F079         	call	_lcd_send_string_pos	;wreg free
  2402   00F5D6  6E75               	movwf	_ret^0,c
  2403   00F5D8  0012               	return		;funcret
  2404   00F5DA                     __end_of_print_invalid:
  2405                           	callstack 0
  2406                           
  2407 ;; *************** function _lcd_send_string_pos *****************
  2408 ;; Defined at:
  2409 ;;		line 200 in file "ECUAL/LCD/lcd.c"
  2410 ;; Parameters:    Size  Location     Type
  2411 ;;  lcd             1   26[COMRAM] PTR struct .
  2412 ;;		 -> lcd(6), 
  2413 ;;  row             1   27[COMRAM] unsigned char 
  2414 ;;  column          1   28[COMRAM] unsigned char 
  2415 ;;  str             2   29[COMRAM] PTR unsigned char 
  2416 ;;		 -> STR_19(20), STR_18(20), STR_17(20), STR_16(20), 
  2417 ;;		 -> STR_15(20), STR_14(20), STR_13(20), STR_12(20), 
  2418 ;;		 -> STR_11(20), STR_10(20), STR_9(20), STR_8(20), 
  2419 ;;		 -> STR_7(15), STR_6(8), STR_5(18), STR_4(8), 
  2420 ;; Auto vars:     Size  Location     Type
  2421 ;;  ret             1   33[COMRAM] unsigned char 
  2422 ;;  lcd_ret         1   32[COMRAM] unsigned char 
  2423 ;;  gpio_ret        1   31[COMRAM] unsigned char 
  2424 ;; Return value:  Size  Location     Type
  2425 ;;                  1    wreg      unsigned char 
  2426 ;; Registers used:
  2427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2428 ;; Tracked objects:
  2429 ;;		On entry : 0/0
  2430 ;;		On exit  : 0/0
  2431 ;;		Unchanged: 0/0
  2432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2433 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2434 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2436 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2437 ;;Total ram usage:        8 bytes
  2438 ;; Hardware stack levels used: 1
  2439 ;; Hardware stack levels required when called: 4
  2440 ;; This function calls:
  2441 ;;		_lcd_send_string
  2442 ;;		_lcd_set_curser
  2443 ;; This function is called by:
  2444 ;;		_print_welcome
  2445 ;;		_print_invalid
  2446 ;;		_print_select_bage
  2447 ;;		_print_motor1_operation
  2448 ;;		_print_motor2_operation
  2449 ;; This function uses a non-reentrant model
  2450 ;;
  2451                           
  2452                           	psect	text6
  2453   00F2BE                     __ptext6:
  2454                           	callstack 0
  2455   00F2BE                     _lcd_send_string_pos:
  2456                           	callstack 25
  2457   00F2BE                     
  2458                           ;ECUAL/LCD/lcd.c: 203:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  2459   00F2BE  0E00               	movlw	0
  2460   00F2C0  6E64               	movwf	lcd_send_string_pos@gpio_ret^0,c
  2461                           
  2462                           ;ECUAL/LCD/lcd.c: 204:     Std_ReturnType lcd_ret=(Std_ReturnType)0x00;
  2463   00F2C2  0E00               	movlw	0
  2464   00F2C4  6E65               	movwf	lcd_send_string_pos@lcd_ret^0,c
  2465                           
  2466                           ;ECUAL/LCD/lcd.c: 205:     if(((void*)0)==lcd || ((void*)0)==str || row>4 || column>40){
  2467   00F2C6  505F               	movf	lcd_send_string_pos@lcd^0,w,c
  2468   00F2C8  B4D8               	btfsc	status,2,c
  2469   00F2CA  EF69  F079         	goto	u2831
  2470   00F2CE  EF6B  F079         	goto	u2830
  2471   00F2D2                     u2831:
  2472   00F2D2  EF84  F079         	goto	l3577
  2473   00F2D6                     u2830:
  2474   00F2D6  5062               	movf	lcd_send_string_pos@str^0,w,c
  2475   00F2D8  1063               	iorwf	(lcd_send_string_pos@str+1)^0,w,c
  2476   00F2DA  B4D8               	btfsc	status,2,c
  2477   00F2DC  EF72  F079         	goto	u2841
  2478   00F2E0  EF74  F079         	goto	u2840
  2479   00F2E4                     u2841:
  2480   00F2E4  EF84  F079         	goto	l3577
  2481   00F2E8                     u2840:
  2482   00F2E8  0E05               	movlw	5
  2483   00F2EA  6060               	cpfslt	lcd_send_string_pos@row^0,c
  2484   00F2EC  EF7A  F079         	goto	u2851
  2485   00F2F0  EF7C  F079         	goto	u2850
  2486   00F2F4                     u2851:
  2487   00F2F4  EF84  F079         	goto	l3577
  2488   00F2F8                     u2850:
  2489   00F2F8  0E28               	movlw	40
  2490   00F2FA  6461               	cpfsgt	lcd_send_string_pos@column^0,c
  2491   00F2FC  EF82  F079         	goto	u2861
  2492   00F300  EF84  F079         	goto	u2860
  2493   00F304                     u2861:
  2494   00F304  EF88  F079         	goto	l3579
  2495   00F308                     u2860:
  2496   00F308                     l3577:
  2497                           
  2498                           ;ECUAL/LCD/lcd.c: 206:         ret=(Std_ReturnType)0x00;
  2499   00F308  0E00               	movlw	0
  2500   00F30A  6E66               	movwf	lcd_send_string_pos@ret^0,c
  2501                           
  2502                           ;ECUAL/LCD/lcd.c: 207:     }
  2503   00F30C  EF9A  F079         	goto	l3585
  2504   00F310                     l3579:
  2505   00F310  C05F  F058         	movff	lcd_send_string_pos@lcd,lcd_set_curser@lcd
  2506   00F314  C060  F059         	movff	lcd_send_string_pos@row,lcd_set_curser@row
  2507   00F318  C061  F05A         	movff	lcd_send_string_pos@column,lcd_set_curser@column
  2508   00F31C  EC9C  F079         	call	_lcd_set_curser	;wreg free
  2509   00F320  C05F  F058         	movff	lcd_send_string_pos@lcd,lcd_send_string@lcd
  2510   00F324  C062  F059         	movff	lcd_send_string_pos@str,lcd_send_string@str
  2511   00F328  C063  F05A         	movff	lcd_send_string_pos@str+1,lcd_send_string@str+1
  2512   00F32C  EC27  F079         	call	_lcd_send_string	;wreg free
  2513   00F330                     
  2514                           ;ECUAL/LCD/lcd.c: 211:         ret=(Std_ReturnType)0x01;
  2515   00F330  0E01               	movlw	1
  2516   00F332  6E66               	movwf	lcd_send_string_pos@ret^0,c
  2517   00F334                     l3585:
  2518                           
  2519                           ;ECUAL/LCD/lcd.c: 214:     return ret;
  2520   00F334  5066               	movf	lcd_send_string_pos@ret^0,w,c
  2521   00F336  0012               	return		;funcret
  2522   00F338                     __end_of_lcd_send_string_pos:
  2523                           	callstack 0
  2524                           
  2525 ;; *************** function _lcd_send_string *****************
  2526 ;; Defined at:
  2527 ;;		line 171 in file "ECUAL/LCD/lcd.c"
  2528 ;; Parameters:    Size  Location     Type
  2529 ;;  lcd             1   19[COMRAM] PTR struct .
  2530 ;;		 -> lcd(6), 
  2531 ;;  str             2   20[COMRAM] PTR unsigned char 
  2532 ;;		 -> STR_19(20), STR_18(20), STR_17(20), STR_16(20), 
  2533 ;;		 -> STR_15(20), STR_14(20), STR_13(20), STR_12(20), 
  2534 ;;		 -> STR_11(20), STR_10(20), STR_9(20), STR_8(20), 
  2535 ;;		 -> STR_7(15), STR_6(8), STR_5(18), STR_4(8), 
  2536 ;; Auto vars:     Size  Location     Type
  2537 ;;  ret             1   24[COMRAM] unsigned char 
  2538 ;;  lcd_ret         1   23[COMRAM] unsigned char 
  2539 ;;  gpio_ret        1   22[COMRAM] unsigned char 
  2540 ;; Return value:  Size  Location     Type
  2541 ;;                  1    wreg      unsigned char 
  2542 ;; Registers used:
  2543 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2544 ;; Tracked objects:
  2545 ;;		On entry : 0/0
  2546 ;;		On exit  : 0/0
  2547 ;;		Unchanged: 0/0
  2548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2549 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2550 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2552 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2553 ;;Total ram usage:        6 bytes
  2554 ;; Hardware stack levels used: 1
  2555 ;; Hardware stack levels required when called: 3
  2556 ;; This function calls:
  2557 ;;		_lcd_send_char_data
  2558 ;; This function is called by:
  2559 ;;		_lcd_send_string_pos
  2560 ;; This function uses a non-reentrant model
  2561 ;;
  2562                           
  2563                           	psect	text7
  2564   00F24E                     __ptext7:
  2565                           	callstack 0
  2566   00F24E                     _lcd_send_string:
  2567                           	callstack 25
  2568   00F24E                     
  2569                           ;ECUAL/LCD/lcd.c: 174:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  2570   00F24E  0E00               	movlw	0
  2571   00F250  6E5B               	movwf	lcd_send_string@gpio_ret^0,c
  2572                           
  2573                           ;ECUAL/LCD/lcd.c: 175:     Std_ReturnType lcd_ret=(Std_ReturnType)0x00;
  2574   00F252  0E00               	movlw	0
  2575   00F254  6E5C               	movwf	lcd_send_string@lcd_ret^0,c
  2576                           
  2577                           ;ECUAL/LCD/lcd.c: 176:     if(((void*)0)==lcd || ((void*)0)==str){
  2578   00F256  5058               	movf	lcd_send_string@lcd^0,w,c
  2579   00F258  B4D8               	btfsc	status,2,c
  2580   00F25A  EF31  F079         	goto	u2741
  2581   00F25E  EF33  F079         	goto	u2740
  2582   00F262                     u2741:
  2583   00F262  EF3C  F079         	goto	l3527
  2584   00F266                     u2740:
  2585   00F266  5059               	movf	lcd_send_string@str^0,w,c
  2586   00F268  105A               	iorwf	(lcd_send_string@str+1)^0,w,c
  2587   00F26A  A4D8               	btfss	status,2,c
  2588   00F26C  EF3A  F079         	goto	u2751
  2589   00F270  EF3C  F079         	goto	u2750
  2590   00F274                     u2751:
  2591   00F274  EF4D  F079         	goto	l3533
  2592   00F278                     u2750:
  2593   00F278                     l3527:
  2594                           
  2595                           ;ECUAL/LCD/lcd.c: 177:         ret=(Std_ReturnType)0x00;
  2596   00F278  0E00               	movlw	0
  2597   00F27A  6E5D               	movwf	lcd_send_string@ret^0,c
  2598                           
  2599                           ;ECUAL/LCD/lcd.c: 178:     }
  2600   00F27C  EF5D  F079         	goto	l110
  2601   00F280                     l3529:
  2602   00F280  C058  F053         	movff	lcd_send_string@lcd,lcd_send_char_data@lcd
  2603   00F284  C059  FFF6         	movff	lcd_send_string@str,tblptrl
  2604   00F288  C05A  FFF7         	movff	lcd_send_string@str+1,tblptrh
  2605   00F28C                     	if	0	;tblptru may be non-zero
  2606   00F28C                     	endif
  2607   00F28C                     	if	0	;tblptru may be non-zero
  2608   00F28C                     	endif
  2609   00F28C  0008               	tblrd		*
  2610   00F28E  CFF5 F054          	movff	tablat,lcd_send_char_data@data
  2611   00F292  ECED  F077         	call	_lcd_send_char_data	;wreg free
  2612   00F296  4A59               	infsnz	lcd_send_string@str^0,f,c
  2613   00F298  2A5A               	incf	(lcd_send_string@str+1)^0,f,c
  2614   00F29A                     l3533:
  2615                           
  2616                           ;ECUAL/LCD/lcd.c: 180:         while(*str){
  2617   00F29A  C059  FFF6         	movff	lcd_send_string@str,tblptrl
  2618   00F29E  C05A  FFF7         	movff	lcd_send_string@str+1,tblptrh
  2619   00F2A2                     	if	0	;tblptru may be non-zero
  2620   00F2A2                     	endif
  2621   00F2A2                     	if	0	;tblptru may be non-zero
  2622   00F2A2                     	endif
  2623   00F2A2  0008               	tblrd		*
  2624   00F2A4  50F5               	movf	tablat,w,c
  2625   00F2A6  0900               	iorlw	0
  2626   00F2A8  A4D8               	btfss	status,2,c
  2627   00F2AA  EF59  F079         	goto	u2761
  2628   00F2AE  EF5B  F079         	goto	u2760
  2629   00F2B2                     u2761:
  2630   00F2B2  EF40  F079         	goto	l3529
  2631   00F2B6                     u2760:
  2632   00F2B6                     
  2633                           ;ECUAL/LCD/lcd.c: 184:         ret=(Std_ReturnType)0x01;
  2634   00F2B6  0E01               	movlw	1
  2635   00F2B8  6E5D               	movwf	lcd_send_string@ret^0,c
  2636   00F2BA                     l110:
  2637                           
  2638                           ;ECUAL/LCD/lcd.c: 187:     return ret;
  2639   00F2BA  505D               	movf	lcd_send_string@ret^0,w,c
  2640   00F2BC  0012               	return		;funcret
  2641   00F2BE                     __end_of_lcd_send_string:
  2642                           	callstack 0
  2643                           
  2644 ;; *************** function _lcd_send_custom_char *****************
  2645 ;; Defined at:
  2646 ;;		line 228 in file "ECUAL/LCD/lcd.c"
  2647 ;; Parameters:    Size  Location     Type
  2648 ;;  lcd             1   33[COMRAM] PTR struct .
  2649 ;;		 -> lcd(6), 
  2650 ;;  row             1   34[COMRAM] unsigned char 
  2651 ;;  column          1   35[COMRAM] unsigned char 
  2652 ;;  _chr            1   36[COMRAM] PTR unsigned char 
  2653 ;;		 -> customChar12(8), customChar11(8), customChar10(8), customChar9(8), 
  2654 ;;		 -> customChar8(8), customChar7(8), customChar6(8), customChar5(8), 
  2655 ;;		 -> customChar4(8), customChar3(8), customChar2(8), customChar1(8), 
  2656 ;;  mem_pos         1   37[COMRAM] unsigned char 
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;  ret             1   40[COMRAM] unsigned char 
  2659 ;;  lcd_ret         1   39[COMRAM] unsigned char 
  2660 ;;  gpio_ret        1   38[COMRAM] unsigned char 
  2661 ;; Return value:  Size  Location     Type
  2662 ;;                  1    wreg      unsigned char 
  2663 ;; Registers used:
  2664 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2665 ;; Tracked objects:
  2666 ;;		On entry : 0/0
  2667 ;;		On exit  : 0/0
  2668 ;;		Unchanged: 0/0
  2669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2670 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2671 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2673 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2674 ;;Total ram usage:        8 bytes
  2675 ;; Hardware stack levels used: 1
  2676 ;; Hardware stack levels required when called: 5
  2677 ;; This function calls:
  2678 ;;		_lcd_send_char_data
  2679 ;;		_lcd_send_char_data_pos
  2680 ;;		_lcd_send_command
  2681 ;; This function is called by:
  2682 ;;		_print_welcome
  2683 ;;		_print_invalid
  2684 ;; This function uses a non-reentrant model
  2685 ;;
  2686                           
  2687                           	psect	text8
  2688   00F3CC                     __ptext8:
  2689                           	callstack 0
  2690   00F3CC                     _lcd_send_custom_char:
  2691                           	callstack 24
  2692   00F3CC                     
  2693                           ;ECUAL/LCD/lcd.c: 233:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  2694   00F3CC  0E00               	movlw	0
  2695   00F3CE  6E6B               	movwf	lcd_send_custom_char@gpio_ret^0,c
  2696                           
  2697                           ;ECUAL/LCD/lcd.c: 234:     Std_ReturnType lcd_ret=(Std_ReturnType)0x00;
  2698   00F3D0  0E00               	movlw	0
  2699   00F3D2  6E6C               	movwf	lcd_send_custom_char@lcd_ret^0,c
  2700                           
  2701                           ;ECUAL/LCD/lcd.c: 235:     if(((void*)0)==lcd || row>4 || column>20){
  2702   00F3D4  5066               	movf	lcd_send_custom_char@lcd^0,w,c
  2703   00F3D6  B4D8               	btfsc	status,2,c
  2704   00F3D8  EFF0  F079         	goto	u2871
  2705   00F3DC  EFF2  F079         	goto	u2870
  2706   00F3E0                     u2871:
  2707   00F3E0  EF02  F07A         	goto	l3595
  2708   00F3E4                     u2870:
  2709   00F3E4  0E05               	movlw	5
  2710   00F3E6  6067               	cpfslt	lcd_send_custom_char@row^0,c
  2711   00F3E8  EFF8  F079         	goto	u2881
  2712   00F3EC  EFFA  F079         	goto	u2880
  2713   00F3F0                     u2881:
  2714   00F3F0  EF02  F07A         	goto	l3595
  2715   00F3F4                     u2880:
  2716   00F3F4  0E14               	movlw	20
  2717   00F3F6  6468               	cpfsgt	lcd_send_custom_char@column^0,c
  2718   00F3F8  EF00  F07A         	goto	u2891
  2719   00F3FC  EF02  F07A         	goto	u2890
  2720   00F400                     u2891:
  2721   00F400  EF06  F07A         	goto	l3597
  2722   00F404                     u2890:
  2723   00F404                     l3595:
  2724                           
  2725                           ;ECUAL/LCD/lcd.c: 236:         ret=(Std_ReturnType)0x00;
  2726   00F404  0E00               	movlw	0
  2727   00F406  6E6D               	movwf	lcd_send_custom_char@ret^0,c
  2728                           
  2729                           ;ECUAL/LCD/lcd.c: 237:     }
  2730   00F408  EF30  F07A         	goto	l3615
  2731   00F40C                     l3597:
  2732   00F40C  C066  F053         	movff	lcd_send_custom_char@lcd,lcd_send_command@lcd
  2733   00F410  506A               	movf	lcd_send_custom_char@mem_pos^0,w,c
  2734   00F412  0D08               	mullw	8
  2735   00F414  50F3               	movf	243,w,c
  2736   00F416  0F40               	addlw	64
  2737   00F418  6E54               	movwf	lcd_send_command@command^0,c
  2738   00F41A  ECBA  F077         	call	_lcd_send_command	;wreg free
  2739   00F41E                     
  2740                           ;ECUAL/LCD/lcd.c: 240:         for(counter=0;counter<8;counter++){
  2741   00F41E  0E00               	movlw	0
  2742   00F420  6E71               	movwf	lcd_send_custom_char@counter^0,c
  2743   00F422                     l3605:
  2744   00F422  C066  F053         	movff	lcd_send_custom_char@lcd,lcd_send_char_data@lcd
  2745   00F426  5069               	movf	lcd_send_custom_char@_chr^0,w,c
  2746   00F428  2471               	addwf	lcd_send_custom_char@counter^0,w,c
  2747   00F42A  6ED9               	movwf	fsr2l,c
  2748   00F42C  6ADA               	clrf	fsr2h,c
  2749   00F42E  50DF               	movf	indf2,w,c
  2750   00F430  6E54               	movwf	lcd_send_char_data@data^0,c
  2751   00F432  ECED  F077         	call	_lcd_send_char_data	;wreg free
  2752   00F436                     
  2753                           ;ECUAL/LCD/lcd.c: 242:         }
  2754   00F436  2A71               	incf	lcd_send_custom_char@counter^0,f,c
  2755   00F438  0E07               	movlw	7
  2756   00F43A  6471               	cpfsgt	lcd_send_custom_char@counter^0,c
  2757   00F43C  EF22  F07A         	goto	u2901
  2758   00F440  EF24  F07A         	goto	u2900
  2759   00F444                     u2901:
  2760   00F444  EF11  F07A         	goto	l3605
  2761   00F448                     u2900:
  2762   00F448  C066  F05F         	movff	lcd_send_custom_char@lcd,lcd_send_char_data_pos@lcd
  2763   00F44C  C067  F060         	movff	lcd_send_custom_char@row,lcd_send_char_data_pos@row
  2764   00F450  C068  F061         	movff	lcd_send_custom_char@column,lcd_send_char_data_pos@column
  2765   00F454  C06A  F062         	movff	lcd_send_custom_char@mem_pos,lcd_send_char_data_pos@data
  2766   00F458  EC20  F078         	call	_lcd_send_char_data_pos	;wreg free
  2767   00F45C                     
  2768                           ;ECUAL/LCD/lcd.c: 245:         ret=(Std_ReturnType)0x01;
  2769   00F45C  0E01               	movlw	1
  2770   00F45E  6E6D               	movwf	lcd_send_custom_char@ret^0,c
  2771   00F460                     l3615:
  2772                           
  2773                           ;ECUAL/LCD/lcd.c: 249:     return ret;
  2774   00F460  506D               	movf	lcd_send_custom_char@ret^0,w,c
  2775   00F462  0012               	return		;funcret
  2776   00F464                     __end_of_lcd_send_custom_char:
  2777                           	callstack 0
  2778                           
  2779 ;; *************** function _lcd_send_char_data_pos *****************
  2780 ;; Defined at:
  2781 ;;		line 145 in file "ECUAL/LCD/lcd.c"
  2782 ;; Parameters:    Size  Location     Type
  2783 ;;  lcd             1   26[COMRAM] PTR struct .
  2784 ;;		 -> lcd(6), 
  2785 ;;  row             1   27[COMRAM] unsigned char 
  2786 ;;  column          1   28[COMRAM] unsigned char 
  2787 ;;  data            1   29[COMRAM] unsigned char 
  2788 ;; Auto vars:     Size  Location     Type
  2789 ;;  ret             1   32[COMRAM] unsigned char 
  2790 ;;  lcd_ret         1   31[COMRAM] unsigned char 
  2791 ;;  gpio_ret        1   30[COMRAM] unsigned char 
  2792 ;; Return value:  Size  Location     Type
  2793 ;;                  1    wreg      unsigned char 
  2794 ;; Registers used:
  2795 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2796 ;; Tracked objects:
  2797 ;;		On entry : 0/0
  2798 ;;		On exit  : 0/0
  2799 ;;		Unchanged: 0/0
  2800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2801 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2802 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2804 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2805 ;;Total ram usage:        7 bytes
  2806 ;; Hardware stack levels used: 1
  2807 ;; Hardware stack levels required when called: 4
  2808 ;; This function calls:
  2809 ;;		_lcd_send_char_data
  2810 ;;		_lcd_set_curser
  2811 ;; This function is called by:
  2812 ;;		_lcd_send_custom_char
  2813 ;; This function uses a non-reentrant model
  2814 ;;
  2815                           
  2816                           	psect	text9
  2817   00F040                     __ptext9:
  2818                           	callstack 0
  2819   00F040                     _lcd_send_char_data_pos:
  2820                           	callstack 24
  2821   00F040                     
  2822                           ;ECUAL/LCD/lcd.c: 148:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  2823   00F040  0E00               	movlw	0
  2824   00F042  6E63               	movwf	lcd_send_char_data_pos@gpio_ret^0,c
  2825                           
  2826                           ;ECUAL/LCD/lcd.c: 149:     Std_ReturnType lcd_ret=(Std_ReturnType)0x00;
  2827   00F044  0E00               	movlw	0
  2828   00F046  6E64               	movwf	lcd_send_char_data_pos@lcd_ret^0,c
  2829                           
  2830                           ;ECUAL/LCD/lcd.c: 150:     if(((void*)0)==lcd || row>4 || column>20){
  2831   00F048  505F               	movf	lcd_send_char_data_pos@lcd^0,w,c
  2832   00F04A  B4D8               	btfsc	status,2,c
  2833   00F04C  EF2A  F078         	goto	u2711
  2834   00F050  EF2C  F078         	goto	u2710
  2835   00F054                     u2711:
  2836   00F054  EF3C  F078         	goto	l3513
  2837   00F058                     u2710:
  2838   00F058  0E05               	movlw	5
  2839   00F05A  6060               	cpfslt	lcd_send_char_data_pos@row^0,c
  2840   00F05C  EF32  F078         	goto	u2721
  2841   00F060  EF34  F078         	goto	u2720
  2842   00F064                     u2721:
  2843   00F064  EF3C  F078         	goto	l3513
  2844   00F068                     u2720:
  2845   00F068  0E14               	movlw	20
  2846   00F06A  6461               	cpfsgt	lcd_send_char_data_pos@column^0,c
  2847   00F06C  EF3A  F078         	goto	u2731
  2848   00F070  EF3C  F078         	goto	u2730
  2849   00F074                     u2731:
  2850   00F074  EF40  F078         	goto	l3515
  2851   00F078                     u2730:
  2852   00F078                     l3513:
  2853                           
  2854                           ;ECUAL/LCD/lcd.c: 151:         ret=(Std_ReturnType)0x00;
  2855   00F078  0E00               	movlw	0
  2856   00F07A  6E65               	movwf	lcd_send_char_data_pos@ret^0,c
  2857                           
  2858                           ;ECUAL/LCD/lcd.c: 152:     }
  2859   00F07C  EF52  F078         	goto	l3519
  2860   00F080                     l3515:
  2861                           
  2862                           ;ECUAL/LCD/lcd.c: 154:         lcd_ret=lcd_set_curser(lcd, row, column);
  2863   00F080  C05F  F058         	movff	lcd_send_char_data_pos@lcd,lcd_set_curser@lcd
  2864   00F084  C060  F059         	movff	lcd_send_char_data_pos@row,lcd_set_curser@row
  2865   00F088  C061  F05A         	movff	lcd_send_char_data_pos@column,lcd_set_curser@column
  2866   00F08C  EC9C  F079         	call	_lcd_set_curser	;wreg free
  2867   00F090  6E64               	movwf	lcd_send_char_data_pos@lcd_ret^0,c
  2868                           
  2869                           ;ECUAL/LCD/lcd.c: 155:         lcd_ret=lcd_send_char_data(lcd, data);
  2870   00F092  C05F  F053         	movff	lcd_send_char_data_pos@lcd,lcd_send_char_data@lcd
  2871   00F096  C062  F054         	movff	lcd_send_char_data_pos@data,lcd_send_char_data@data
  2872   00F09A  ECED  F077         	call	_lcd_send_char_data	;wreg free
  2873   00F09E  6E64               	movwf	lcd_send_char_data_pos@lcd_ret^0,c
  2874   00F0A0                     
  2875                           ;ECUAL/LCD/lcd.c: 156:         ret=(Std_ReturnType)0x01;
  2876   00F0A0  0E01               	movlw	1
  2877   00F0A2  6E65               	movwf	lcd_send_char_data_pos@ret^0,c
  2878   00F0A4                     l3519:
  2879                           
  2880                           ;ECUAL/LCD/lcd.c: 159:     return ret;
  2881   00F0A4  5065               	movf	lcd_send_char_data_pos@ret^0,w,c
  2882   00F0A6  0012               	return		;funcret
  2883   00F0A8                     __end_of_lcd_send_char_data_pos:
  2884                           	callstack 0
  2885                           
  2886 ;; *************** function _lcd_set_curser *****************
  2887 ;; Defined at:
  2888 ;;		line 352 in file "ECUAL/LCD/lcd.c"
  2889 ;; Parameters:    Size  Location     Type
  2890 ;;  lcd             1   19[COMRAM] PTR struct .
  2891 ;;		 -> lcd(6), 
  2892 ;;  row             1   20[COMRAM] unsigned char 
  2893 ;;  column          1   21[COMRAM] unsigned char 
  2894 ;; Auto vars:     Size  Location     Type
  2895 ;;  lcd_ret         1   25[COMRAM] unsigned char 
  2896 ;;  ret             1    0        unsigned char 
  2897 ;;  gpio_ret        1   24[COMRAM] unsigned char 
  2898 ;; Return value:  Size  Location     Type
  2899 ;;                  1    wreg      unsigned char 
  2900 ;; Registers used:
  2901 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2902 ;; Tracked objects:
  2903 ;;		On entry : 0/0
  2904 ;;		On exit  : 0/0
  2905 ;;		Unchanged: 0/0
  2906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2907 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2908 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2909 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2910 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2911 ;;Total ram usage:        7 bytes
  2912 ;; Hardware stack levels used: 1
  2913 ;; Hardware stack levels required when called: 3
  2914 ;; This function calls:
  2915 ;;		_lcd_send_command
  2916 ;; This function is called by:
  2917 ;;		_lcd_send_char_data_pos
  2918 ;;		_lcd_send_string_pos
  2919 ;; This function uses a non-reentrant model
  2920 ;;
  2921                           
  2922                           	psect	text10
  2923   00F338                     __ptext10:
  2924                           	callstack 0
  2925   00F338                     _lcd_set_curser:
  2926                           	callstack 25
  2927   00F338                     
  2928                           ;ECUAL/LCD/lcd.c: 355:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  2929   00F338  0E00               	movlw	0
  2930   00F33A  6E5D               	movwf	lcd_set_curser@gpio_ret^0,c
  2931                           
  2932                           ;ECUAL/LCD/lcd.c: 356:     Std_ReturnType lcd_ret=(Std_ReturnType)0x00;
  2933   00F33C  0E00               	movlw	0
  2934   00F33E  6E5E               	movwf	lcd_set_curser@lcd_ret^0,c
  2935   00F340                     
  2936                           ;ECUAL/LCD/lcd.c: 357:     column--;
  2937   00F340  065A               	decf	lcd_set_curser@column^0,f,c
  2938                           
  2939                           ;ECUAL/LCD/lcd.c: 365:     switch(row){
  2940   00F342  EFC7  F079         	goto	l3409
  2941   00F346                     l3399:
  2942   00F346  C058  F053         	movff	lcd_set_curser@lcd,lcd_send_command@lcd
  2943   00F34A  505A               	movf	lcd_set_curser@column^0,w,c
  2944   00F34C  0F80               	addlw	128
  2945   00F34E  6E54               	movwf	lcd_send_command@command^0,c
  2946   00F350  ECBA  F077         	call	_lcd_send_command	;wreg free
  2947   00F354  EFE4  F079         	goto	l3411
  2948   00F358                     l3401:
  2949   00F358  C058  F053         	movff	lcd_set_curser@lcd,lcd_send_command@lcd
  2950   00F35C  505A               	movf	lcd_set_curser@column^0,w,c
  2951   00F35E  0FC0               	addlw	192
  2952   00F360  6E54               	movwf	lcd_send_command@command^0,c
  2953   00F362  ECBA  F077         	call	_lcd_send_command	;wreg free
  2954   00F366  EFE4  F079         	goto	l3411
  2955   00F36A                     l3403:
  2956   00F36A  C058  F053         	movff	lcd_set_curser@lcd,lcd_send_command@lcd
  2957   00F36E  505A               	movf	lcd_set_curser@column^0,w,c
  2958   00F370  0F94               	addlw	148
  2959   00F372  6E54               	movwf	lcd_send_command@command^0,c
  2960   00F374  ECBA  F077         	call	_lcd_send_command	;wreg free
  2961   00F378  EFE4  F079         	goto	l3411
  2962   00F37C                     l3405:
  2963   00F37C  C058  F053         	movff	lcd_set_curser@lcd,lcd_send_command@lcd
  2964   00F380  505A               	movf	lcd_set_curser@column^0,w,c
  2965   00F382  0FD4               	addlw	212
  2966   00F384  6E54               	movwf	lcd_send_command@command^0,c
  2967   00F386  ECBA  F077         	call	_lcd_send_command	;wreg free
  2968   00F38A  EFE4  F079         	goto	l3411
  2969   00F38E                     l3409:
  2970   00F38E  5059               	movf	lcd_set_curser@row^0,w,c
  2971   00F390  6E5B               	movwf	??_lcd_set_curser^0,c
  2972   00F392  6A5C               	clrf	(??_lcd_set_curser+1)^0,c
  2973                           
  2974                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2975                           ; Switch size 1, requested type "simple"
  2976                           ; Number of cases is 1, Range of values is 0 to 0
  2977                           ; switch strategies available:
  2978                           ; Name         Instructions Cycles
  2979                           ; simple_byte            4     3 (average)
  2980                           ;	Chosen strategy is simple_byte
  2981   00F394  505C               	movf	(??_lcd_set_curser+1)^0,w,c
  2982   00F396  0A00               	xorlw	0	; case 0
  2983   00F398  B4D8               	btfsc	status,2,c
  2984   00F39A  EFD1  F079         	goto	l3985
  2985   00F39E  EFE4  F079         	goto	l3411
  2986   00F3A2                     l3985:
  2987                           
  2988                           ; Switch size 1, requested type "simple"
  2989                           ; Number of cases is 4, Range of values is 1 to 4
  2990                           ; switch strategies available:
  2991                           ; Name         Instructions Cycles
  2992                           ; simple_byte           13     7 (average)
  2993                           ;	Chosen strategy is simple_byte
  2994   00F3A2  505B               	movf	??_lcd_set_curser^0,w,c
  2995   00F3A4  0A01               	xorlw	1	; case 1
  2996   00F3A6  B4D8               	btfsc	status,2,c
  2997   00F3A8  EFA3  F079         	goto	l3399
  2998   00F3AC  0A03               	xorlw	3	; case 2
  2999   00F3AE  B4D8               	btfsc	status,2,c
  3000   00F3B0  EFAC  F079         	goto	l3401
  3001   00F3B4  0A01               	xorlw	1	; case 3
  3002   00F3B6  B4D8               	btfsc	status,2,c
  3003   00F3B8  EFB5  F079         	goto	l3403
  3004   00F3BC  0A07               	xorlw	7	; case 4
  3005   00F3BE  B4D8               	btfsc	status,2,c
  3006   00F3C0  EFBE  F079         	goto	l3405
  3007   00F3C4  EFE4  F079         	goto	l3411
  3008   00F3C8                     l3411:
  3009                           
  3010                           ;ECUAL/LCD/lcd.c: 373:     return ret;
  3011   00F3C8  0E00               	movlw	0
  3012   00F3CA  0012               	return		;funcret
  3013   00F3CC                     __end_of_lcd_set_curser:
  3014                           	callstack 0
  3015                           
  3016 ;; *************** function _lcd_send_char_data *****************
  3017 ;; Defined at:
  3018 ;;		line 109 in file "ECUAL/LCD/lcd.c"
  3019 ;; Parameters:    Size  Location     Type
  3020 ;;  lcd             1   14[COMRAM] PTR struct .
  3021 ;;		 -> lcd(6), 
  3022 ;;  data            1   15[COMRAM] unsigned char 
  3023 ;; Auto vars:     Size  Location     Type
  3024 ;;  ret             1   18[COMRAM] unsigned char 
  3025 ;;  lcd_ret         1   17[COMRAM] unsigned char 
  3026 ;;  gpio_ret        1   16[COMRAM] unsigned char 
  3027 ;; Return value:  Size  Location     Type
  3028 ;;                  1    wreg      unsigned char 
  3029 ;; Registers used:
  3030 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3031 ;; Tracked objects:
  3032 ;;		On entry : 0/0
  3033 ;;		On exit  : 0/0
  3034 ;;		Unchanged: 0/0
  3035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3036 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3037 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3039 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3040 ;;Total ram usage:        5 bytes
  3041 ;; Hardware stack levels used: 1
  3042 ;; Hardware stack levels required when called: 2
  3043 ;; This function calls:
  3044 ;;		_gpio_pin_logic_write
  3045 ;;		_lcd_send_enable
  3046 ;;		_lcd_send_nbits
  3047 ;; This function is called by:
  3048 ;;		_lcd_send_char_data_pos
  3049 ;;		_lcd_send_string
  3050 ;;		_lcd_send_custom_char
  3051 ;; This function uses a non-reentrant model
  3052 ;;
  3053                           
  3054                           	psect	text11
  3055   00EFDA                     __ptext11:
  3056                           	callstack 0
  3057   00EFDA                     _lcd_send_char_data:
  3058                           	callstack 25
  3059   00EFDA                     
  3060                           ;ECUAL/LCD/lcd.c: 112:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  3061   00EFDA  0E00               	movlw	0
  3062   00EFDC  6E55               	movwf	lcd_send_char_data@gpio_ret^0,c
  3063                           
  3064                           ;ECUAL/LCD/lcd.c: 113:     Std_ReturnType lcd_ret=(Std_ReturnType)0x00;
  3065   00EFDE  0E00               	movlw	0
  3066   00EFE0  6E56               	movwf	lcd_send_char_data@lcd_ret^0,c
  3067                           
  3068                           ;ECUAL/LCD/lcd.c: 114:     if(((void*)0)==lcd){
  3069   00EFE2  5053               	movf	lcd_send_char_data@lcd^0,w,c
  3070   00EFE4  A4D8               	btfss	status,2,c
  3071   00EFE6  EFF7  F077         	goto	u2641
  3072   00EFEA  EFF9  F077         	goto	u2640
  3073   00EFEE                     u2641:
  3074   00EFEE  EFFD  F077         	goto	l3387
  3075   00EFF2                     u2640:
  3076   00EFF2                     
  3077                           ;ECUAL/LCD/lcd.c: 115:         ret=(Std_ReturnType)0x00;
  3078   00EFF2  0E00               	movlw	0
  3079   00EFF4  6E57               	movwf	lcd_send_char_data@ret^0,c
  3080                           
  3081                           ;ECUAL/LCD/lcd.c: 116:     }
  3082   00EFF6  EF1E  F078         	goto	l3391
  3083   00EFFA                     l3387:
  3084   00EFFA  C053  F045         	movff	lcd_send_char_data@lcd,gpio_pin_logic_write@pin
  3085   00EFFE  0E01               	movlw	1
  3086   00F000  6E46               	movwf	gpio_pin_logic_write@pin_logic^0,c
  3087   00F002  ECD5  F07C         	call	_gpio_pin_logic_write	;wreg free
  3088                           
  3089                           ;ECUAL/LCD/lcd.c: 120:         lcd_ret=lcd_send_nbits(lcd,data>>4);
  3090   00F006  C053  F04D         	movff	lcd_send_char_data@lcd,lcd_send_nbits@lcd
  3091   00F00A  3854               	swapf	lcd_send_char_data@data^0,w,c
  3092   00F00C  0B0F               	andlw	15
  3093   00F00E  6E4E               	movwf	lcd_send_nbits@data_or_command^0,c
  3094   00F010  EC43  F076         	call	_lcd_send_nbits	;wreg free
  3095   00F014  6E56               	movwf	lcd_send_char_data@lcd_ret^0,c
  3096                           
  3097                           ;ECUAL/LCD/lcd.c: 121:         lcd_ret=lcd_send_enable(lcd);
  3098   00F016  C053  F04D         	movff	lcd_send_char_data@lcd,lcd_send_enable@lcd
  3099   00F01A  EC80  F075         	call	_lcd_send_enable	;wreg free
  3100   00F01E  6E56               	movwf	lcd_send_char_data@lcd_ret^0,c
  3101                           
  3102                           ;ECUAL/LCD/lcd.c: 122:         lcd_ret=lcd_send_nbits(lcd,data);
  3103   00F020  C053  F04D         	movff	lcd_send_char_data@lcd,lcd_send_nbits@lcd
  3104   00F024  C054  F04E         	movff	lcd_send_char_data@data,lcd_send_nbits@data_or_command
  3105   00F028  EC43  F076         	call	_lcd_send_nbits	;wreg free
  3106   00F02C  6E56               	movwf	lcd_send_char_data@lcd_ret^0,c
  3107                           
  3108                           ;ECUAL/LCD/lcd.c: 123:         lcd_ret=lcd_send_enable(lcd);
  3109   00F02E  C053  F04D         	movff	lcd_send_char_data@lcd,lcd_send_enable@lcd
  3110   00F032  EC80  F075         	call	_lcd_send_enable	;wreg free
  3111   00F036  6E56               	movwf	lcd_send_char_data@lcd_ret^0,c
  3112   00F038                     
  3113                           ;ECUAL/LCD/lcd.c: 130:         ret=(Std_ReturnType)0x01;
  3114   00F038  0E01               	movlw	1
  3115   00F03A  6E57               	movwf	lcd_send_char_data@ret^0,c
  3116   00F03C                     l3391:
  3117                           
  3118                           ;ECUAL/LCD/lcd.c: 133:     return ret;
  3119   00F03C  5057               	movf	lcd_send_char_data@ret^0,w,c
  3120   00F03E  0012               	return		;funcret
  3121   00F040                     __end_of_lcd_send_char_data:
  3122                           	callstack 0
  3123                           
  3124 ;; *************** function _led_on *****************
  3125 ;; Defined at:
  3126 ;;		line 41 in file "ECUAL/LED/led.c"
  3127 ;; Parameters:    Size  Location     Type
  3128 ;;  led             1    8[COMRAM] PTR struct .
  3129 ;;		 -> motor2_led2(2), motor2_led1(2), motor1_led2(2), motor1_led1(2), 
  3130 ;; Auto vars:     Size  Location     Type
  3131 ;;  ret             1    0        unsigned char 
  3132 ;;  gpio_ret        1    9[COMRAM] unsigned char 
  3133 ;; Return value:  Size  Location     Type
  3134 ;;                  1    wreg      unsigned char 
  3135 ;; Registers used:
  3136 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3137 ;; Tracked objects:
  3138 ;;		On entry : 0/0
  3139 ;;		On exit  : 0/0
  3140 ;;		Unchanged: 0/0
  3141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3142 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3143 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3145 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3146 ;;Total ram usage:        2 bytes
  3147 ;; Hardware stack levels used: 1
  3148 ;; Hardware stack levels required when called: 1
  3149 ;; This function calls:
  3150 ;;		_gpio_pin_logic_write
  3151 ;; This function is called by:
  3152 ;;		_main
  3153 ;; This function uses a non-reentrant model
  3154 ;;
  3155                           
  3156                           	psect	text12
  3157   00EC3C                     __ptext12:
  3158                           	callstack 0
  3159   00EC3C                     _led_on:
  3160                           	callstack 29
  3161   00EC3C                     
  3162                           ;ECUAL/LED/led.c: 44:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  3163   00EC3C  0E00               	movlw	0
  3164   00EC3E  6E4E               	movwf	led_on@gpio_ret^0,c
  3165                           
  3166                           ;ECUAL/LED/led.c: 45:     if(((void*)0)==led){
  3167   00EC40  504D               	movf	led_on@led^0,w,c
  3168   00EC42  A4D8               	btfss	status,2,c
  3169   00EC44  EF26  F076         	goto	u3001
  3170   00EC48  EF28  F076         	goto	u3000
  3171   00EC4C                     u3001:
  3172   00EC4C  EF2A  F076         	goto	l3735
  3173   00EC50                     u3000:
  3174   00EC50                     
  3175                           ;ECUAL/LED/led.c: 47:     }
  3176   00EC50  EF42  F076         	goto	l183
  3177   00EC54                     l3735:
  3178   00EC54  C04D  F045         	movff	led_on@led,gpio_pin_logic_write@pin
  3179   00EC58  0E01               	movlw	1
  3180   00EC5A  6E46               	movwf	gpio_pin_logic_write@pin_logic^0,c
  3181   00EC5C  ECD5  F07C         	call	_gpio_pin_logic_write	;wreg free
  3182   00EC60                     
  3183                           ;ECUAL/LED/led.c: 50:         led->led_state=led->led_pin.logic;
  3184   00EC60  504D               	movf	led_on@led^0,w,c
  3185   00EC62  6ED9               	movwf	fsr2l,c
  3186   00EC64  6ADA               	clrf	fsr2h,c
  3187   00EC66  0E01               	movlw	1
  3188   00EC68  26D9               	addwf	fsr2l,f,c
  3189   00EC6A  504D               	movf	led_on@led^0,w,c
  3190   00EC6C  6EE1               	movwf	fsr1l,c
  3191   00EC6E  6AE2               	clrf	fsr1h,c
  3192   00EC70  BEE7               	btfsc	indf1,7,c
  3193   00EC72  EF3D  F076         	goto	u3011
  3194   00EC76  EF40  F076         	goto	u3010
  3195   00EC7A                     u3011:
  3196   00EC7A  0E01               	movlw	1
  3197   00EC7C  EF41  F076         	goto	u3016
  3198   00EC80                     u3010:
  3199   00EC80  0E00               	movlw	0
  3200   00EC82                     u3016:
  3201   00EC82  6EDF               	movwf	indf2,c
  3202   00EC84                     l183:
  3203   00EC84  0012               	return		;funcret
  3204   00EC86                     __end_of_led_on:
  3205                           	callstack 0
  3206                           
  3207 ;; *************** function _led_off *****************
  3208 ;; Defined at:
  3209 ;;		line 65 in file "ECUAL/LED/led.c"
  3210 ;; Parameters:    Size  Location     Type
  3211 ;;  led             1    8[COMRAM] PTR struct .
  3212 ;;		 -> motor2_led2(2), motor2_led1(2), motor1_led2(2), motor1_led1(2), 
  3213 ;; Auto vars:     Size  Location     Type
  3214 ;;  ret             1    0        unsigned char 
  3215 ;;  gpio_ret        1    9[COMRAM] unsigned char 
  3216 ;; Return value:  Size  Location     Type
  3217 ;;                  1    wreg      unsigned char 
  3218 ;; Registers used:
  3219 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3220 ;; Tracked objects:
  3221 ;;		On entry : 0/0
  3222 ;;		On exit  : 0/0
  3223 ;;		Unchanged: 0/0
  3224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3225 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3226 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3228 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3229 ;;Total ram usage:        2 bytes
  3230 ;; Hardware stack levels used: 1
  3231 ;; Hardware stack levels required when called: 1
  3232 ;; This function calls:
  3233 ;;		_gpio_pin_logic_write
  3234 ;; This function is called by:
  3235 ;;		_main
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238                           
  3239                           	psect	text13
  3240   00EBF2                     __ptext13:
  3241                           	callstack 0
  3242   00EBF2                     _led_off:
  3243                           	callstack 29
  3244   00EBF2                     
  3245                           ;ECUAL/LED/led.c: 68:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  3246   00EBF2  0E00               	movlw	0
  3247   00EBF4  6E4E               	movwf	led_off@gpio_ret^0,c
  3248                           
  3249                           ;ECUAL/LED/led.c: 69:     if(((void*)0)==led){
  3250   00EBF6  504D               	movf	led_off@led^0,w,c
  3251   00EBF8  A4D8               	btfss	status,2,c
  3252   00EBFA  EF01  F076         	goto	u3021
  3253   00EBFE  EF03  F076         	goto	u3020
  3254   00EC02                     u3021:
  3255   00EC02  EF05  F076         	goto	l3747
  3256   00EC06                     u3020:
  3257   00EC06                     
  3258                           ;ECUAL/LED/led.c: 71:     }
  3259   00EC06  EF1D  F076         	goto	l188
  3260   00EC0A                     l3747:
  3261   00EC0A  C04D  F045         	movff	led_off@led,gpio_pin_logic_write@pin
  3262   00EC0E  0E00               	movlw	0
  3263   00EC10  6E46               	movwf	gpio_pin_logic_write@pin_logic^0,c
  3264   00EC12  ECD5  F07C         	call	_gpio_pin_logic_write	;wreg free
  3265   00EC16                     
  3266                           ;ECUAL/LED/led.c: 74:         led->led_state=led->led_pin.logic;
  3267   00EC16  504D               	movf	led_off@led^0,w,c
  3268   00EC18  6ED9               	movwf	fsr2l,c
  3269   00EC1A  6ADA               	clrf	fsr2h,c
  3270   00EC1C  0E01               	movlw	1
  3271   00EC1E  26D9               	addwf	fsr2l,f,c
  3272   00EC20  504D               	movf	led_off@led^0,w,c
  3273   00EC22  6EE1               	movwf	fsr1l,c
  3274   00EC24  6AE2               	clrf	fsr1h,c
  3275   00EC26  BEE7               	btfsc	indf1,7,c
  3276   00EC28  EF18  F076         	goto	u3031
  3277   00EC2C  EF1B  F076         	goto	u3030
  3278   00EC30                     u3031:
  3279   00EC30  0E01               	movlw	1
  3280   00EC32  EF1C  F076         	goto	u3036
  3281   00EC36                     u3030:
  3282   00EC36  0E00               	movlw	0
  3283   00EC38                     u3036:
  3284   00EC38  6EDF               	movwf	indf2,c
  3285   00EC3A                     l188:
  3286   00EC3A  0012               	return		;funcret
  3287   00EC3C                     __end_of_led_off:
  3288                           	callstack 0
  3289                           
  3290 ;; *************** function _keypad_read *****************
  3291 ;; Defined at:
  3292 ;;		line 55 in file "ECUAL/KEYPAD/keypad.c"
  3293 ;; Parameters:    Size  Location     Type
  3294 ;;  keypad          1    8[COMRAM] PTR struct .
  3295 ;;		 -> keypad(8), 
  3296 ;;  num             1    9[COMRAM] PTR unsigned char 
  3297 ;;		 -> in2(1), in1(1), in0(1), 
  3298 ;; Auto vars:     Size  Location     Type
  3299 ;;  column          1   16[COMRAM] unsigned char 
  3300 ;;  row             1   15[COMRAM] unsigned char 
  3301 ;;  counter         1   14[COMRAM] unsigned char 
  3302 ;;  column_logic    1   13[COMRAM] unsigned char 
  3303 ;;  ret             1   12[COMRAM] unsigned char 
  3304 ;;  gpio_ret        1   11[COMRAM] unsigned char 
  3305 ;; Return value:  Size  Location     Type
  3306 ;;                  1    wreg      unsigned char 
  3307 ;; Registers used:
  3308 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3309 ;; Tracked objects:
  3310 ;;		On entry : 0/0
  3311 ;;		On exit  : 0/0
  3312 ;;		Unchanged: 0/0
  3313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3314 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3315 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3316 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3317 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3318 ;;Total ram usage:        9 bytes
  3319 ;; Hardware stack levels used: 1
  3320 ;; Hardware stack levels required when called: 1
  3321 ;; This function calls:
  3322 ;;		_gpio_pin_logic_read
  3323 ;;		_gpio_pin_logic_write
  3324 ;; This function is called by:
  3325 ;;		_main
  3326 ;; This function uses a non-reentrant model
  3327 ;;
  3328                           
  3329                           	psect	text14
  3330   00F6AC                     __ptext14:
  3331                           	callstack 0
  3332   00F6AC                     _keypad_read:
  3333                           	callstack 29
  3334   00F6AC                     
  3335                           ;ECUAL/KEYPAD/keypad.c: 59:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  3336   00F6AC  0E00               	movlw	0
  3337   00F6AE  6E50               	movwf	keypad_read@gpio_ret^0,c
  3338                           
  3339                           ;ECUAL/KEYPAD/keypad.c: 60:     if(((void*)0)==keypad || ((void*)0)==num){
  3340   00F6B0  504D               	movf	keypad_read@keypad^0,w,c
  3341   00F6B2  B4D8               	btfsc	status,2,c
  3342   00F6B4  EF5E  F07B         	goto	u2941
  3343   00F6B8  EF60  F07B         	goto	u2940
  3344   00F6BC                     u2941:
  3345   00F6BC  EF68  F07B         	goto	l3683
  3346   00F6C0                     u2940:
  3347   00F6C0  504E               	movf	keypad_read@num^0,w,c
  3348   00F6C2  A4D8               	btfss	status,2,c
  3349   00F6C4  EF66  F07B         	goto	u2951
  3350   00F6C8  EF68  F07B         	goto	u2950
  3351   00F6CC                     u2951:
  3352   00F6CC  EF6C  F07B         	goto	l3685
  3353   00F6D0                     u2950:
  3354   00F6D0                     l3683:
  3355                           
  3356                           ;ECUAL/KEYPAD/keypad.c: 61:         ret=(Std_ReturnType)0x00;
  3357   00F6D0  0E00               	movlw	0
  3358   00F6D2  6E51               	movwf	keypad_read@ret^0,c
  3359                           
  3360                           ;ECUAL/KEYPAD/keypad.c: 62:     }
  3361   00F6D4  EFC1  F07B         	goto	l51
  3362   00F6D8                     l3685:
  3363                           
  3364                           ;ECUAL/KEYPAD/keypad.c: 64:         for(row=0;row<4;row++){
  3365   00F6D8  0E00               	movlw	0
  3366   00F6DA  6E54               	movwf	keypad_read@row^0,c
  3367   00F6DC                     l3691:
  3368                           
  3369                           ;ECUAL/KEYPAD/keypad.c: 65:             for(counter=0;counter<4;counter++){
  3370   00F6DC  0E00               	movlw	0
  3371   00F6DE  6E53               	movwf	keypad_read@counter^0,c
  3372   00F6E0                     l3697:
  3373   00F6E0  504D               	movf	keypad_read@keypad^0,w,c
  3374   00F6E2  2453               	addwf	keypad_read@counter^0,w,c
  3375   00F6E4  6E45               	movwf	gpio_pin_logic_write@pin^0,c
  3376   00F6E6  0E00               	movlw	0
  3377   00F6E8  6E46               	movwf	gpio_pin_logic_write@pin_logic^0,c
  3378   00F6EA  ECD5  F07C         	call	_gpio_pin_logic_write	;wreg free
  3379   00F6EE                     
  3380                           ;ECUAL/KEYPAD/keypad.c: 67:             }
  3381   00F6EE  2A53               	incf	keypad_read@counter^0,f,c
  3382   00F6F0  0E03               	movlw	3
  3383   00F6F2  6453               	cpfsgt	keypad_read@counter^0,c
  3384   00F6F4  EF7E  F07B         	goto	u2961
  3385   00F6F8  EF80  F07B         	goto	u2960
  3386   00F6FC                     u2961:
  3387   00F6FC  EF70  F07B         	goto	l3697
  3388   00F700                     u2960:
  3389   00F700  504D               	movf	keypad_read@keypad^0,w,c
  3390   00F702  2454               	addwf	keypad_read@row^0,w,c
  3391   00F704  6E45               	movwf	gpio_pin_logic_write@pin^0,c
  3392   00F706  0E01               	movlw	1
  3393   00F708  6E46               	movwf	gpio_pin_logic_write@pin_logic^0,c
  3394   00F70A  ECD5  F07C         	call	_gpio_pin_logic_write	;wreg free
  3395   00F70E                     
  3396                           ;ECUAL/KEYPAD/keypad.c: 69:             _delay((unsigned long)((10)*(8000000/4000.0)));
  3397   00F70E  0E1A               	movlw	26
  3398   00F710  6E4F               	movwf	??_keypad_read^0,c
  3399   00F712  0EF8               	movlw	248
  3400   00F714                     u3297:
  3401   00F714  2EE8               	decfsz	wreg,f,c
  3402   00F716  D7FE               	bra	u3297
  3403   00F718  2E4F               	decfsz	??_keypad_read^0,f,c
  3404   00F71A  D7FC               	bra	u3297
  3405   00F71C  D000               	nop2	
  3406   00F71E                     
  3407                           ;ECUAL/KEYPAD/keypad.c: 70:             for(column=0;column<4;column++){
  3408   00F71E  0E00               	movlw	0
  3409   00F720  6E55               	movwf	keypad_read@column^0,c
  3410   00F722                     l3713:
  3411   00F722  504D               	movf	keypad_read@keypad^0,w,c
  3412   00F724  2455               	addwf	keypad_read@column^0,w,c
  3413   00F726  0F04               	addlw	4
  3414   00F728  6E45               	movwf	gpio_pin_logic_read@pin^0,c
  3415   00F72A  0E52               	movlw	low keypad_read@column_logic
  3416   00F72C  6E46               	movwf	gpio_pin_logic_read@pin_logic_read^0,c
  3417   00F72E  EC32  F07A         	call	_gpio_pin_logic_read	;wreg free
  3418   00F732                     
  3419                           ;ECUAL/KEYPAD/keypad.c: 72:                 if(column_logic==HIGH){
  3420   00F732  0452               	decf	keypad_read@column_logic^0,w,c
  3421   00F734  A4D8               	btfss	status,2,c
  3422   00F736  EF9F  F07B         	goto	u2971
  3423   00F73A  EFA1  F07B         	goto	u2970
  3424   00F73E                     u2971:
  3425   00F73E  EFAD  F07B         	goto	l3719
  3426   00F742                     u2970:
  3427   00F742                     
  3428                           ;ECUAL/KEYPAD/keypad.c: 73:                     *num=keypad_btns[row][column];
  3429   00F742  5054               	movf	keypad_read@row^0,w,c
  3430   00F744  0D04               	mullw	4
  3431   00F746  50F3               	movf	243,w,c
  3432   00F748  0F80               	addlw	low _keypad_btns
  3433   00F74A  2455               	addwf	keypad_read@column^0,w,c
  3434   00F74C  6ED9               	movwf	fsr2l,c
  3435   00F74E  6ADA               	clrf	fsr2h,c
  3436   00F750  504E               	movf	keypad_read@num^0,w,c
  3437   00F752  6EE1               	movwf	fsr1l,c
  3438   00F754  6AE2               	clrf	fsr1h,c
  3439   00F756  CFDF FFE7          	movff	indf2,indf1
  3440   00F75A                     l3719:
  3441                           
  3442                           ;ECUAL/KEYPAD/keypad.c: 75:             }
  3443   00F75A  2A55               	incf	keypad_read@column^0,f,c
  3444   00F75C  0E03               	movlw	3
  3445   00F75E  6455               	cpfsgt	keypad_read@column^0,c
  3446   00F760  EFB4  F07B         	goto	u2981
  3447   00F764  EFB6  F07B         	goto	u2980
  3448   00F768                     u2981:
  3449   00F768  EF91  F07B         	goto	l3713
  3450   00F76C                     u2980:
  3451   00F76C                     
  3452                           ;ECUAL/KEYPAD/keypad.c: 76:         }
  3453   00F76C  2A54               	incf	keypad_read@row^0,f,c
  3454   00F76E  0E03               	movlw	3
  3455   00F770  6454               	cpfsgt	keypad_read@row^0,c
  3456   00F772  EFBD  F07B         	goto	u2991
  3457   00F776  EFBF  F07B         	goto	u2990
  3458   00F77A                     u2991:
  3459   00F77A  EF6E  F07B         	goto	l3691
  3460   00F77E                     u2990:
  3461   00F77E                     
  3462                           ;ECUAL/KEYPAD/keypad.c: 78:         ret=(Std_ReturnType)0x01;
  3463   00F77E  0E01               	movlw	1
  3464   00F780  6E51               	movwf	keypad_read@ret^0,c
  3465   00F782                     l51:
  3466                           
  3467                           ;ECUAL/KEYPAD/keypad.c: 81:     return ret;
  3468   00F782  5051               	movf	keypad_read@ret^0,w,c
  3469   00F784  0012               	return		;funcret
  3470   00F786                     __end_of_keypad_read:
  3471                           	callstack 0
  3472                           
  3473 ;; *************** function _gpio_pin_logic_read *****************
  3474 ;; Defined at:
  3475 ;;		line 116 in file "MCAL/GPIO/gpio.c"
  3476 ;; Parameters:    Size  Location     Type
  3477 ;;  pin             1    0[COMRAM] PTR struct .
  3478 ;;		 -> keypad$keypad_columns_pins(4), keypad(8), 
  3479 ;;  pin_logic_re    1    1[COMRAM] PTR enum E2978
  3480 ;;		 -> keypad_read@column_logic(1), 
  3481 ;; Auto vars:     Size  Location     Type
  3482 ;;  ret             1    6[COMRAM] unsigned char 
  3483 ;; Return value:  Size  Location     Type
  3484 ;;                  1    wreg      unsigned char 
  3485 ;; Registers used:
  3486 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3487 ;; Tracked objects:
  3488 ;;		On entry : 0/0
  3489 ;;		On exit  : 0/0
  3490 ;;		Unchanged: 0/0
  3491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3492 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3493 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3494 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3495 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3496 ;;Total ram usage:        7 bytes
  3497 ;; Hardware stack levels used: 1
  3498 ;; This function calls:
  3499 ;;		Nothing
  3500 ;; This function is called by:
  3501 ;;		_keypad_read
  3502 ;; This function uses a non-reentrant model
  3503 ;;
  3504                           
  3505                           	psect	text15
  3506   00F464                     __ptext15:
  3507                           	callstack 0
  3508   00F464                     _gpio_pin_logic_read:
  3509                           	callstack 29
  3510   00F464                     
  3511                           ;MCAL/GPIO/gpio.c: 119:     if(((void*)0)==pin || ((void*)0)==pin_logic_read || (pin->pi
      +                          n)>7){
  3512   00F464  5045               	movf	gpio_pin_logic_read@pin^0,w,c
  3513   00F466  B4D8               	btfsc	status,2,c
  3514   00F468  EF38  F07A         	goto	u2791
  3515   00F46C  EF3A  F07A         	goto	u2790
  3516   00F470                     u2791:
  3517   00F470  EF52  F07A         	goto	l3559
  3518   00F474                     u2790:
  3519   00F474  5046               	movf	gpio_pin_logic_read@pin_logic_read^0,w,c
  3520   00F476  B4D8               	btfsc	status,2,c
  3521   00F478  EF40  F07A         	goto	u2801
  3522   00F47C  EF42  F07A         	goto	u2800
  3523   00F480                     u2801:
  3524   00F480  EF52  F07A         	goto	l3559
  3525   00F484                     u2800:
  3526   00F484  5045               	movf	gpio_pin_logic_read@pin^0,w,c
  3527   00F486  6ED9               	movwf	fsr2l,c
  3528   00F488  6ADA               	clrf	fsr2h,c
  3529   00F48A  30DF               	rrcf	223,w,c
  3530   00F48C  32E8               	rrcf	wreg,f,c
  3531   00F48E  32E8               	rrcf	wreg,f,c
  3532   00F490  0B07               	andlw	7
  3533   00F492  6E47               	movwf	??_gpio_pin_logic_read^0,c
  3534   00F494  0E07               	movlw	7
  3535   00F496  6447               	cpfsgt	??_gpio_pin_logic_read^0,c
  3536   00F498  EF50  F07A         	goto	u2811
  3537   00F49C  EF52  F07A         	goto	u2810
  3538   00F4A0                     u2811:
  3539   00F4A0  EF56  F07A         	goto	l3561
  3540   00F4A4                     u2810:
  3541   00F4A4                     l3559:
  3542                           
  3543                           ;MCAL/GPIO/gpio.c: 120:         ret=(Std_ReturnType)0x00;
  3544   00F4A4  0E00               	movlw	0
  3545   00F4A6  6E4B               	movwf	gpio_pin_logic_read@ret^0,c
  3546                           
  3547                           ;MCAL/GPIO/gpio.c: 121:     }
  3548   00F4A8  EF82  F07A         	goto	l3565
  3549   00F4AC                     l3561:
  3550                           
  3551                           ;MCAL/GPIO/gpio.c: 123:         *pin_logic_read=((*portx[pin->port]>>pin->pin) & (uint8)
      +                          1);
  3552   00F4AC  5046               	movf	gpio_pin_logic_read@pin_logic_read^0,w,c
  3553   00F4AE  6ED9               	movwf	fsr2l,c
  3554   00F4B0  6ADA               	clrf	fsr2h,c
  3555   00F4B2  5045               	movf	gpio_pin_logic_read@pin^0,w,c
  3556   00F4B4  6EE1               	movwf	fsr1l,c
  3557   00F4B6  6AE2               	clrf	fsr1h,c
  3558   00F4B8  30E7               	rrcf	231,w,c
  3559   00F4BA  32E8               	rrcf	wreg,f,c
  3560   00F4BC  32E8               	rrcf	wreg,f,c
  3561   00F4BE  0B07               	andlw	7
  3562   00F4C0  6E47               	movwf	??_gpio_pin_logic_read^0,c
  3563   00F4C2  5045               	movf	gpio_pin_logic_read@pin^0,w,c
  3564   00F4C4  6EE1               	movwf	fsr1l,c
  3565   00F4C6  6AE2               	clrf	fsr1h,c
  3566   00F4C8  50E7               	movf	231,w,c
  3567   00F4CA  0B07               	andlw	7
  3568   00F4CC  0D02               	mullw	2
  3569   00F4CE  50F3               	movf	243,w,c
  3570   00F4D0  0F01               	addlw	low _portx
  3571   00F4D2  6EE1               	movwf	fsr1l,c
  3572   00F4D4  6AE2               	clrf	fsr1h,c
  3573   00F4D6  CFE6 F048          	movff	postinc1,??_gpio_pin_logic_read+1
  3574   00F4DA  CFE5 F049          	movff	postdec1,??_gpio_pin_logic_read+2
  3575   00F4DE  C048  FFE1         	movff	??_gpio_pin_logic_read+1,fsr1l
  3576   00F4E2  C049  FFE2         	movff	??_gpio_pin_logic_read+2,fsr1h
  3577   00F4E6  50E7               	movf	indf1,w,c
  3578   00F4E8  6E4A               	movwf	(??_gpio_pin_logic_read+3)^0,c
  3579   00F4EA  2A47               	incf	??_gpio_pin_logic_read^0,f,c
  3580   00F4EC  EF7A  F07A         	goto	u2824
  3581   00F4F0                     u2825:
  3582   00F4F0  90D8               	bcf	status,0,c
  3583   00F4F2  324A               	rrcf	(??_gpio_pin_logic_read+3)^0,f,c
  3584   00F4F4                     u2824:
  3585   00F4F4  2E47               	decfsz	??_gpio_pin_logic_read^0,f,c
  3586   00F4F6  EF78  F07A         	goto	u2825
  3587   00F4FA  504A               	movf	(??_gpio_pin_logic_read+3)^0,w,c
  3588   00F4FC  0B01               	andlw	1
  3589   00F4FE  6EDF               	movwf	indf2,c
  3590   00F500                     
  3591                           ;MCAL/GPIO/gpio.c: 124:         ret=(Std_ReturnType)0x01;
  3592   00F500  0E01               	movlw	1
  3593   00F502  6E4B               	movwf	gpio_pin_logic_read@ret^0,c
  3594   00F504                     l3565:
  3595                           
  3596                           ;MCAL/GPIO/gpio.c: 127:     return ret;
  3597   00F504  504B               	movf	gpio_pin_logic_read@ret^0,w,c
  3598   00F506  0012               	return		;funcret
  3599   00F508                     __end_of_gpio_pin_logic_read:
  3600                           	callstack 0
  3601                           
  3602 ;; *************** function _dc_motor_stop *****************
  3603 ;; Defined at:
  3604 ;;		line 91 in file "ECUAL/DC_MOTOR/dc_motor.c"
  3605 ;; Parameters:    Size  Location     Type
  3606 ;;  dc_motor        1    8[COMRAM] PTR struct .
  3607 ;;		 -> motor2(3), motor1(3), 
  3608 ;; Auto vars:     Size  Location     Type
  3609 ;;  ret             1   10[COMRAM] unsigned char 
  3610 ;;  gpio_ret        1    9[COMRAM] unsigned char 
  3611 ;; Return value:  Size  Location     Type
  3612 ;;                  1    wreg      unsigned char 
  3613 ;; Registers used:
  3614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3615 ;; Tracked objects:
  3616 ;;		On entry : 0/0
  3617 ;;		On exit  : 0/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3620 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3621 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3623 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3624 ;;Total ram usage:        3 bytes
  3625 ;; Hardware stack levels used: 1
  3626 ;; Hardware stack levels required when called: 1
  3627 ;; This function calls:
  3628 ;;		_gpio_pin_logic_write
  3629 ;; This function is called by:
  3630 ;;		_main
  3631 ;; This function uses a non-reentrant model
  3632 ;;
  3633                           
  3634                           	psect	text16
  3635   00ECD2                     __ptext16:
  3636                           	callstack 0
  3637   00ECD2                     _dc_motor_stop:
  3638                           	callstack 29
  3639   00ECD2                     
  3640                           ;ECUAL/DC_MOTOR/dc_motor.c: 94:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  3641   00ECD2  0E00               	movlw	0
  3642   00ECD4  6E4E               	movwf	dc_motor_stop@gpio_ret^0,c
  3643                           
  3644                           ;ECUAL/DC_MOTOR/dc_motor.c: 95:     if(((void*)0)==dc_motor){
  3645   00ECD6  504D               	movf	dc_motor_stop@dc_motor^0,w,c
  3646   00ECD8  A4D8               	btfss	status,2,c
  3647   00ECDA  EF71  F076         	goto	u2931
  3648   00ECDE  EF73  F076         	goto	u2930
  3649   00ECE2                     u2931:
  3650   00ECE2  EF77  F076         	goto	l3669
  3651   00ECE6                     u2930:
  3652   00ECE6                     
  3653                           ;ECUAL/DC_MOTOR/dc_motor.c: 96:         ret=(Std_ReturnType)0x00;
  3654   00ECE6  0E00               	movlw	0
  3655   00ECE8  6E4F               	movwf	dc_motor_stop@ret^0,c
  3656                           
  3657                           ;ECUAL/DC_MOTOR/dc_motor.c: 97:     }
  3658   00ECEA  EF8D  F076         	goto	l3675
  3659   00ECEE                     l3669:
  3660                           
  3661                           ;ECUAL/DC_MOTOR/dc_motor.c: 99:         gpio_ret =gpio_pin_logic_write(&(dc_motor->dc_mo
      +                          tor_pin0),LOW);
  3662   00ECEE  C04D  F045         	movff	dc_motor_stop@dc_motor,gpio_pin_logic_write@pin
  3663   00ECF2  0E00               	movlw	0
  3664   00ECF4  6E46               	movwf	gpio_pin_logic_write@pin_logic^0,c
  3665   00ECF6  ECD5  F07C         	call	_gpio_pin_logic_write	;wreg free
  3666   00ECFA  6E4E               	movwf	dc_motor_stop@gpio_ret^0,c
  3667                           
  3668                           ;ECUAL/DC_MOTOR/dc_motor.c: 100:         gpio_ret =gpio_pin_logic_write(&(dc_motor->dc_m
      +                          otor_pin1),LOW);
  3669   00ECFC  284D               	incf	dc_motor_stop@dc_motor^0,w,c
  3670   00ECFE  6E45               	movwf	gpio_pin_logic_write@pin^0,c
  3671   00ED00  0E00               	movlw	0
  3672   00ED02  6E46               	movwf	gpio_pin_logic_write@pin_logic^0,c
  3673   00ED04  ECD5  F07C         	call	_gpio_pin_logic_write	;wreg free
  3674   00ED08  6E4E               	movwf	dc_motor_stop@gpio_ret^0,c
  3675   00ED0A                     
  3676                           ;ECUAL/DC_MOTOR/dc_motor.c: 101:         dc_motor->dc_motor_state=DC_MOTOR_OFF;
  3677   00ED0A  504D               	movf	dc_motor_stop@dc_motor^0,w,c
  3678   00ED0C  6ED9               	movwf	fsr2l,c
  3679   00ED0E  6ADA               	clrf	fsr2h,c
  3680   00ED10  0E02               	movlw	2
  3681   00ED12  26D9               	addwf	fsr2l,f,c
  3682   00ED14  6ADF               	clrf	indf2,c
  3683   00ED16                     
  3684                           ;ECUAL/DC_MOTOR/dc_motor.c: 102:         ret=(Std_ReturnType)0x01;
  3685   00ED16  0E01               	movlw	1
  3686   00ED18  6E4F               	movwf	dc_motor_stop@ret^0,c
  3687   00ED1A                     l3675:
  3688                           
  3689                           ;ECUAL/DC_MOTOR/dc_motor.c: 105:     return ret;
  3690   00ED1A  504F               	movf	dc_motor_stop@ret^0,w,c
  3691   00ED1C  0012               	return		;funcret
  3692   00ED1E                     __end_of_dc_motor_stop:
  3693                           	callstack 0
  3694                           
  3695 ;; *************** function _dc_motor_move_right *****************
  3696 ;; Defined at:
  3697 ;;		line 41 in file "ECUAL/DC_MOTOR/dc_motor.c"
  3698 ;; Parameters:    Size  Location     Type
  3699 ;;  dc_motor        1    8[COMRAM] PTR struct .
  3700 ;;		 -> motor2(3), motor1(3), 
  3701 ;; Auto vars:     Size  Location     Type
  3702 ;;  ret             1   10[COMRAM] unsigned char 
  3703 ;;  gpio_ret        1    9[COMRAM] unsigned char 
  3704 ;; Return value:  Size  Location     Type
  3705 ;;                  1    wreg      unsigned char 
  3706 ;; Registers used:
  3707 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3708 ;; Tracked objects:
  3709 ;;		On entry : 0/0
  3710 ;;		On exit  : 0/0
  3711 ;;		Unchanged: 0/0
  3712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3713 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3714 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3716 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3717 ;;Total ram usage:        3 bytes
  3718 ;; Hardware stack levels used: 1
  3719 ;; Hardware stack levels required when called: 1
  3720 ;; This function calls:
  3721 ;;		_gpio_pin_logic_write
  3722 ;; This function is called by:
  3723 ;;		_main
  3724 ;; This function uses a non-reentrant model
  3725 ;;
  3726                           
  3727                           	psect	text17
  3728   00ED6C                     __ptext17:
  3729                           	callstack 0
  3730   00ED6C                     _dc_motor_move_right:
  3731                           	callstack 29
  3732   00ED6C                     
  3733                           ;ECUAL/DC_MOTOR/dc_motor.c: 44:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  3734   00ED6C  0E00               	movlw	0
  3735   00ED6E  6E4E               	movwf	dc_motor_move_right@gpio_ret^0,c
  3736                           
  3737                           ;ECUAL/DC_MOTOR/dc_motor.c: 45:     if(((void*)0)==dc_motor){
  3738   00ED70  504D               	movf	dc_motor_move_right@dc_motor^0,w,c
  3739   00ED72  A4D8               	btfss	status,2,c
  3740   00ED74  EFBE  F076         	goto	u2911
  3741   00ED78  EFC0  F076         	goto	u2910
  3742   00ED7C                     u2911:
  3743   00ED7C  EFC4  F076         	goto	l3641
  3744   00ED80                     u2910:
  3745   00ED80                     
  3746                           ;ECUAL/DC_MOTOR/dc_motor.c: 46:         ret=(Std_ReturnType)0x00;
  3747   00ED80  0E00               	movlw	0
  3748   00ED82  6E4F               	movwf	dc_motor_move_right@ret^0,c
  3749                           
  3750                           ;ECUAL/DC_MOTOR/dc_motor.c: 47:     }
  3751   00ED84  EFDB  F076         	goto	l3647
  3752   00ED88                     l3641:
  3753                           
  3754                           ;ECUAL/DC_MOTOR/dc_motor.c: 49:         gpio_ret =gpio_pin_logic_write(&(dc_motor->dc_mo
      +                          tor_pin0),HIGH);
  3755   00ED88  C04D  F045         	movff	dc_motor_move_right@dc_motor,gpio_pin_logic_write@pin
  3756   00ED8C  0E01               	movlw	1
  3757   00ED8E  6E46               	movwf	gpio_pin_logic_write@pin_logic^0,c
  3758   00ED90  ECD5  F07C         	call	_gpio_pin_logic_write	;wreg free
  3759   00ED94  6E4E               	movwf	dc_motor_move_right@gpio_ret^0,c
  3760                           
  3761                           ;ECUAL/DC_MOTOR/dc_motor.c: 50:         gpio_ret =gpio_pin_logic_write(&(dc_motor->dc_mo
      +                          tor_pin1),LOW);
  3762   00ED96  284D               	incf	dc_motor_move_right@dc_motor^0,w,c
  3763   00ED98  6E45               	movwf	gpio_pin_logic_write@pin^0,c
  3764   00ED9A  0E00               	movlw	0
  3765   00ED9C  6E46               	movwf	gpio_pin_logic_write@pin_logic^0,c
  3766   00ED9E  ECD5  F07C         	call	_gpio_pin_logic_write	;wreg free
  3767   00EDA2  6E4E               	movwf	dc_motor_move_right@gpio_ret^0,c
  3768   00EDA4                     
  3769                           ;ECUAL/DC_MOTOR/dc_motor.c: 51:         dc_motor->dc_motor_state=DC_MOTOR_ON;
  3770   00EDA4  504D               	movf	dc_motor_move_right@dc_motor^0,w,c
  3771   00EDA6  6ED9               	movwf	fsr2l,c
  3772   00EDA8  6ADA               	clrf	fsr2h,c
  3773   00EDAA  0E02               	movlw	2
  3774   00EDAC  26D9               	addwf	fsr2l,f,c
  3775   00EDAE  0E01               	movlw	1
  3776   00EDB0  6EDF               	movwf	indf2,c
  3777   00EDB2                     
  3778                           ;ECUAL/DC_MOTOR/dc_motor.c: 52:         ret=(Std_ReturnType)0x01;
  3779   00EDB2  0E01               	movlw	1
  3780   00EDB4  6E4F               	movwf	dc_motor_move_right@ret^0,c
  3781   00EDB6                     l3647:
  3782                           
  3783                           ;ECUAL/DC_MOTOR/dc_motor.c: 55:     return ret;
  3784   00EDB6  504F               	movf	dc_motor_move_right@ret^0,w,c
  3785   00EDB8  0012               	return		;funcret
  3786   00EDBA                     __end_of_dc_motor_move_right:
  3787                           	callstack 0
  3788                           
  3789 ;; *************** function _dc_motor_move_left *****************
  3790 ;; Defined at:
  3791 ;;		line 66 in file "ECUAL/DC_MOTOR/dc_motor.c"
  3792 ;; Parameters:    Size  Location     Type
  3793 ;;  dc_motor        1    8[COMRAM] PTR struct .
  3794 ;;		 -> motor2(3), motor1(3), 
  3795 ;; Auto vars:     Size  Location     Type
  3796 ;;  ret             1   10[COMRAM] unsigned char 
  3797 ;;  gpio_ret        1    9[COMRAM] unsigned char 
  3798 ;; Return value:  Size  Location     Type
  3799 ;;                  1    wreg      unsigned char 
  3800 ;; Registers used:
  3801 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3802 ;; Tracked objects:
  3803 ;;		On entry : 0/0
  3804 ;;		On exit  : 0/0
  3805 ;;		Unchanged: 0/0
  3806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3807 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3808 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3810 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3811 ;;Total ram usage:        3 bytes
  3812 ;; Hardware stack levels used: 1
  3813 ;; Hardware stack levels required when called: 1
  3814 ;; This function calls:
  3815 ;;		_gpio_pin_logic_write
  3816 ;; This function is called by:
  3817 ;;		_main
  3818 ;; This function uses a non-reentrant model
  3819 ;;
  3820                           
  3821                           	psect	text18
  3822   00ED1E                     __ptext18:
  3823                           	callstack 0
  3824   00ED1E                     _dc_motor_move_left:
  3825                           	callstack 29
  3826   00ED1E                     
  3827                           ;ECUAL/DC_MOTOR/dc_motor.c: 69:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  3828   00ED1E  0E00               	movlw	0
  3829   00ED20  6E4E               	movwf	dc_motor_move_left@gpio_ret^0,c
  3830                           
  3831                           ;ECUAL/DC_MOTOR/dc_motor.c: 70:     if(((void*)0)==dc_motor){
  3832   00ED22  504D               	movf	dc_motor_move_left@dc_motor^0,w,c
  3833   00ED24  A4D8               	btfss	status,2,c
  3834   00ED26  EF97  F076         	goto	u2921
  3835   00ED2A  EF99  F076         	goto	u2920
  3836   00ED2E                     u2921:
  3837   00ED2E  EF9D  F076         	goto	l3655
  3838   00ED32                     u2920:
  3839   00ED32                     
  3840                           ;ECUAL/DC_MOTOR/dc_motor.c: 71:         ret=(Std_ReturnType)0x00;
  3841   00ED32  0E00               	movlw	0
  3842   00ED34  6E4F               	movwf	dc_motor_move_left@ret^0,c
  3843                           
  3844                           ;ECUAL/DC_MOTOR/dc_motor.c: 72:     }
  3845   00ED36  EFB4  F076         	goto	l3661
  3846   00ED3A                     l3655:
  3847                           
  3848                           ;ECUAL/DC_MOTOR/dc_motor.c: 74:         gpio_ret =gpio_pin_logic_write(&(dc_motor->dc_mo
      +                          tor_pin0),LOW);
  3849   00ED3A  C04D  F045         	movff	dc_motor_move_left@dc_motor,gpio_pin_logic_write@pin
  3850   00ED3E  0E00               	movlw	0
  3851   00ED40  6E46               	movwf	gpio_pin_logic_write@pin_logic^0,c
  3852   00ED42  ECD5  F07C         	call	_gpio_pin_logic_write	;wreg free
  3853   00ED46  6E4E               	movwf	dc_motor_move_left@gpio_ret^0,c
  3854                           
  3855                           ;ECUAL/DC_MOTOR/dc_motor.c: 75:         gpio_ret =gpio_pin_logic_write(&(dc_motor->dc_mo
      +                          tor_pin1),HIGH);
  3856   00ED48  284D               	incf	dc_motor_move_left@dc_motor^0,w,c
  3857   00ED4A  6E45               	movwf	gpio_pin_logic_write@pin^0,c
  3858   00ED4C  0E01               	movlw	1
  3859   00ED4E  6E46               	movwf	gpio_pin_logic_write@pin_logic^0,c
  3860   00ED50  ECD5  F07C         	call	_gpio_pin_logic_write	;wreg free
  3861   00ED54  6E4E               	movwf	dc_motor_move_left@gpio_ret^0,c
  3862   00ED56                     
  3863                           ;ECUAL/DC_MOTOR/dc_motor.c: 76:         dc_motor->dc_motor_state=DC_MOTOR_ON;
  3864   00ED56  504D               	movf	dc_motor_move_left@dc_motor^0,w,c
  3865   00ED58  6ED9               	movwf	fsr2l,c
  3866   00ED5A  6ADA               	clrf	fsr2h,c
  3867   00ED5C  0E02               	movlw	2
  3868   00ED5E  26D9               	addwf	fsr2l,f,c
  3869   00ED60  0E01               	movlw	1
  3870   00ED62  6EDF               	movwf	indf2,c
  3871   00ED64                     
  3872                           ;ECUAL/DC_MOTOR/dc_motor.c: 77:         ret=(Std_ReturnType)0x01;
  3873   00ED64  0E01               	movlw	1
  3874   00ED66  6E4F               	movwf	dc_motor_move_left@ret^0,c
  3875   00ED68                     l3661:
  3876                           
  3877                           ;ECUAL/DC_MOTOR/dc_motor.c: 80:     return ret;
  3878   00ED68  504F               	movf	dc_motor_move_left@ret^0,w,c
  3879   00ED6A  0012               	return		;funcret
  3880   00ED6C                     __end_of_dc_motor_move_left:
  3881                           	callstack 0
  3882                           
  3883 ;; *************** function _app_init *****************
  3884 ;; Defined at:
  3885 ;;		line 14 in file "app.c"
  3886 ;; Parameters:    Size  Location     Type
  3887 ;;		None
  3888 ;; Auto vars:     Size  Location     Type
  3889 ;;		None
  3890 ;; Return value:  Size  Location     Type
  3891 ;;                  1    wreg      void 
  3892 ;; Registers used:
  3893 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3894 ;; Tracked objects:
  3895 ;;		On entry : 0/0
  3896 ;;		On exit  : 0/0
  3897 ;;		Unchanged: 0/0
  3898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3903 ;;Total ram usage:        0 bytes
  3904 ;; Hardware stack levels used: 1
  3905 ;; Hardware stack levels required when called: 5
  3906 ;; This function calls:
  3907 ;;		_ecual_init
  3908 ;; This function is called by:
  3909 ;;		_main
  3910 ;; This function uses a non-reentrant model
  3911 ;;
  3912                           
  3913                           	psect	text19
  3914   00EAFA                     __ptext19:
  3915                           	callstack 0
  3916   00EAFA                     _app_init:
  3917                           	callstack 25
  3918   00EAFA                     
  3919                           ;app.c: 16:     ecual_init();
  3920   00EAFA  EC94  F075         	call	_ecual_init	;wreg free
  3921   00EAFE  0012               	return		;funcret
  3922   00EB00                     __end_of_app_init:
  3923                           	callstack 0
  3924                           
  3925 ;; *************** function _ecual_init *****************
  3926 ;; Defined at:
  3927 ;;		line 42 in file "init.c"
  3928 ;; Parameters:    Size  Location     Type
  3929 ;;		None
  3930 ;; Auto vars:     Size  Location     Type
  3931 ;;  ret             1    0        unsigned char 
  3932 ;; Return value:  Size  Location     Type
  3933 ;;                  1    wreg      void 
  3934 ;; Registers used:
  3935 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3936 ;; Tracked objects:
  3937 ;;		On entry : 0/0
  3938 ;;		On exit  : 0/0
  3939 ;;		Unchanged: 0/0
  3940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3944 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3945 ;;Total ram usage:        0 bytes
  3946 ;; Hardware stack levels used: 1
  3947 ;; Hardware stack levels required when called: 4
  3948 ;; This function calls:
  3949 ;;		_dc_motor_init
  3950 ;;		_keypad_init
  3951 ;;		_lcd_init
  3952 ;;		_led_init
  3953 ;; This function is called by:
  3954 ;;		_app_init
  3955 ;; This function uses a non-reentrant model
  3956 ;;
  3957                           
  3958                           	psect	text20
  3959   00EB28                     __ptext20:
  3960                           	callstack 0
  3961   00EB28                     _ecual_init:
  3962                           	callstack 25
  3963   00EB28  0E29               	movlw	low _keypad
  3964   00EB2A  6E51               	movwf	keypad_init@keypad^0,c
  3965   00EB2C  EC87  F077         	call	_keypad_init	;wreg free
  3966   00EB30  0E31               	movlw	low _lcd
  3967   00EB32  6E58               	movwf	lcd_init@lcd^0,c
  3968   00EB34  ECC3  F07B         	call	_lcd_init	;wreg free
  3969   00EB38  0E3A               	movlw	low _motor1
  3970   00EB3A  6E51               	movwf	dc_motor_init@dc_motor^0,c
  3971   00EB3C  ECB5  F075         	call	_dc_motor_init	;wreg free
  3972   00EB40  0E37               	movlw	low _motor2
  3973   00EB42  6E51               	movwf	dc_motor_init@dc_motor^0,c
  3974   00EB44  ECB5  F075         	call	_dc_motor_init	;wreg free
  3975   00EB48  0E43               	movlw	low _motor1_led1
  3976   00EB4A  6E51               	movwf	led_init@led^0,c
  3977   00EB4C  EC05  F077         	call	_led_init	;wreg free
  3978   00EB50  0E41               	movlw	low _motor1_led2
  3979   00EB52  6E51               	movwf	led_init@led^0,c
  3980   00EB54  EC05  F077         	call	_led_init	;wreg free
  3981   00EB58  0E3F               	movlw	low _motor2_led1
  3982   00EB5A  6E51               	movwf	led_init@led^0,c
  3983   00EB5C  EC05  F077         	call	_led_init	;wreg free
  3984   00EB60  0E3D               	movlw	low _motor2_led2
  3985   00EB62  6E51               	movwf	led_init@led^0,c
  3986   00EB64  EC05  F077         	call	_led_init	;wreg free
  3987   00EB68  0012               	return		;funcret
  3988   00EB6A                     __end_of_ecual_init:
  3989                           	callstack 0
  3990                           
  3991 ;; *************** function _led_init *****************
  3992 ;; Defined at:
  3993 ;;		line 17 in file "ECUAL/LED/led.c"
  3994 ;; Parameters:    Size  Location     Type
  3995 ;;  led             1   12[COMRAM] PTR struct .
  3996 ;;		 -> motor2_led2(2), motor2_led1(2), motor1_led2(2), motor1_led1(2), 
  3997 ;; Auto vars:     Size  Location     Type
  3998 ;;  ret             1   14[COMRAM] unsigned char 
  3999 ;;  gpio_ret        1   13[COMRAM] unsigned char 
  4000 ;; Return value:  Size  Location     Type
  4001 ;;                  1    wreg      unsigned char 
  4002 ;; Registers used:
  4003 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4004 ;; Tracked objects:
  4005 ;;		On entry : 0/0
  4006 ;;		On exit  : 0/0
  4007 ;;		Unchanged: 0/0
  4008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4009 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4010 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4012 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4013 ;;Total ram usage:        3 bytes
  4014 ;; Hardware stack levels used: 1
  4015 ;; Hardware stack levels required when called: 2
  4016 ;; This function calls:
  4017 ;;		_gpio_pin_output_low_init
  4018 ;; This function is called by:
  4019 ;;		_ecual_init
  4020 ;; This function uses a non-reentrant model
  4021 ;;
  4022                           
  4023                           	psect	text21
  4024   00EE0A                     __ptext21:
  4025                           	callstack 0
  4026   00EE0A                     _led_init:
  4027                           	callstack 26
  4028   00EE0A                     
  4029                           ;ECUAL/LED/led.c: 20:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  4030   00EE0A  0E00               	movlw	0
  4031   00EE0C  6E52               	movwf	led_init@gpio_ret^0,c
  4032                           
  4033                           ;ECUAL/LED/led.c: 21:     if(((void*)0)==led){
  4034   00EE0E  5051               	movf	led_init@led^0,w,c
  4035   00EE10  A4D8               	btfss	status,2,c
  4036   00EE12  EF0D  F077         	goto	u2771
  4037   00EE16  EF0F  F077         	goto	u2770
  4038   00EE1A                     u2771:
  4039   00EE1A  EF13  F077         	goto	l3543
  4040   00EE1E                     u2770:
  4041   00EE1E                     
  4042                           ;ECUAL/LED/led.c: 22:         ret=(Std_ReturnType)0x00;
  4043   00EE1E  0E00               	movlw	0
  4044   00EE20  6E53               	movwf	led_init@ret^0,c
  4045                           
  4046                           ;ECUAL/LED/led.c: 23:     }
  4047   00EE22  EF2B  F077         	goto	l3549
  4048   00EE26                     l3543:
  4049   00EE26  C051  F04D         	movff	led_init@led,gpio_pin_output_low_init@pin
  4050   00EE2A  EC57  F077         	call	_gpio_pin_output_low_init	;wreg free
  4051   00EE2E                     
  4052                           ;ECUAL/LED/led.c: 26:         led->led_state=led->led_pin.logic;
  4053   00EE2E  5051               	movf	led_init@led^0,w,c
  4054   00EE30  6ED9               	movwf	fsr2l,c
  4055   00EE32  6ADA               	clrf	fsr2h,c
  4056   00EE34  0E01               	movlw	1
  4057   00EE36  26D9               	addwf	fsr2l,f,c
  4058   00EE38  5051               	movf	led_init@led^0,w,c
  4059   00EE3A  6EE1               	movwf	fsr1l,c
  4060   00EE3C  6AE2               	clrf	fsr1h,c
  4061   00EE3E  BEE7               	btfsc	indf1,7,c
  4062   00EE40  EF24  F077         	goto	u2781
  4063   00EE44  EF27  F077         	goto	u2780
  4064   00EE48                     u2781:
  4065   00EE48  0E01               	movlw	1
  4066   00EE4A  EF28  F077         	goto	u2786
  4067   00EE4E                     u2780:
  4068   00EE4E  0E00               	movlw	0
  4069   00EE50                     u2786:
  4070   00EE50  6EDF               	movwf	indf2,c
  4071   00EE52                     
  4072                           ;ECUAL/LED/led.c: 27:         ret=(Std_ReturnType)0x01;
  4073   00EE52  0E01               	movlw	1
  4074   00EE54  6E53               	movwf	led_init@ret^0,c
  4075   00EE56                     l3549:
  4076                           
  4077                           ;ECUAL/LED/led.c: 30:     return ret;
  4078   00EE56  5053               	movf	led_init@ret^0,w,c
  4079   00EE58  0012               	return		;funcret
  4080   00EE5A                     __end_of_led_init:
  4081                           	callstack 0
  4082                           
  4083 ;; *************** function _lcd_init *****************
  4084 ;; Defined at:
  4085 ;;		line 24 in file "ECUAL/LCD/lcd.c"
  4086 ;; Parameters:    Size  Location     Type
  4087 ;;  lcd             1   19[COMRAM] PTR struct .
  4088 ;;		 -> lcd(6), 
  4089 ;; Auto vars:     Size  Location     Type
  4090 ;;  lcd_ret         1   24[COMRAM] unsigned char 
  4091 ;;  pins_counter    1   23[COMRAM] unsigned char 
  4092 ;;  ret             1   22[COMRAM] unsigned char 
  4093 ;;  gpio_ret        1   21[COMRAM] unsigned char 
  4094 ;; Return value:  Size  Location     Type
  4095 ;;                  1    wreg      unsigned char 
  4096 ;; Registers used:
  4097 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4098 ;; Tracked objects:
  4099 ;;		On entry : 0/0
  4100 ;;		On exit  : 0/0
  4101 ;;		Unchanged: 0/0
  4102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4103 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4104 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4105 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4106 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4107 ;;Total ram usage:        6 bytes
  4108 ;; Hardware stack levels used: 1
  4109 ;; Hardware stack levels required when called: 3
  4110 ;; This function calls:
  4111 ;;		_gpio_pin_output_low_init
  4112 ;;		_lcd_send_command
  4113 ;; This function is called by:
  4114 ;;		_ecual_init
  4115 ;; This function uses a non-reentrant model
  4116 ;;
  4117                           
  4118                           	psect	text22
  4119   00F786                     __ptext22:
  4120                           	callstack 0
  4121   00F786                     _lcd_init:
  4122                           	callstack 25
  4123   00F786                     
  4124                           ;ECUAL/LCD/lcd.c: 27:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  4125   00F786  0E00               	movlw	0
  4126   00F788  6E5A               	movwf	lcd_init@gpio_ret^0,c
  4127                           
  4128                           ;ECUAL/LCD/lcd.c: 28:     Std_ReturnType lcd_ret=(Std_ReturnType)0x00;
  4129   00F78A  0E00               	movlw	0
  4130   00F78C  6E5D               	movwf	lcd_init@lcd_ret^0,c
  4131                           
  4132                           ;ECUAL/LCD/lcd.c: 29:     uint8 pins_counter;;ECUAL/LCD/lcd.c: 30:     if(((void*)0)==lc
      +                          d){
  4133   00F78E  5058               	movf	lcd_init@lcd^0,w,c
  4134   00F790  A4D8               	btfss	status,2,c
  4135   00F792  EFCD  F07B         	goto	u2691
  4136   00F796  EFCF  F07B         	goto	u2690
  4137   00F79A                     u2691:
  4138   00F79A  EFD3  F07B         	goto	l3469
  4139   00F79E                     u2690:
  4140   00F79E                     
  4141                           ;ECUAL/LCD/lcd.c: 31:         ret=(Std_ReturnType)0x00;
  4142   00F79E  0E00               	movlw	0
  4143   00F7A0  6E5B               	movwf	lcd_init@ret^0,c
  4144                           
  4145                           ;ECUAL/LCD/lcd.c: 32:     }
  4146   00F7A2  EF39  F07C         	goto	l3503
  4147   00F7A6                     l3469:
  4148                           
  4149                           ;ECUAL/LCD/lcd.c: 34:         gpio_ret=gpio_pin_output_low_init(&(lcd->lcd_en));
  4150   00F7A6  2858               	incf	lcd_init@lcd^0,w,c
  4151   00F7A8  6E4D               	movwf	gpio_pin_output_low_init@pin^0,c
  4152   00F7AA  EC57  F077         	call	_gpio_pin_output_low_init	;wreg free
  4153   00F7AE  6E5A               	movwf	lcd_init@gpio_ret^0,c
  4154                           
  4155                           ;ECUAL/LCD/lcd.c: 35:         gpio_ret=gpio_pin_output_low_init(&(lcd->lcd_rs));
  4156   00F7B0  C058  F04D         	movff	lcd_init@lcd,gpio_pin_output_low_init@pin
  4157   00F7B4  EC57  F077         	call	_gpio_pin_output_low_init	;wreg free
  4158   00F7B8  6E5A               	movwf	lcd_init@gpio_ret^0,c
  4159   00F7BA                     
  4160                           ;ECUAL/LCD/lcd.c: 36:         for(pins_counter=0;pins_counter<n;pins_counter++){
  4161   00F7BA  0E00               	movlw	0
  4162   00F7BC  6E5C               	movwf	lcd_init@pins_counter^0,c
  4163   00F7BE  EFE8  F07B         	goto	l3477
  4164   00F7C2                     l3473:
  4165   00F7C2  5058               	movf	lcd_init@lcd^0,w,c
  4166   00F7C4  245C               	addwf	lcd_init@pins_counter^0,w,c
  4167   00F7C6  0F02               	addlw	2
  4168   00F7C8  6E4D               	movwf	gpio_pin_output_low_init@pin^0,c
  4169   00F7CA  EC57  F077         	call	_gpio_pin_output_low_init	;wreg free
  4170   00F7CE                     
  4171                           ;ECUAL/LCD/lcd.c: 38:         }
  4172   00F7CE  2A5C               	incf	lcd_init@pins_counter^0,f,c
  4173   00F7D0                     l3477:
  4174   00F7D0  0E03               	movlw	3
  4175   00F7D2  645C               	cpfsgt	lcd_init@pins_counter^0,c
  4176   00F7D4  EFEE  F07B         	goto	u2701
  4177   00F7D8  EFF0  F07B         	goto	u2700
  4178   00F7DC                     u2701:
  4179   00F7DC  EFE1  F07B         	goto	l3473
  4180   00F7E0                     u2700:
  4181   00F7E0                     
  4182                           ;ECUAL/LCD/lcd.c: 39:          _delay((unsigned long)((20)*(8000000/4000.0)));
  4183   00F7E0  0E34               	movlw	52
  4184   00F7E2  6E59               	movwf	??_lcd_init^0,c
  4185   00F7E4  0EF2               	movlw	242
  4186   00F7E6                     u3307:
  4187   00F7E6  2EE8               	decfsz	wreg,f,c
  4188   00F7E8  D7FE               	bra	u3307
  4189   00F7EA  2E59               	decfsz	??_lcd_init^0,f,c
  4190   00F7EC  D7FC               	bra	u3307
  4191   00F7EE  C058  F053         	movff	lcd_init@lcd,lcd_send_command@lcd
  4192   00F7F2  0E38               	movlw	56
  4193   00F7F4  6E54               	movwf	lcd_send_command@command^0,c
  4194   00F7F6  ECBA  F077         	call	_lcd_send_command	;wreg free
  4195   00F7FA                     
  4196                           ;ECUAL/LCD/lcd.c: 41:         _delay((unsigned long)((5)*(8000000/4000.0)));
  4197   00F7FA  0E0D               	movlw	13
  4198   00F7FC  6E59               	movwf	??_lcd_init^0,c
  4199   00F7FE  0EFC               	movlw	252
  4200   00F800                     u3317:
  4201   00F800  2EE8               	decfsz	wreg,f,c
  4202   00F802  D7FE               	bra	u3317
  4203   00F804  2E59               	decfsz	??_lcd_init^0,f,c
  4204   00F806  D7FC               	bra	u3317
  4205   00F808  C058  F053         	movff	lcd_init@lcd,lcd_send_command@lcd
  4206   00F80C  0E38               	movlw	56
  4207   00F80E  6E54               	movwf	lcd_send_command@command^0,c
  4208   00F810  ECBA  F077         	call	_lcd_send_command	;wreg free
  4209   00F814                     
  4210                           ;ECUAL/LCD/lcd.c: 43:         _delay((unsigned long)((150)*(8000000/4000000.0)));
  4211   00F814  0E64               	movlw	100
  4212   00F816                     u3327:
  4213   00F816  2EE8               	decfsz	wreg,f,c
  4214   00F818  D7FE               	bra	u3327
  4215   00F81A  C058  F053         	movff	lcd_init@lcd,lcd_send_command@lcd
  4216   00F81E  0E38               	movlw	56
  4217   00F820  6E54               	movwf	lcd_send_command@command^0,c
  4218   00F822  ECBA  F077         	call	_lcd_send_command	;wreg free
  4219   00F826  C058  F053         	movff	lcd_init@lcd,lcd_send_command@lcd
  4220   00F82A  0E01               	movlw	1
  4221   00F82C  6E54               	movwf	lcd_send_command@command^0,c
  4222   00F82E  ECBA  F077         	call	_lcd_send_command	;wreg free
  4223   00F832  C058  F053         	movff	lcd_init@lcd,lcd_send_command@lcd
  4224   00F836  0E02               	movlw	2
  4225   00F838  6E54               	movwf	lcd_send_command@command^0,c
  4226   00F83A  ECBA  F077         	call	_lcd_send_command	;wreg free
  4227   00F83E  C058  F053         	movff	lcd_init@lcd,lcd_send_command@lcd
  4228   00F842  0E06               	movlw	6
  4229   00F844  6E54               	movwf	lcd_send_command@command^0,c
  4230   00F846  ECBA  F077         	call	_lcd_send_command	;wreg free
  4231   00F84A  C058  F053         	movff	lcd_init@lcd,lcd_send_command@lcd
  4232   00F84E  0E0C               	movlw	12
  4233   00F850  6E54               	movwf	lcd_send_command@command^0,c
  4234   00F852  ECBA  F077         	call	_lcd_send_command	;wreg free
  4235   00F856  C058  F053         	movff	lcd_init@lcd,lcd_send_command@lcd
  4236   00F85A  0E80               	movlw	128
  4237   00F85C  6E54               	movwf	lcd_send_command@command^0,c
  4238   00F85E  ECBA  F077         	call	_lcd_send_command	;wreg free
  4239   00F862  C058  F053         	movff	lcd_init@lcd,lcd_send_command@lcd
  4240   00F866  0E28               	movlw	40
  4241   00F868  6E54               	movwf	lcd_send_command@command^0,c
  4242   00F86A  ECBA  F077         	call	_lcd_send_command	;wreg free
  4243   00F86E                     
  4244                           ;ECUAL/LCD/lcd.c: 57:         ret=(Std_ReturnType)0x01;
  4245   00F86E  0E01               	movlw	1
  4246   00F870  6E5B               	movwf	lcd_init@ret^0,c
  4247   00F872                     l3503:
  4248                           
  4249                           ;ECUAL/LCD/lcd.c: 60:     return ret;
  4250   00F872  505B               	movf	lcd_init@ret^0,w,c
  4251   00F874  0012               	return		;funcret
  4252   00F876                     __end_of_lcd_init:
  4253                           	callstack 0
  4254                           
  4255 ;; *************** function _lcd_send_command *****************
  4256 ;; Defined at:
  4257 ;;		line 72 in file "ECUAL/LCD/lcd.c"
  4258 ;; Parameters:    Size  Location     Type
  4259 ;;  lcd             1   14[COMRAM] PTR struct .
  4260 ;;		 -> lcd(6), 
  4261 ;;  command         1   15[COMRAM] unsigned char 
  4262 ;; Auto vars:     Size  Location     Type
  4263 ;;  ret             1   18[COMRAM] unsigned char 
  4264 ;;  lcd_ret         1   17[COMRAM] unsigned char 
  4265 ;;  gpio_ret        1   16[COMRAM] unsigned char 
  4266 ;; Return value:  Size  Location     Type
  4267 ;;                  1    wreg      unsigned char 
  4268 ;; Registers used:
  4269 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4270 ;; Tracked objects:
  4271 ;;		On entry : 0/0
  4272 ;;		On exit  : 0/0
  4273 ;;		Unchanged: 0/0
  4274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4275 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4276 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4278 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4279 ;;Total ram usage:        5 bytes
  4280 ;; Hardware stack levels used: 1
  4281 ;; Hardware stack levels required when called: 2
  4282 ;; This function calls:
  4283 ;;		_gpio_pin_logic_write
  4284 ;;		_lcd_send_enable
  4285 ;;		_lcd_send_nbits
  4286 ;; This function is called by:
  4287 ;;		_lcd_init
  4288 ;;		_lcd_send_custom_char
  4289 ;;		_lcd_set_curser
  4290 ;;		_main
  4291 ;; This function uses a non-reentrant model
  4292 ;;
  4293                           
  4294                           	psect	text23
  4295   00EF74                     __ptext23:
  4296                           	callstack 0
  4297   00EF74                     _lcd_send_command:
  4298                           	callstack 25
  4299   00EF74                     
  4300                           ;ECUAL/LCD/lcd.c: 75:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  4301   00EF74  0E00               	movlw	0
  4302   00EF76  6E55               	movwf	lcd_send_command@gpio_ret^0,c
  4303                           
  4304                           ;ECUAL/LCD/lcd.c: 76:     Std_ReturnType lcd_ret=(Std_ReturnType)0x00;
  4305   00EF78  0E00               	movlw	0
  4306   00EF7A  6E56               	movwf	lcd_send_command@lcd_ret^0,c
  4307                           
  4308                           ;ECUAL/LCD/lcd.c: 77:     if(((void*)0)==lcd){
  4309   00EF7C  5053               	movf	lcd_send_command@lcd^0,w,c
  4310   00EF7E  A4D8               	btfss	status,2,c
  4311   00EF80  EFC4  F077         	goto	u2531
  4312   00EF84  EFC6  F077         	goto	u2530
  4313   00EF88                     u2531:
  4314   00EF88  EFCA  F077         	goto	l3319
  4315   00EF8C                     u2530:
  4316   00EF8C                     
  4317                           ;ECUAL/LCD/lcd.c: 78:         ret=(Std_ReturnType)0x00;
  4318   00EF8C  0E00               	movlw	0
  4319   00EF8E  6E57               	movwf	lcd_send_command@ret^0,c
  4320                           
  4321                           ;ECUAL/LCD/lcd.c: 79:     }
  4322   00EF90  EFEB  F077         	goto	l3323
  4323   00EF94                     l3319:
  4324   00EF94  C053  F045         	movff	lcd_send_command@lcd,gpio_pin_logic_write@pin
  4325   00EF98  0E00               	movlw	0
  4326   00EF9A  6E46               	movwf	gpio_pin_logic_write@pin_logic^0,c
  4327   00EF9C  ECD5  F07C         	call	_gpio_pin_logic_write	;wreg free
  4328                           
  4329                           ;ECUAL/LCD/lcd.c: 83:         lcd_ret=lcd_send_nbits(lcd,command>>4);
  4330   00EFA0  C053  F04D         	movff	lcd_send_command@lcd,lcd_send_nbits@lcd
  4331   00EFA4  3854               	swapf	lcd_send_command@command^0,w,c
  4332   00EFA6  0B0F               	andlw	15
  4333   00EFA8  6E4E               	movwf	lcd_send_nbits@data_or_command^0,c
  4334   00EFAA  EC43  F076         	call	_lcd_send_nbits	;wreg free
  4335   00EFAE  6E56               	movwf	lcd_send_command@lcd_ret^0,c
  4336                           
  4337                           ;ECUAL/LCD/lcd.c: 84:         lcd_ret=lcd_send_enable(lcd);
  4338   00EFB0  C053  F04D         	movff	lcd_send_command@lcd,lcd_send_enable@lcd
  4339   00EFB4  EC80  F075         	call	_lcd_send_enable	;wreg free
  4340   00EFB8  6E56               	movwf	lcd_send_command@lcd_ret^0,c
  4341                           
  4342                           ;ECUAL/LCD/lcd.c: 85:         lcd_ret=lcd_send_nbits(lcd,command);
  4343   00EFBA  C053  F04D         	movff	lcd_send_command@lcd,lcd_send_nbits@lcd
  4344   00EFBE  C054  F04E         	movff	lcd_send_command@command,lcd_send_nbits@data_or_command
  4345   00EFC2  EC43  F076         	call	_lcd_send_nbits	;wreg free
  4346   00EFC6  6E56               	movwf	lcd_send_command@lcd_ret^0,c
  4347                           
  4348                           ;ECUAL/LCD/lcd.c: 86:         lcd_ret=lcd_send_enable(lcd);
  4349   00EFC8  C053  F04D         	movff	lcd_send_command@lcd,lcd_send_enable@lcd
  4350   00EFCC  EC80  F075         	call	_lcd_send_enable	;wreg free
  4351   00EFD0  6E56               	movwf	lcd_send_command@lcd_ret^0,c
  4352   00EFD2                     
  4353                           ;ECUAL/LCD/lcd.c: 94:         ret=(Std_ReturnType)0x01;
  4354   00EFD2  0E01               	movlw	1
  4355   00EFD4  6E57               	movwf	lcd_send_command@ret^0,c
  4356   00EFD6                     l3323:
  4357                           
  4358                           ;ECUAL/LCD/lcd.c: 97:     return ret;
  4359   00EFD6  5057               	movf	lcd_send_command@ret^0,w,c
  4360   00EFD8  0012               	return		;funcret
  4361   00EFDA                     __end_of_lcd_send_command:
  4362                           	callstack 0
  4363                           
  4364 ;; *************** function _lcd_send_nbits *****************
  4365 ;; Defined at:
  4366 ;;		line 328 in file "ECUAL/LCD/lcd.c"
  4367 ;; Parameters:    Size  Location     Type
  4368 ;;  lcd             1    8[COMRAM] PTR struct .
  4369 ;;		 -> lcd(6), 
  4370 ;;  data_or_comm    1    9[COMRAM] unsigned char 
  4371 ;; Auto vars:     Size  Location     Type
  4372 ;;  pin_counter     1   13[COMRAM] unsigned char 
  4373 ;;  ret             1   12[COMRAM] unsigned char 
  4374 ;;  gpio_ret        1    0        unsigned char 
  4375 ;; Return value:  Size  Location     Type
  4376 ;;                  1    wreg      unsigned char 
  4377 ;; Registers used:
  4378 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4379 ;; Tracked objects:
  4380 ;;		On entry : 0/0
  4381 ;;		On exit  : 0/0
  4382 ;;		Unchanged: 0/0
  4383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4384 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4385 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4386 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4387 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4388 ;;Total ram usage:        6 bytes
  4389 ;; Hardware stack levels used: 1
  4390 ;; Hardware stack levels required when called: 1
  4391 ;; This function calls:
  4392 ;;		_gpio_pin_logic_write
  4393 ;; This function is called by:
  4394 ;;		_lcd_send_command
  4395 ;;		_lcd_send_char_data
  4396 ;; This function uses a non-reentrant model
  4397 ;;
  4398                           
  4399                           	psect	text24
  4400   00EC86                     __ptext24:
  4401                           	callstack 0
  4402   00EC86                     _lcd_send_nbits:
  4403                           	callstack 25
  4404   00EC86                     
  4405                           ;ECUAL/LCD/lcd.c: 330:     uint8 pin_counter;;ECUAL/LCD/lcd.c: 331:     Std_ReturnType r
      +                          et=(Std_ReturnType)0x00;
  4406   00EC86  0E00               	movlw	0
  4407   00EC88  6E51               	movwf	lcd_send_nbits@ret^0,c
  4408                           
  4409                           ;ECUAL/LCD/lcd.c: 333:     for(pin_counter=0;pin_counter<n;pin_counter++){
  4410   00EC8A  0E00               	movlw	0
  4411   00EC8C  6E52               	movwf	lcd_send_nbits@pin_counter^0,c
  4412   00EC8E  EF5F  F076         	goto	l3297
  4413   00EC92                     l3293:
  4414   00EC92  504D               	movf	lcd_send_nbits@lcd^0,w,c
  4415   00EC94  2452               	addwf	lcd_send_nbits@pin_counter^0,w,c
  4416   00EC96  0F02               	addlw	2
  4417   00EC98  6E45               	movwf	gpio_pin_logic_write@pin^0,c
  4418   00EC9A  C052  F04F         	movff	lcd_send_nbits@pin_counter,??_lcd_send_nbits
  4419   00EC9E  C04E  F050         	movff	lcd_send_nbits@data_or_command,??_lcd_send_nbits+1
  4420   00ECA2  2A4F               	incf	??_lcd_send_nbits^0,f,c
  4421   00ECA4  EF56  F076         	goto	u2514
  4422   00ECA8                     u2515:
  4423   00ECA8  90D8               	bcf	status,0,c
  4424   00ECAA  3250               	rrcf	(??_lcd_send_nbits+1)^0,f,c
  4425   00ECAC                     u2514:
  4426   00ECAC  2E4F               	decfsz	??_lcd_send_nbits^0,f,c
  4427   00ECAE  EF54  F076         	goto	u2515
  4428   00ECB2  5050               	movf	(??_lcd_send_nbits+1)^0,w,c
  4429   00ECB4  0B01               	andlw	1
  4430   00ECB6  6E46               	movwf	gpio_pin_logic_write@pin_logic^0,c
  4431   00ECB8  ECD5  F07C         	call	_gpio_pin_logic_write	;wreg free
  4432   00ECBC                     
  4433                           ;ECUAL/LCD/lcd.c: 335:     }
  4434   00ECBC  2A52               	incf	lcd_send_nbits@pin_counter^0,f,c
  4435   00ECBE                     l3297:
  4436   00ECBE  0E03               	movlw	3
  4437   00ECC0  6452               	cpfsgt	lcd_send_nbits@pin_counter^0,c
  4438   00ECC2  EF65  F076         	goto	u2521
  4439   00ECC6  EF67  F076         	goto	u2520
  4440   00ECCA                     u2521:
  4441   00ECCA  EF49  F076         	goto	l3293
  4442   00ECCE                     u2520:
  4443   00ECCE                     
  4444                           ;ECUAL/LCD/lcd.c: 337:     return ret;
  4445   00ECCE  5051               	movf	lcd_send_nbits@ret^0,w,c
  4446   00ECD0  0012               	return		;funcret
  4447   00ECD2                     __end_of_lcd_send_nbits:
  4448                           	callstack 0
  4449                           
  4450 ;; *************** function _lcd_send_enable *****************
  4451 ;; Defined at:
  4452 ;;		line 340 in file "ECUAL/LCD/lcd.c"
  4453 ;; Parameters:    Size  Location     Type
  4454 ;;  lcd             1    8[COMRAM] PTR struct .
  4455 ;;		 -> lcd(6), 
  4456 ;; Auto vars:     Size  Location     Type
  4457 ;;  ret             1    0        unsigned char 
  4458 ;;  gpio_ret        1    9[COMRAM] unsigned char 
  4459 ;; Return value:  Size  Location     Type
  4460 ;;                  1    wreg      unsigned char 
  4461 ;; Registers used:
  4462 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4463 ;; Tracked objects:
  4464 ;;		On entry : 0/0
  4465 ;;		On exit  : 0/0
  4466 ;;		Unchanged: 0/0
  4467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4468 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4469 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4471 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4472 ;;Total ram usage:        2 bytes
  4473 ;; Hardware stack levels used: 1
  4474 ;; Hardware stack levels required when called: 1
  4475 ;; This function calls:
  4476 ;;		_gpio_pin_logic_write
  4477 ;; This function is called by:
  4478 ;;		_lcd_send_command
  4479 ;;		_lcd_send_char_data
  4480 ;; This function uses a non-reentrant model
  4481 ;;
  4482                           
  4483                           	psect	text25
  4484   00EB00                     __ptext25:
  4485                           	callstack 0
  4486   00EB00                     _lcd_send_enable:
  4487                           	callstack 25
  4488   00EB00                     
  4489                           ;ECUAL/LCD/lcd.c: 343:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  4490   00EB00  0E00               	movlw	0
  4491   00EB02  6E4E               	movwf	lcd_send_enable@gpio_ret^0,c
  4492   00EB04  284D               	incf	lcd_send_enable@lcd^0,w,c
  4493   00EB06  6E45               	movwf	gpio_pin_logic_write@pin^0,c
  4494   00EB08  0E01               	movlw	1
  4495   00EB0A  6E46               	movwf	gpio_pin_logic_write@pin_logic^0,c
  4496   00EB0C  ECD5  F07C         	call	_gpio_pin_logic_write	;wreg free
  4497   00EB10                     
  4498                           ;ECUAL/LCD/lcd.c: 345:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  4499   00EB10  0E03               	movlw	3
  4500   00EB12                     u3337:
  4501   00EB12  2EE8               	decfsz	wreg,f,c
  4502   00EB14  D7FE               	bra	u3337
  4503   00EB16  0000               	nop	
  4504   00EB18  284D               	incf	lcd_send_enable@lcd^0,w,c
  4505   00EB1A  6E45               	movwf	gpio_pin_logic_write@pin^0,c
  4506   00EB1C  0E00               	movlw	0
  4507   00EB1E  6E46               	movwf	gpio_pin_logic_write@pin_logic^0,c
  4508   00EB20  ECD5  F07C         	call	_gpio_pin_logic_write	;wreg free
  4509   00EB24                     
  4510                           ;ECUAL/LCD/lcd.c: 348:     return ret;
  4511   00EB24  0E00               	movlw	0
  4512   00EB26  0012               	return		;funcret
  4513   00EB28                     __end_of_lcd_send_enable:
  4514                           	callstack 0
  4515                           
  4516 ;; *************** function _keypad_init *****************
  4517 ;; Defined at:
  4518 ;;		line 23 in file "ECUAL/KEYPAD/keypad.c"
  4519 ;; Parameters:    Size  Location     Type
  4520 ;;  keypad          1   12[COMRAM] PTR struct .
  4521 ;;		 -> keypad(8), 
  4522 ;; Auto vars:     Size  Location     Type
  4523 ;;  column          1   16[COMRAM] unsigned char 
  4524 ;;  row             1   15[COMRAM] unsigned char 
  4525 ;;  ret             1   14[COMRAM] unsigned char 
  4526 ;;  gpio_ret        1   13[COMRAM] unsigned char 
  4527 ;; Return value:  Size  Location     Type
  4528 ;;                  1    wreg      unsigned char 
  4529 ;; Registers used:
  4530 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4531 ;; Tracked objects:
  4532 ;;		On entry : 0/0
  4533 ;;		On exit  : 0/0
  4534 ;;		Unchanged: 0/0
  4535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4536 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4537 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4539 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4540 ;;Total ram usage:        5 bytes
  4541 ;; Hardware stack levels used: 1
  4542 ;; Hardware stack levels required when called: 2
  4543 ;; This function calls:
  4544 ;;		_gpio_pin_input_init
  4545 ;;		_gpio_pin_output_low_init
  4546 ;; This function is called by:
  4547 ;;		_ecual_init
  4548 ;; This function uses a non-reentrant model
  4549 ;;
  4550                           
  4551                           	psect	text26
  4552   00EF0E                     __ptext26:
  4553                           	callstack 0
  4554   00EF0E                     _keypad_init:
  4555                           	callstack 26
  4556   00EF0E                     
  4557                           ;ECUAL/KEYPAD/keypad.c: 27:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  4558   00EF0E  0E00               	movlw	0
  4559   00EF10  6E52               	movwf	keypad_init@gpio_ret^0,c
  4560                           
  4561                           ;ECUAL/KEYPAD/keypad.c: 28:     if(((void*)0)==keypad){
  4562   00EF12  5051               	movf	keypad_init@keypad^0,w,c
  4563   00EF14  A4D8               	btfss	status,2,c
  4564   00EF16  EF8F  F077         	goto	u2661
  4565   00EF1A  EF91  F077         	goto	u2660
  4566   00EF1E                     u2661:
  4567   00EF1E  EF95  F077         	goto	l3437
  4568   00EF22                     u2660:
  4569   00EF22                     
  4570                           ;ECUAL/KEYPAD/keypad.c: 29:         ret=(Std_ReturnType)0x00;
  4571   00EF22  0E00               	movlw	0
  4572   00EF24  6E53               	movwf	keypad_init@ret^0,c
  4573                           
  4574                           ;ECUAL/KEYPAD/keypad.c: 30:     }
  4575   00EF26  EFB8  F077         	goto	l40
  4576   00EF2A                     l3437:
  4577                           
  4578                           ;ECUAL/KEYPAD/keypad.c: 32:         for(row=0;row<4;row++){
  4579   00EF2A  0E00               	movlw	0
  4580   00EF2C  6E54               	movwf	keypad_init@row^0,c
  4581   00EF2E                     l3443:
  4582   00EF2E  5051               	movf	keypad_init@keypad^0,w,c
  4583   00EF30  2454               	addwf	keypad_init@row^0,w,c
  4584   00EF32  6E4D               	movwf	gpio_pin_output_low_init@pin^0,c
  4585   00EF34  EC57  F077         	call	_gpio_pin_output_low_init	;wreg free
  4586   00EF38                     
  4587                           ;ECUAL/KEYPAD/keypad.c: 35:         }
  4588   00EF38  2A54               	incf	keypad_init@row^0,f,c
  4589   00EF3A  0E03               	movlw	3
  4590   00EF3C  6454               	cpfsgt	keypad_init@row^0,c
  4591   00EF3E  EFA3  F077         	goto	u2671
  4592   00EF42  EFA5  F077         	goto	u2670
  4593   00EF46                     u2671:
  4594   00EF46  EF97  F077         	goto	l3443
  4595   00EF4A                     u2670:
  4596   00EF4A                     
  4597                           ;ECUAL/KEYPAD/keypad.c: 36:         for(column=0;column<4;column++){
  4598   00EF4A  0E00               	movlw	0
  4599   00EF4C  6E55               	movwf	keypad_init@column^0,c
  4600   00EF4E                     l3455:
  4601   00EF4E  5051               	movf	keypad_init@keypad^0,w,c
  4602   00EF50  2455               	addwf	keypad_init@column^0,w,c
  4603   00EF52  0F04               	addlw	4
  4604   00EF54  6E4D               	movwf	gpio_pin_input_init@pin^0,c
  4605   00EF56  ECDD  F076         	call	_gpio_pin_input_init	;wreg free
  4606   00EF5A                     
  4607                           ;ECUAL/KEYPAD/keypad.c: 38:         }
  4608   00EF5A  2A55               	incf	keypad_init@column^0,f,c
  4609   00EF5C  0E03               	movlw	3
  4610   00EF5E  6455               	cpfsgt	keypad_init@column^0,c
  4611   00EF60  EFB4  F077         	goto	u2681
  4612   00EF64  EFB6  F077         	goto	u2680
  4613   00EF68                     u2681:
  4614   00EF68  EFA7  F077         	goto	l3455
  4615   00EF6C                     u2680:
  4616   00EF6C                     
  4617                           ;ECUAL/KEYPAD/keypad.c: 40:         ret=(Std_ReturnType)0x01;
  4618   00EF6C  0E01               	movlw	1
  4619   00EF6E  6E53               	movwf	keypad_init@ret^0,c
  4620   00EF70                     l40:
  4621                           
  4622                           ;ECUAL/KEYPAD/keypad.c: 43:     return ret;
  4623   00EF70  5053               	movf	keypad_init@ret^0,w,c
  4624   00EF72  0012               	return		;funcret
  4625   00EF74                     __end_of_keypad_init:
  4626                           	callstack 0
  4627                           
  4628 ;; *************** function _gpio_pin_input_init *****************
  4629 ;; Defined at:
  4630 ;;		line 211 in file "MCAL/GPIO/gpio.c"
  4631 ;; Parameters:    Size  Location     Type
  4632 ;;  pin             1    8[COMRAM] PTR struct .
  4633 ;;		 -> keypad$keypad_columns_pins(4), keypad(8), 
  4634 ;; Auto vars:     Size  Location     Type
  4635 ;;  ret             1   11[COMRAM] unsigned char 
  4636 ;;  gpio_ret        1   10[COMRAM] unsigned char 
  4637 ;; Return value:  Size  Location     Type
  4638 ;;                  1    wreg      unsigned char 
  4639 ;; Registers used:
  4640 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4641 ;; Tracked objects:
  4642 ;;		On entry : 0/0
  4643 ;;		On exit  : 0/0
  4644 ;;		Unchanged: 0/0
  4645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4646 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4647 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4648 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4649 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4650 ;;Total ram usage:        4 bytes
  4651 ;; Hardware stack levels used: 1
  4652 ;; Hardware stack levels required when called: 1
  4653 ;; This function calls:
  4654 ;;		_gpio_pin_direction_init
  4655 ;; This function is called by:
  4656 ;;		_keypad_init
  4657 ;; This function uses a non-reentrant model
  4658 ;;
  4659                           
  4660                           	psect	text27
  4661   00EDBA                     __ptext27:
  4662                           	callstack 0
  4663   00EDBA                     _gpio_pin_input_init:
  4664                           	callstack 26
  4665   00EDBA                     
  4666                           ;MCAL/GPIO/gpio.c: 214:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  4667   00EDBA  0E00               	movlw	0
  4668   00EDBC  6E4F               	movwf	gpio_pin_input_init@gpio_ret^0,c
  4669                           
  4670                           ;MCAL/GPIO/gpio.c: 215:     if(((void*)0)==pin || (pin->pin)>7){
  4671   00EDBE  504D               	movf	gpio_pin_input_init@pin^0,w,c
  4672   00EDC0  B4D8               	btfsc	status,2,c
  4673   00EDC2  EFE5  F076         	goto	u2621
  4674   00EDC6  EFE7  F076         	goto	u2620
  4675   00EDCA                     u2621:
  4676   00EDCA  EFF7  F076         	goto	l3373
  4677   00EDCE                     u2620:
  4678   00EDCE  504D               	movf	gpio_pin_input_init@pin^0,w,c
  4679   00EDD0  6ED9               	movwf	fsr2l,c
  4680   00EDD2  6ADA               	clrf	fsr2h,c
  4681   00EDD4  30DF               	rrcf	223,w,c
  4682   00EDD6  32E8               	rrcf	wreg,f,c
  4683   00EDD8  32E8               	rrcf	wreg,f,c
  4684   00EDDA  0B07               	andlw	7
  4685   00EDDC  6E4E               	movwf	??_gpio_pin_input_init^0,c
  4686   00EDDE  0E07               	movlw	7
  4687   00EDE0  644E               	cpfsgt	??_gpio_pin_input_init^0,c
  4688   00EDE2  EFF5  F076         	goto	u2631
  4689   00EDE6  EFF7  F076         	goto	u2630
  4690   00EDEA                     u2631:
  4691   00EDEA  EFFB  F076         	goto	l3375
  4692   00EDEE                     u2630:
  4693   00EDEE                     l3373:
  4694                           
  4695                           ;MCAL/GPIO/gpio.c: 216:         ret=(Std_ReturnType)0x00;
  4696   00EDEE  0E00               	movlw	0
  4697   00EDF0  6E50               	movwf	gpio_pin_input_init@ret^0,c
  4698                           
  4699                           ;MCAL/GPIO/gpio.c: 217:     }
  4700   00EDF2  EF03  F077         	goto	l3379
  4701   00EDF6                     l3375:
  4702   00EDF6  C04D  F045         	movff	gpio_pin_input_init@pin,gpio_pin_direction_init@pin
  4703   00EDFA  0E01               	movlw	1
  4704   00EDFC  6E46               	movwf	gpio_pin_direction_init@pin_direction^0,c
  4705   00EDFE  EC3B  F07C         	call	_gpio_pin_direction_init	;wreg free
  4706   00EE02                     
  4707                           ;MCAL/GPIO/gpio.c: 220:         ret=(Std_ReturnType)0x01;
  4708   00EE02  0E01               	movlw	1
  4709   00EE04  6E50               	movwf	gpio_pin_input_init@ret^0,c
  4710   00EE06                     l3379:
  4711                           
  4712                           ;MCAL/GPIO/gpio.c: 223:     return ret;
  4713   00EE06  5050               	movf	gpio_pin_input_init@ret^0,w,c
  4714   00EE08  0012               	return		;funcret
  4715   00EE0A                     __end_of_gpio_pin_input_init:
  4716                           	callstack 0
  4717                           
  4718 ;; *************** function _dc_motor_init *****************
  4719 ;; Defined at:
  4720 ;;		line 16 in file "ECUAL/DC_MOTOR/dc_motor.c"
  4721 ;; Parameters:    Size  Location     Type
  4722 ;;  dc_motor        1   12[COMRAM] PTR struct .
  4723 ;;		 -> motor2(3), motor1(3), 
  4724 ;; Auto vars:     Size  Location     Type
  4725 ;;  ret             1   14[COMRAM] unsigned char 
  4726 ;;  gpio_ret        1   13[COMRAM] unsigned char 
  4727 ;; Return value:  Size  Location     Type
  4728 ;;                  1    wreg      unsigned char 
  4729 ;; Registers used:
  4730 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4731 ;; Tracked objects:
  4732 ;;		On entry : 0/0
  4733 ;;		On exit  : 0/0
  4734 ;;		Unchanged: 0/0
  4735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4736 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4737 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4739 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4740 ;;Total ram usage:        3 bytes
  4741 ;; Hardware stack levels used: 1
  4742 ;; Hardware stack levels required when called: 2
  4743 ;; This function calls:
  4744 ;;		_gpio_pin_output_low_init
  4745 ;; This function is called by:
  4746 ;;		_ecual_init
  4747 ;; This function uses a non-reentrant model
  4748 ;;
  4749                           
  4750                           	psect	text28
  4751   00EB6A                     __ptext28:
  4752                           	callstack 0
  4753   00EB6A                     _dc_motor_init:
  4754                           	callstack 26
  4755   00EB6A                     
  4756                           ;ECUAL/DC_MOTOR/dc_motor.c: 19:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  4757   00EB6A  0E00               	movlw	0
  4758   00EB6C  6E52               	movwf	dc_motor_init@gpio_ret^0,c
  4759                           
  4760                           ;ECUAL/DC_MOTOR/dc_motor.c: 20:     if(((void*)0)==dc_motor){
  4761   00EB6E  5051               	movf	dc_motor_init@dc_motor^0,w,c
  4762   00EB70  A4D8               	btfss	status,2,c
  4763   00EB72  EFBD  F075         	goto	u2651
  4764   00EB76  EFBF  F075         	goto	u2650
  4765   00EB7A                     u2651:
  4766   00EB7A  EFC3  F075         	goto	l3423
  4767   00EB7E                     u2650:
  4768   00EB7E                     
  4769                           ;ECUAL/DC_MOTOR/dc_motor.c: 21:         ret=(Std_ReturnType)0x00;
  4770   00EB7E  0E00               	movlw	0
  4771   00EB80  6E53               	movwf	dc_motor_init@ret^0,c
  4772                           
  4773                           ;ECUAL/DC_MOTOR/dc_motor.c: 22:     }
  4774   00EB82  EFD5  F075         	goto	l3429
  4775   00EB86                     l3423:
  4776                           
  4777                           ;ECUAL/DC_MOTOR/dc_motor.c: 24:         gpio_ret=gpio_pin_output_low_init(&(dc_motor->dc
      +                          _motor_pin0));
  4778   00EB86  C051  F04D         	movff	dc_motor_init@dc_motor,gpio_pin_output_low_init@pin
  4779   00EB8A  EC57  F077         	call	_gpio_pin_output_low_init	;wreg free
  4780   00EB8E  6E52               	movwf	dc_motor_init@gpio_ret^0,c
  4781                           
  4782                           ;ECUAL/DC_MOTOR/dc_motor.c: 25:         gpio_ret=gpio_pin_output_low_init(&(dc_motor->dc
      +                          _motor_pin1));
  4783   00EB90  2851               	incf	dc_motor_init@dc_motor^0,w,c
  4784   00EB92  6E4D               	movwf	gpio_pin_output_low_init@pin^0,c
  4785   00EB94  EC57  F077         	call	_gpio_pin_output_low_init	;wreg free
  4786   00EB98  6E52               	movwf	dc_motor_init@gpio_ret^0,c
  4787   00EB9A                     
  4788                           ;ECUAL/DC_MOTOR/dc_motor.c: 26:         dc_motor->dc_motor_state=DC_MOTOR_OFF;
  4789   00EB9A  5051               	movf	dc_motor_init@dc_motor^0,w,c
  4790   00EB9C  6ED9               	movwf	fsr2l,c
  4791   00EB9E  6ADA               	clrf	fsr2h,c
  4792   00EBA0  0E02               	movlw	2
  4793   00EBA2  26D9               	addwf	fsr2l,f,c
  4794   00EBA4  6ADF               	clrf	indf2,c
  4795   00EBA6                     
  4796                           ;ECUAL/DC_MOTOR/dc_motor.c: 27:         ret=(Std_ReturnType)0x01;
  4797   00EBA6  0E01               	movlw	1
  4798   00EBA8  6E53               	movwf	dc_motor_init@ret^0,c
  4799   00EBAA                     l3429:
  4800                           
  4801                           ;ECUAL/DC_MOTOR/dc_motor.c: 30:     return ret;
  4802   00EBAA  5053               	movf	dc_motor_init@ret^0,w,c
  4803   00EBAC  0012               	return		;funcret
  4804   00EBAE                     __end_of_dc_motor_init:
  4805                           	callstack 0
  4806                           
  4807 ;; *************** function _gpio_pin_output_low_init *****************
  4808 ;; Defined at:
  4809 ;;		line 161 in file "MCAL/GPIO/gpio.c"
  4810 ;; Parameters:    Size  Location     Type
  4811 ;;  pin             1    8[COMRAM] PTR struct .
  4812 ;;		 -> lcd$lcd_pins(4), keypad$keypad_rows_pins(4), lcd(6), motor2(3), 
  4813 ;;		 -> motor2_led2(2), motor2_led1(2), motor1(3), motor1_led2(2), 
  4814 ;;		 -> motor1_led1(2), keypad(8), 
  4815 ;; Auto vars:     Size  Location     Type
  4816 ;;  ret             1   11[COMRAM] unsigned char 
  4817 ;;  gpio_ret        1   10[COMRAM] unsigned char 
  4818 ;; Return value:  Size  Location     Type
  4819 ;;                  1    wreg      unsigned char 
  4820 ;; Registers used:
  4821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4822 ;; Tracked objects:
  4823 ;;		On entry : 0/0
  4824 ;;		On exit  : 0/0
  4825 ;;		Unchanged: 0/0
  4826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4827 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4828 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4829 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4830 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4831 ;;Total ram usage:        4 bytes
  4832 ;; Hardware stack levels used: 1
  4833 ;; Hardware stack levels required when called: 1
  4834 ;; This function calls:
  4835 ;;		_gpio_pin_direction_init
  4836 ;;		_gpio_pin_logic_write
  4837 ;; This function is called by:
  4838 ;;		_dc_motor_init
  4839 ;;		_keypad_init
  4840 ;;		_lcd_init
  4841 ;;		_led_init
  4842 ;; This function uses a non-reentrant model
  4843 ;;
  4844                           
  4845                           	psect	text29
  4846   00EEAE                     __ptext29:
  4847                           	callstack 0
  4848   00EEAE                     _gpio_pin_output_low_init:
  4849                           	callstack 26
  4850   00EEAE                     
  4851                           ;MCAL/GPIO/gpio.c: 164:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  4852   00EEAE  0E00               	movlw	0
  4853   00EEB0  6E4F               	movwf	gpio_pin_output_low_init@gpio_ret^0,c
  4854                           
  4855                           ;MCAL/GPIO/gpio.c: 165:     if(((void*)0)==pin || (pin->pin)>7){
  4856   00EEB2  504D               	movf	gpio_pin_output_low_init@pin^0,w,c
  4857   00EEB4  B4D8               	btfsc	status,2,c
  4858   00EEB6  EF5F  F077         	goto	u2601
  4859   00EEBA  EF61  F077         	goto	u2600
  4860   00EEBE                     u2601:
  4861   00EEBE  EF71  F077         	goto	l3359
  4862   00EEC2                     u2600:
  4863   00EEC2  504D               	movf	gpio_pin_output_low_init@pin^0,w,c
  4864   00EEC4  6ED9               	movwf	fsr2l,c
  4865   00EEC6  6ADA               	clrf	fsr2h,c
  4866   00EEC8  30DF               	rrcf	223,w,c
  4867   00EECA  32E8               	rrcf	wreg,f,c
  4868   00EECC  32E8               	rrcf	wreg,f,c
  4869   00EECE  0B07               	andlw	7
  4870   00EED0  6E4E               	movwf	??_gpio_pin_output_low_init^0,c
  4871   00EED2  0E07               	movlw	7
  4872   00EED4  644E               	cpfsgt	??_gpio_pin_output_low_init^0,c
  4873   00EED6  EF6F  F077         	goto	u2611
  4874   00EEDA  EF71  F077         	goto	u2610
  4875   00EEDE                     u2611:
  4876   00EEDE  EF75  F077         	goto	l3361
  4877   00EEE2                     u2610:
  4878   00EEE2                     l3359:
  4879                           
  4880                           ;MCAL/GPIO/gpio.c: 166:         ret=(Std_ReturnType)0x00;
  4881   00EEE2  0E00               	movlw	0
  4882   00EEE4  6E50               	movwf	gpio_pin_output_low_init@ret^0,c
  4883                           
  4884                           ;MCAL/GPIO/gpio.c: 167:     }
  4885   00EEE6  EF85  F077         	goto	l3365
  4886   00EEEA                     l3361:
  4887                           
  4888                           ;MCAL/GPIO/gpio.c: 169:         gpio_ret=gpio_pin_direction_init(pin,OUTPUT);
  4889   00EEEA  C04D  F045         	movff	gpio_pin_output_low_init@pin,gpio_pin_direction_init@pin
  4890   00EEEE  0E00               	movlw	0
  4891   00EEF0  6E46               	movwf	gpio_pin_direction_init@pin_direction^0,c
  4892   00EEF2  EC3B  F07C         	call	_gpio_pin_direction_init	;wreg free
  4893   00EEF6  6E4F               	movwf	gpio_pin_output_low_init@gpio_ret^0,c
  4894                           
  4895                           ;MCAL/GPIO/gpio.c: 170:         gpio_ret=gpio_pin_logic_write(pin,LOW);
  4896   00EEF8  C04D  F045         	movff	gpio_pin_output_low_init@pin,gpio_pin_logic_write@pin
  4897   00EEFC  0E00               	movlw	0
  4898   00EEFE  6E46               	movwf	gpio_pin_logic_write@pin_logic^0,c
  4899   00EF00  ECD5  F07C         	call	_gpio_pin_logic_write	;wreg free
  4900   00EF04  6E4F               	movwf	gpio_pin_output_low_init@gpio_ret^0,c
  4901   00EF06                     
  4902                           ;MCAL/GPIO/gpio.c: 171:         ret=(Std_ReturnType)0x01;
  4903   00EF06  0E01               	movlw	1
  4904   00EF08  6E50               	movwf	gpio_pin_output_low_init@ret^0,c
  4905   00EF0A                     l3365:
  4906                           
  4907                           ;MCAL/GPIO/gpio.c: 174:     return ret;
  4908   00EF0A  5050               	movf	gpio_pin_output_low_init@ret^0,w,c
  4909   00EF0C  0012               	return		;funcret
  4910   00EF0E                     __end_of_gpio_pin_output_low_init:
  4911                           	callstack 0
  4912                           
  4913 ;; *************** function _gpio_pin_logic_write *****************
  4914 ;; Defined at:
  4915 ;;		line 81 in file "MCAL/GPIO/gpio.c"
  4916 ;; Parameters:    Size  Location     Type
  4917 ;;  pin             1    0[COMRAM] PTR struct .
  4918 ;;		 -> lcd$lcd_pins(4), keypad$keypad_rows_pins(4), lcd(6), motor2(3), 
  4919 ;;		 -> motor2_led2(2), motor2_led1(2), motor1(3), motor1_led2(2), 
  4920 ;;		 -> motor1_led1(2), keypad(8), 
  4921 ;;  pin_logic       1    1[COMRAM] enum E2978
  4922 ;; Auto vars:     Size  Location     Type
  4923 ;;  ret             1    7[COMRAM] unsigned char 
  4924 ;; Return value:  Size  Location     Type
  4925 ;;                  1    wreg      unsigned char 
  4926 ;; Registers used:
  4927 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4928 ;; Tracked objects:
  4929 ;;		On entry : 0/0
  4930 ;;		On exit  : 0/0
  4931 ;;		Unchanged: 0/0
  4932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4933 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4934 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4935 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4936 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4937 ;;Total ram usage:        8 bytes
  4938 ;; Hardware stack levels used: 1
  4939 ;; This function calls:
  4940 ;;		Nothing
  4941 ;; This function is called by:
  4942 ;;		_dc_motor_move_right
  4943 ;;		_dc_motor_move_left
  4944 ;;		_dc_motor_stop
  4945 ;;		_keypad_read
  4946 ;;		_lcd_send_command
  4947 ;;		_lcd_send_char_data
  4948 ;;		_lcd_send_nbits
  4949 ;;		_lcd_send_enable
  4950 ;;		_led_on
  4951 ;;		_led_off
  4952 ;;		_gpio_pin_output_low_init
  4953 ;;		_gpio_pin_output_high_init
  4954 ;; This function uses a non-reentrant model
  4955 ;;
  4956                           
  4957                           	psect	text30
  4958   00F9AA                     __ptext30:
  4959                           	callstack 0
  4960   00F9AA                     _gpio_pin_logic_write:
  4961                           	callstack 25
  4962   00F9AA                     
  4963                           ;MCAL/GPIO/gpio.c: 84:     if(((void*)0)==pin ||(pin->pin)>7 || pin_logic>1){
  4964   00F9AA  5045               	movf	gpio_pin_logic_write@pin^0,w,c
  4965   00F9AC  B4D8               	btfsc	status,2,c
  4966   00F9AE  EFDB  F07C         	goto	u2451
  4967   00F9B2  EFDD  F07C         	goto	u2450
  4968   00F9B6                     u2451:
  4969   00F9B6  EFF5  F07C         	goto	l3269
  4970   00F9BA                     u2450:
  4971   00F9BA  5045               	movf	gpio_pin_logic_write@pin^0,w,c
  4972   00F9BC  6ED9               	movwf	fsr2l,c
  4973   00F9BE  6ADA               	clrf	fsr2h,c
  4974   00F9C0  30DF               	rrcf	223,w,c
  4975   00F9C2  32E8               	rrcf	wreg,f,c
  4976   00F9C4  32E8               	rrcf	wreg,f,c
  4977   00F9C6  0B07               	andlw	7
  4978   00F9C8  6E47               	movwf	??_gpio_pin_logic_write^0,c
  4979   00F9CA  0E08               	movlw	8
  4980   00F9CC  6047               	cpfslt	??_gpio_pin_logic_write^0,c
  4981   00F9CE  EFEB  F07C         	goto	u2461
  4982   00F9D2  EFED  F07C         	goto	u2460
  4983   00F9D6                     u2461:
  4984   00F9D6  EFF5  F07C         	goto	l3269
  4985   00F9DA                     u2460:
  4986   00F9DA  0E01               	movlw	1
  4987   00F9DC  6446               	cpfsgt	gpio_pin_logic_write@pin_logic^0,c
  4988   00F9DE  EFF3  F07C         	goto	u2471
  4989   00F9E2  EFF5  F07C         	goto	u2470
  4990   00F9E6                     u2471:
  4991   00F9E6  EF4E  F07D         	goto	l3277
  4992   00F9EA                     u2470:
  4993   00F9EA                     l3269:
  4994                           
  4995                           ;MCAL/GPIO/gpio.c: 85:         ret=(Std_ReturnType)0x00;
  4996   00F9EA  0E00               	movlw	0
  4997   00F9EC  6E4C               	movwf	gpio_pin_logic_write@ret^0,c
  4998                           
  4999                           ;MCAL/GPIO/gpio.c: 86:     }
  5000   00F9EE  EF6D  F07D         	goto	l3283
  5001   00F9F2                     l3271:
  5002                           
  5003                           ;MCAL/GPIO/gpio.c: 90:                 (*latx[pin->port] &= ~((uint8)1<<pin->pin));
  5004   00F9F2  5045               	movf	gpio_pin_logic_write@pin^0,w,c
  5005   00F9F4  6ED9               	movwf	fsr2l,c
  5006   00F9F6  6ADA               	clrf	fsr2h,c
  5007   00F9F8  30DF               	rrcf	223,w,c
  5008   00F9FA  32E8               	rrcf	wreg,f,c
  5009   00F9FC  32E8               	rrcf	wreg,f,c
  5010   00F9FE  0B07               	andlw	7
  5011   00FA00  6E47               	movwf	??_gpio_pin_logic_write^0,c
  5012   00FA02  0E01               	movlw	1
  5013   00FA04  6E48               	movwf	(??_gpio_pin_logic_write+1)^0,c
  5014   00FA06  2A47               	incf	??_gpio_pin_logic_write^0,f,c
  5015   00FA08  EF08  F07D         	goto	u2484
  5016   00FA0C                     u2485:
  5017   00FA0C  90D8               	bcf	status,0,c
  5018   00FA0E  3648               	rlcf	(??_gpio_pin_logic_write+1)^0,f,c
  5019   00FA10                     u2484:
  5020   00FA10  2E47               	decfsz	??_gpio_pin_logic_write^0,f,c
  5021   00FA12  EF06  F07D         	goto	u2485
  5022   00FA16  5048               	movf	(??_gpio_pin_logic_write+1)^0,w,c
  5023   00FA18  0AFF               	xorlw	255
  5024   00FA1A  6E49               	movwf	(??_gpio_pin_logic_write+2)^0,c
  5025   00FA1C  5045               	movf	gpio_pin_logic_write@pin^0,w,c
  5026   00FA1E  6ED9               	movwf	fsr2l,c
  5027   00FA20  6ADA               	clrf	fsr2h,c
  5028   00FA22  50DF               	movf	223,w,c
  5029   00FA24  0B07               	andlw	7
  5030   00FA26  0D02               	mullw	2
  5031   00FA28  50F3               	movf	243,w,c
  5032   00FA2A  0F0B               	addlw	low _latx
  5033   00FA2C  6ED9               	movwf	fsr2l,c
  5034   00FA2E  6ADA               	clrf	fsr2h,c
  5035   00FA30  CFDE F04A          	movff	postinc2,??_gpio_pin_logic_write+3
  5036   00FA34  CFDD F04B          	movff	postdec2,??_gpio_pin_logic_write+4
  5037   00FA38  C04A  FFD9         	movff	??_gpio_pin_logic_write+3,fsr2l
  5038   00FA3C  C04B  FFDA         	movff	??_gpio_pin_logic_write+4,fsr2h
  5039   00FA40  5049               	movf	(??_gpio_pin_logic_write+2)^0,w,c
  5040   00FA42  16DF               	andwf	indf2,f,c
  5041                           
  5042                           ;MCAL/GPIO/gpio.c: 91:                 break;
  5043   00FA44  EF63  F07D         	goto	l3279
  5044   00FA48                     l3273:
  5045                           
  5046                           ;MCAL/GPIO/gpio.c: 94:                 (*latx[pin->port] |= ((uint8)1<<pin->pin));
  5047   00FA48  5045               	movf	gpio_pin_logic_write@pin^0,w,c
  5048   00FA4A  6ED9               	movwf	fsr2l,c
  5049   00FA4C  6ADA               	clrf	fsr2h,c
  5050   00FA4E  30DF               	rrcf	223,w,c
  5051   00FA50  32E8               	rrcf	wreg,f,c
  5052   00FA52  32E8               	rrcf	wreg,f,c
  5053   00FA54  0B07               	andlw	7
  5054   00FA56  6E47               	movwf	??_gpio_pin_logic_write^0,c
  5055   00FA58  0E01               	movlw	1
  5056   00FA5A  6E48               	movwf	(??_gpio_pin_logic_write+1)^0,c
  5057   00FA5C  2A47               	incf	??_gpio_pin_logic_write^0,f,c
  5058   00FA5E  EF33  F07D         	goto	u2494
  5059   00FA62                     u2495:
  5060   00FA62  90D8               	bcf	status,0,c
  5061   00FA64  3648               	rlcf	(??_gpio_pin_logic_write+1)^0,f,c
  5062   00FA66                     u2494:
  5063   00FA66  2E47               	decfsz	??_gpio_pin_logic_write^0,f,c
  5064   00FA68  EF31  F07D         	goto	u2495
  5065   00FA6C  5045               	movf	gpio_pin_logic_write@pin^0,w,c
  5066   00FA6E  6ED9               	movwf	fsr2l,c
  5067   00FA70  6ADA               	clrf	fsr2h,c
  5068   00FA72  50DF               	movf	223,w,c
  5069   00FA74  0B07               	andlw	7
  5070   00FA76  0D02               	mullw	2
  5071   00FA78  50F3               	movf	243,w,c
  5072   00FA7A  0F0B               	addlw	low _latx
  5073   00FA7C  6ED9               	movwf	fsr2l,c
  5074   00FA7E  6ADA               	clrf	fsr2h,c
  5075   00FA80  CFDE F049          	movff	postinc2,??_gpio_pin_logic_write+2
  5076   00FA84  CFDD F04A          	movff	postdec2,??_gpio_pin_logic_write+3
  5077   00FA88  C049  FFD9         	movff	??_gpio_pin_logic_write+2,fsr2l
  5078   00FA8C  C04A  FFDA         	movff	??_gpio_pin_logic_write+3,fsr2h
  5079   00FA90  5048               	movf	(??_gpio_pin_logic_write+1)^0,w,c
  5080   00FA92  12DF               	iorwf	indf2,f,c
  5081                           
  5082                           ;MCAL/GPIO/gpio.c: 95:                 break;
  5083   00FA94  EF63  F07D         	goto	l3279
  5084   00FA98                     l3275:
  5085                           
  5086                           ;MCAL/GPIO/gpio.c: 99:         }
  5087   00FA98  EF63  F07D         	goto	l3279
  5088   00FA9C                     l3277:
  5089   00FA9C  5046               	movf	gpio_pin_logic_write@pin_logic^0,w,c
  5090   00FA9E  6E47               	movwf	??_gpio_pin_logic_write^0,c
  5091   00FAA0  6A48               	clrf	(??_gpio_pin_logic_write+1)^0,c
  5092                           
  5093                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5094                           ; Switch size 1, requested type "simple"
  5095                           ; Number of cases is 1, Range of values is 0 to 0
  5096                           ; switch strategies available:
  5097                           ; Name         Instructions Cycles
  5098                           ; simple_byte            4     3 (average)
  5099                           ;	Chosen strategy is simple_byte
  5100   00FAA2  5048               	movf	(??_gpio_pin_logic_write+1)^0,w,c
  5101   00FAA4  0A00               	xorlw	0	; case 0
  5102   00FAA6  B4D8               	btfsc	status,2,c
  5103   00FAA8  EF58  F07D         	goto	l3987
  5104   00FAAC  EF4C  F07D         	goto	l3275
  5105   00FAB0                     l3987:
  5106                           
  5107                           ; Switch size 1, requested type "simple"
  5108                           ; Number of cases is 2, Range of values is 0 to 1
  5109                           ; switch strategies available:
  5110                           ; Name         Instructions Cycles
  5111                           ; simple_byte            7     4 (average)
  5112                           ;	Chosen strategy is simple_byte
  5113   00FAB0  5047               	movf	??_gpio_pin_logic_write^0,w,c
  5114   00FAB2  0A00               	xorlw	0	; case 0
  5115   00FAB4  B4D8               	btfsc	status,2,c
  5116   00FAB6  EFF9  F07C         	goto	l3271
  5117   00FABA  0A01               	xorlw	1	; case 1
  5118   00FABC  B4D8               	btfsc	status,2,c
  5119   00FABE  EF24  F07D         	goto	l3273
  5120   00FAC2  EF4C  F07D         	goto	l3275
  5121   00FAC6                     l3279:
  5122                           
  5123                           ;MCAL/GPIO/gpio.c: 100:         pin->logic=pin_logic;
  5124   00FAC6  5045               	movf	gpio_pin_logic_write@pin^0,w,c
  5125   00FAC8  6ED9               	movwf	fsr2l,c
  5126   00FACA  6ADA               	clrf	fsr2h,c
  5127   00FACC  B046               	btfsc	gpio_pin_logic_write@pin_logic^0,0,c
  5128   00FACE  D002               	bra	u2505
  5129   00FAD0  9EDF               	bcf	indf2,7,c
  5130   00FAD2  D001               	bra	u2506
  5131   00FAD4                     u2505:
  5132   00FAD4  8EDF               	bsf	indf2,7,c
  5133   00FAD6                     u2506:
  5134   00FAD6                     
  5135                           ;MCAL/GPIO/gpio.c: 101:         ret=(Std_ReturnType)0x01;
  5136   00FAD6  0E01               	movlw	1
  5137   00FAD8  6E4C               	movwf	gpio_pin_logic_write@ret^0,c
  5138   00FADA                     l3283:
  5139                           
  5140                           ;MCAL/GPIO/gpio.c: 104:     return ret;
  5141   00FADA  504C               	movf	gpio_pin_logic_write@ret^0,w,c
  5142   00FADC  0012               	return		;funcret
  5143   00FADE                     __end_of_gpio_pin_logic_write:
  5144                           	callstack 0
  5145                           
  5146 ;; *************** function _gpio_pin_direction_init *****************
  5147 ;; Defined at:
  5148 ;;		line 23 in file "MCAL/GPIO/gpio.c"
  5149 ;; Parameters:    Size  Location     Type
  5150 ;;  pin             1    0[COMRAM] PTR struct .
  5151 ;;		 -> lcd$lcd_pins(4), keypad$keypad_columns_pins(4), keypad$keypad_rows_pins(4), lcd(6), 
  5152 ;;		 -> motor2(3), motor2_led2(2), motor2_led1(2), motor1(3), 
  5153 ;;		 -> motor1_led2(2), motor1_led1(2), keypad(8), 
  5154 ;;  pin_directio    1    1[COMRAM] enum E2982
  5155 ;; Auto vars:     Size  Location     Type
  5156 ;;  ret             1    7[COMRAM] unsigned char 
  5157 ;; Return value:  Size  Location     Type
  5158 ;;                  1    wreg      unsigned char 
  5159 ;; Registers used:
  5160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5161 ;; Tracked objects:
  5162 ;;		On entry : 0/0
  5163 ;;		On exit  : 0/0
  5164 ;;		Unchanged: 0/0
  5165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5166 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5167 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5168 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5169 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5170 ;;Total ram usage:        8 bytes
  5171 ;; Hardware stack levels used: 1
  5172 ;; This function calls:
  5173 ;;		Nothing
  5174 ;; This function is called by:
  5175 ;;		_gpio_pin_output_low_init
  5176 ;;		_gpio_pin_input_init
  5177 ;;		_gpio_pin_output_high_init
  5178 ;; This function uses a non-reentrant model
  5179 ;;
  5180                           
  5181                           	psect	text31
  5182   00F876                     __ptext31:
  5183                           	callstack 0
  5184   00F876                     _gpio_pin_direction_init:
  5185                           	callstack 26
  5186   00F876                     
  5187                           ;MCAL/GPIO/gpio.c: 26:     if(((void*)0)==pin || (pin->pin)>7 || pin_direction>1){
  5188   00F876  5045               	movf	gpio_pin_direction_init@pin^0,w,c
  5189   00F878  B4D8               	btfsc	status,2,c
  5190   00F87A  EF41  F07C         	goto	u2541
  5191   00F87E  EF43  F07C         	goto	u2540
  5192   00F882                     u2541:
  5193   00F882  EF5B  F07C         	goto	l3333
  5194   00F886                     u2540:
  5195   00F886  5045               	movf	gpio_pin_direction_init@pin^0,w,c
  5196   00F888  6ED9               	movwf	fsr2l,c
  5197   00F88A  6ADA               	clrf	fsr2h,c
  5198   00F88C  30DF               	rrcf	223,w,c
  5199   00F88E  32E8               	rrcf	wreg,f,c
  5200   00F890  32E8               	rrcf	wreg,f,c
  5201   00F892  0B07               	andlw	7
  5202   00F894  6E47               	movwf	??_gpio_pin_direction_init^0,c
  5203   00F896  0E08               	movlw	8
  5204   00F898  6047               	cpfslt	??_gpio_pin_direction_init^0,c
  5205   00F89A  EF51  F07C         	goto	u2551
  5206   00F89E  EF53  F07C         	goto	u2550
  5207   00F8A2                     u2551:
  5208   00F8A2  EF5B  F07C         	goto	l3333
  5209   00F8A6                     u2550:
  5210   00F8A6  0E01               	movlw	1
  5211   00F8A8  6446               	cpfsgt	gpio_pin_direction_init@pin_direction^0,c
  5212   00F8AA  EF59  F07C         	goto	u2561
  5213   00F8AE  EF5B  F07C         	goto	u2560
  5214   00F8B2                     u2561:
  5215   00F8B2  EFB4  F07C         	goto	l3341
  5216   00F8B6                     u2560:
  5217   00F8B6                     l3333:
  5218                           
  5219                           ;MCAL/GPIO/gpio.c: 27:         ret=(Std_ReturnType)0x00;
  5220   00F8B6  0E00               	movlw	0
  5221   00F8B8  6E4C               	movwf	gpio_pin_direction_init@ret^0,c
  5222                           
  5223                           ;MCAL/GPIO/gpio.c: 28:     }
  5224   00F8BA  EFD3  F07C         	goto	l3347
  5225   00F8BE                     l3335:
  5226                           
  5227                           ;MCAL/GPIO/gpio.c: 32:                 (*trisx[pin->port] &= ~((uint8)1<<pin->pin));
  5228   00F8BE  5045               	movf	gpio_pin_direction_init@pin^0,w,c
  5229   00F8C0  6ED9               	movwf	fsr2l,c
  5230   00F8C2  6ADA               	clrf	fsr2h,c
  5231   00F8C4  30DF               	rrcf	223,w,c
  5232   00F8C6  32E8               	rrcf	wreg,f,c
  5233   00F8C8  32E8               	rrcf	wreg,f,c
  5234   00F8CA  0B07               	andlw	7
  5235   00F8CC  6E47               	movwf	??_gpio_pin_direction_init^0,c
  5236   00F8CE  0E01               	movlw	1
  5237   00F8D0  6E48               	movwf	(??_gpio_pin_direction_init+1)^0,c
  5238   00F8D2  2A47               	incf	??_gpio_pin_direction_init^0,f,c
  5239   00F8D4  EF6E  F07C         	goto	u2574
  5240   00F8D8                     u2575:
  5241   00F8D8  90D8               	bcf	status,0,c
  5242   00F8DA  3648               	rlcf	(??_gpio_pin_direction_init+1)^0,f,c
  5243   00F8DC                     u2574:
  5244   00F8DC  2E47               	decfsz	??_gpio_pin_direction_init^0,f,c
  5245   00F8DE  EF6C  F07C         	goto	u2575
  5246   00F8E2  5048               	movf	(??_gpio_pin_direction_init+1)^0,w,c
  5247   00F8E4  0AFF               	xorlw	255
  5248   00F8E6  6E49               	movwf	(??_gpio_pin_direction_init+2)^0,c
  5249   00F8E8  5045               	movf	gpio_pin_direction_init@pin^0,w,c
  5250   00F8EA  6ED9               	movwf	fsr2l,c
  5251   00F8EC  6ADA               	clrf	fsr2h,c
  5252   00F8EE  50DF               	movf	223,w,c
  5253   00F8F0  0B07               	andlw	7
  5254   00F8F2  0D02               	mullw	2
  5255   00F8F4  50F3               	movf	243,w,c
  5256   00F8F6  0F15               	addlw	low _trisx
  5257   00F8F8  6ED9               	movwf	fsr2l,c
  5258   00F8FA  6ADA               	clrf	fsr2h,c
  5259   00F8FC  CFDE F04A          	movff	postinc2,??_gpio_pin_direction_init+3
  5260   00F900  CFDD F04B          	movff	postdec2,??_gpio_pin_direction_init+4
  5261   00F904  C04A  FFD9         	movff	??_gpio_pin_direction_init+3,fsr2l
  5262   00F908  C04B  FFDA         	movff	??_gpio_pin_direction_init+4,fsr2h
  5263   00F90C  5049               	movf	(??_gpio_pin_direction_init+2)^0,w,c
  5264   00F90E  16DF               	andwf	indf2,f,c
  5265                           
  5266                           ;MCAL/GPIO/gpio.c: 33:                 break;
  5267   00F910  EFC9  F07C         	goto	l3343
  5268   00F914                     l3337:
  5269                           
  5270                           ;MCAL/GPIO/gpio.c: 36:                 (*trisx[pin->port] |= ((uint8)1<<pin->pin));
  5271   00F914  5045               	movf	gpio_pin_direction_init@pin^0,w,c
  5272   00F916  6ED9               	movwf	fsr2l,c
  5273   00F918  6ADA               	clrf	fsr2h,c
  5274   00F91A  30DF               	rrcf	223,w,c
  5275   00F91C  32E8               	rrcf	wreg,f,c
  5276   00F91E  32E8               	rrcf	wreg,f,c
  5277   00F920  0B07               	andlw	7
  5278   00F922  6E47               	movwf	??_gpio_pin_direction_init^0,c
  5279   00F924  0E01               	movlw	1
  5280   00F926  6E48               	movwf	(??_gpio_pin_direction_init+1)^0,c
  5281   00F928  2A47               	incf	??_gpio_pin_direction_init^0,f,c
  5282   00F92A  EF99  F07C         	goto	u2584
  5283   00F92E                     u2585:
  5284   00F92E  90D8               	bcf	status,0,c
  5285   00F930  3648               	rlcf	(??_gpio_pin_direction_init+1)^0,f,c
  5286   00F932                     u2584:
  5287   00F932  2E47               	decfsz	??_gpio_pin_direction_init^0,f,c
  5288   00F934  EF97  F07C         	goto	u2585
  5289   00F938  5045               	movf	gpio_pin_direction_init@pin^0,w,c
  5290   00F93A  6ED9               	movwf	fsr2l,c
  5291   00F93C  6ADA               	clrf	fsr2h,c
  5292   00F93E  50DF               	movf	223,w,c
  5293   00F940  0B07               	andlw	7
  5294   00F942  0D02               	mullw	2
  5295   00F944  50F3               	movf	243,w,c
  5296   00F946  0F15               	addlw	low _trisx
  5297   00F948  6ED9               	movwf	fsr2l,c
  5298   00F94A  6ADA               	clrf	fsr2h,c
  5299   00F94C  CFDE F049          	movff	postinc2,??_gpio_pin_direction_init+2
  5300   00F950  CFDD F04A          	movff	postdec2,??_gpio_pin_direction_init+3
  5301   00F954  C049  FFD9         	movff	??_gpio_pin_direction_init+2,fsr2l
  5302   00F958  C04A  FFDA         	movff	??_gpio_pin_direction_init+3,fsr2h
  5303   00F95C  5048               	movf	(??_gpio_pin_direction_init+1)^0,w,c
  5304   00F95E  12DF               	iorwf	indf2,f,c
  5305                           
  5306                           ;MCAL/GPIO/gpio.c: 37:                 break;
  5307   00F960  EFC9  F07C         	goto	l3343
  5308   00F964                     l3339:
  5309                           
  5310                           ;MCAL/GPIO/gpio.c: 41:         }
  5311   00F964  EFC9  F07C         	goto	l3343
  5312   00F968                     l3341:
  5313   00F968  5046               	movf	gpio_pin_direction_init@pin_direction^0,w,c
  5314   00F96A  6E47               	movwf	??_gpio_pin_direction_init^0,c
  5315   00F96C  6A48               	clrf	(??_gpio_pin_direction_init+1)^0,c
  5316                           
  5317                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5318                           ; Switch size 1, requested type "simple"
  5319                           ; Number of cases is 1, Range of values is 0 to 0
  5320                           ; switch strategies available:
  5321                           ; Name         Instructions Cycles
  5322                           ; simple_byte            4     3 (average)
  5323                           ;	Chosen strategy is simple_byte
  5324   00F96E  5048               	movf	(??_gpio_pin_direction_init+1)^0,w,c
  5325   00F970  0A00               	xorlw	0	; case 0
  5326   00F972  B4D8               	btfsc	status,2,c
  5327   00F974  EFBE  F07C         	goto	l3989
  5328   00F978  EFB2  F07C         	goto	l3339
  5329   00F97C                     l3989:
  5330                           
  5331                           ; Switch size 1, requested type "simple"
  5332                           ; Number of cases is 2, Range of values is 0 to 1
  5333                           ; switch strategies available:
  5334                           ; Name         Instructions Cycles
  5335                           ; simple_byte            7     4 (average)
  5336                           ;	Chosen strategy is simple_byte
  5337   00F97C  5047               	movf	??_gpio_pin_direction_init^0,w,c
  5338   00F97E  0A00               	xorlw	0	; case 0
  5339   00F980  B4D8               	btfsc	status,2,c
  5340   00F982  EF5F  F07C         	goto	l3335
  5341   00F986  0A01               	xorlw	1	; case 1
  5342   00F988  B4D8               	btfsc	status,2,c
  5343   00F98A  EF8A  F07C         	goto	l3337
  5344   00F98E  EFB2  F07C         	goto	l3339
  5345   00F992                     l3343:
  5346                           
  5347                           ;MCAL/GPIO/gpio.c: 42:         pin->direction=pin_direction;
  5348   00F992  5045               	movf	gpio_pin_direction_init@pin^0,w,c
  5349   00F994  6ED9               	movwf	fsr2l,c
  5350   00F996  6ADA               	clrf	fsr2h,c
  5351   00F998  B046               	btfsc	gpio_pin_direction_init@pin_direction^0,0,c
  5352   00F99A  D002               	bra	u2595
  5353   00F99C  9CDF               	bcf	indf2,6,c
  5354   00F99E  D001               	bra	u2596
  5355   00F9A0                     u2595:
  5356   00F9A0  8CDF               	bsf	indf2,6,c
  5357   00F9A2                     u2596:
  5358   00F9A2                     
  5359                           ;MCAL/GPIO/gpio.c: 43:         ret=(Std_ReturnType)0x01;
  5360   00F9A2  0E01               	movlw	1
  5361   00F9A4  6E4C               	movwf	gpio_pin_direction_init@ret^0,c
  5362   00F9A6                     l3347:
  5363                           
  5364                           ;MCAL/GPIO/gpio.c: 46:     return ret;
  5365   00F9A6  504C               	movf	gpio_pin_direction_init@ret^0,w,c
  5366   00F9A8  0012               	return		;funcret
  5367   00F9AA                     __end_of_gpio_pin_direction_init:
  5368                           	callstack 0
  5369                           
  5370                           	psect	rparam
  5371   000000                     
  5372                           	psect	config
  5373                           
  5374                           ; Padding undefined space
  5375   300000                     	org	3145728
  5376   300000  FF                 	db	255
  5377                           
  5378                           ;Config register CONFIG1H @ 0x300001
  5379                           ;	Oscillator Selection bits
  5380                           ;	OSC = HS, HS oscillator
  5381                           ;	Fail-Safe Clock Monitor Enable bit
  5382                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  5383                           ;	Internal/External Oscillator Switchover bit
  5384                           ;	IESO = OFF, Oscillator Switchover mode disabled
  5385   300001                     	org	3145729
  5386   300001  02                 	db	2
  5387                           
  5388                           ;Config register CONFIG2L @ 0x300002
  5389                           ;	Power-up Timer Enable bit
  5390                           ;	PWRT = OFF, PWRT disabled
  5391                           ;	Brown-out Reset Enable bits
  5392                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  5393                           ;	Brown Out Reset Voltage bits
  5394                           ;	BORV = 1, 
  5395   300002                     	org	3145730
  5396   300002  09                 	db	9
  5397                           
  5398                           ;Config register CONFIG2H @ 0x300003
  5399                           ;	Watchdog Timer Enable bit
  5400                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  5401                           ;	Watchdog Timer Postscale Select bits
  5402                           ;	WDTPS = 32768, 1:32768
  5403   300003                     	org	3145731
  5404   300003  1E                 	db	30
  5405                           
  5406                           ; Padding undefined space
  5407   300004                     	org	3145732
  5408   300004  FF                 	db	255
  5409                           
  5410                           ;Config register CONFIG3H @ 0x300005
  5411                           ;	CCP2 MUX bit
  5412                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  5413                           ;	PORTB A/D Enable bit
  5414                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  5415                           ;	Low-Power Timer1 Oscillator Enable bit
  5416                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  5417                           ;	MCLR Pin Enable bit
  5418                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  5419   300005                     	org	3145733
  5420   300005  81                 	db	129
  5421                           
  5422                           ;Config register CONFIG4L @ 0x300006
  5423                           ;	Stack Full/Underflow Reset Enable bit
  5424                           ;	STVREN = ON, Stack full/underflow will cause Reset
  5425                           ;	Single-Supply ICSP Enable bit
  5426                           ;	LVP = OFF, Single-Supply ICSP disabled
  5427                           ;	Extended Instruction Set Enable bit
  5428                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  5429                           ;	Background Debugger Enable bit
  5430                           ;	DEBUG = 0x1, unprogrammed default
  5431   300006                     	org	3145734
  5432   300006  81                 	db	129
  5433                           
  5434                           ; Padding undefined space
  5435   300007                     	org	3145735
  5436   300007  FF                 	db	255
  5437                           
  5438                           ;Config register CONFIG5L @ 0x300008
  5439                           ;	Code Protection bit
  5440                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  5441                           ;	Code Protection bit
  5442                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  5443                           ;	Code Protection bit
  5444                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  5445                           ;	Code Protection bit
  5446                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  5447   300008                     	org	3145736
  5448   300008  0F                 	db	15
  5449                           
  5450                           ;Config register CONFIG5H @ 0x300009
  5451                           ;	Boot Block Code Protection bit
  5452                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  5453                           ;	Data EEPROM Code Protection bit
  5454                           ;	CPD = OFF, Data EEPROM not code-protected
  5455   300009                     	org	3145737
  5456   300009  C0                 	db	192
  5457                           
  5458                           ;Config register CONFIG6L @ 0x30000A
  5459                           ;	Write Protection bit
  5460                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  5461                           ;	Write Protection bit
  5462                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  5463                           ;	Write Protection bit
  5464                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  5465                           ;	Write Protection bit
  5466                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  5467   30000A                     	org	3145738
  5468   30000A  0F                 	db	15
  5469                           
  5470                           ;Config register CONFIG6H @ 0x30000B
  5471                           ;	Configuration Register Write Protection bit
  5472                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  5473                           ;	Boot Block Write Protection bit
  5474                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  5475                           ;	Data EEPROM Write Protection bit
  5476                           ;	WRTD = OFF, Data EEPROM not write-protected
  5477   30000B                     	org	3145739
  5478   30000B  E0                 	db	224
  5479                           
  5480                           ;Config register CONFIG7L @ 0x30000C
  5481                           ;	Table Read Protection bit
  5482                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  5483                           ;	Table Read Protection bit
  5484                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  5485                           ;	Table Read Protection bit
  5486                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  5487                           ;	Table Read Protection bit
  5488                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  5489   30000C                     	org	3145740
  5490   30000C  0F                 	db	15
  5491                           
  5492                           ;Config register CONFIG7H @ 0x30000D
  5493                           ;	Boot Block Table Read Protection bit
  5494                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  5495   30000D                     	org	3145741
  5496   30000D  40                 	db	64
  5497                           tosu	equ	0xFFF
  5498                           tosh	equ	0xFFE
  5499                           tosl	equ	0xFFD
  5500                           stkptr	equ	0xFFC
  5501                           pclatu	equ	0xFFB
  5502                           pclath	equ	0xFFA
  5503                           pcl	equ	0xFF9
  5504                           tblptru	equ	0xFF8
  5505                           tblptrh	equ	0xFF7
  5506                           tblptrl	equ	0xFF6
  5507                           tablat	equ	0xFF5
  5508                           prodh	equ	0xFF4
  5509                           prodl	equ	0xFF3
  5510                           indf0	equ	0xFEF
  5511                           postinc0	equ	0xFEE
  5512                           postdec0	equ	0xFED
  5513                           preinc0	equ	0xFEC
  5514                           plusw0	equ	0xFEB
  5515                           fsr0h	equ	0xFEA
  5516                           fsr0l	equ	0xFE9
  5517                           wreg	equ	0xFE8
  5518                           indf1	equ	0xFE7
  5519                           postinc1	equ	0xFE6
  5520                           postdec1	equ	0xFE5
  5521                           preinc1	equ	0xFE4
  5522                           plusw1	equ	0xFE3
  5523                           fsr1h	equ	0xFE2
  5524                           fsr1l	equ	0xFE1
  5525                           bsr	equ	0xFE0
  5526                           indf2	equ	0xFDF
  5527                           postinc2	equ	0xFDE
  5528                           postdec2	equ	0xFDD
  5529                           preinc2	equ	0xFDC
  5530                           plusw2	equ	0xFDB
  5531                           fsr2h	equ	0xFDA
  5532                           fsr2l	equ	0xFD9
  5533                           status	equ	0xFD8

Data Sizes:
    Strings     292
    Constant    0
    Data        172
    BSS         5
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     43     117
    BANK0           128      0     104
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    dc_motor_init@dc_motor	PTR struct . size(1) Largest target is 3
		 -> motor1(COMRAM[3]), motor2(COMRAM[3]), 

    dc_motor_move_left@dc_motor	PTR struct . size(1) Largest target is 3
		 -> motor1(COMRAM[3]), motor2(COMRAM[3]), 

    dc_motor_move_right@dc_motor	PTR struct . size(1) Largest target is 3
		 -> motor1(COMRAM[3]), motor2(COMRAM[3]), 

    dc_motor_stop@dc_motor	PTR struct . size(1) Largest target is 3
		 -> motor1(COMRAM[3]), motor2(COMRAM[3]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    gpio_pin_direction_init@pin	PTR struct . size(1) Largest target is 8
		 -> keypad(COMRAM[8]), keypad$keypad_columns_pins(COMRAM[4]), keypad$keypad_rows_pins(COMRAM[4]), lcd(COMRAM[6]), 
		 -> lcd$lcd_pins(COMRAM[4]), motor1(COMRAM[3]), motor1_led1(COMRAM[2]), motor1_led2(COMRAM[2]), 
		 -> motor2(COMRAM[3]), motor2_led1(COMRAM[2]), motor2_led2(COMRAM[2]), 

    gpio_pin_input_init@pin	PTR struct . size(1) Largest target is 8
		 -> keypad(COMRAM[8]), keypad$keypad_columns_pins(COMRAM[4]), 

    gpio_pin_logic_read@pin	PTR struct . size(1) Largest target is 8
		 -> keypad(COMRAM[8]), keypad$keypad_columns_pins(COMRAM[4]), 

    gpio_pin_logic_read@pin_logic_read	PTR enum E2978 size(1) Largest target is 1
		 -> keypad_read@column_logic(COMRAM[1]), 

    gpio_pin_logic_write@pin	PTR struct . size(1) Largest target is 8
		 -> keypad(COMRAM[8]), keypad$keypad_rows_pins(COMRAM[4]), lcd(COMRAM[6]), lcd$lcd_pins(COMRAM[4]), 
		 -> motor1(COMRAM[3]), motor1_led1(COMRAM[2]), motor1_led2(COMRAM[2]), motor2(COMRAM[3]), 
		 -> motor2_led1(COMRAM[2]), motor2_led2(COMRAM[2]), 

    gpio_pin_output_low_init@pin	PTR struct . size(1) Largest target is 8
		 -> keypad(COMRAM[8]), keypad$keypad_rows_pins(COMRAM[4]), lcd(COMRAM[6]), lcd$lcd_pins(COMRAM[4]), 
		 -> motor1(COMRAM[3]), motor1_led1(COMRAM[2]), motor1_led2(COMRAM[2]), motor2(COMRAM[3]), 
		 -> motor2_led1(COMRAM[2]), motor2_led2(COMRAM[2]), 

    keypad_init@keypad	PTR struct . size(1) Largest target is 8
		 -> keypad(COMRAM[8]), 

    keypad_read@keypad	PTR struct . size(1) Largest target is 8
		 -> keypad(COMRAM[8]), 

    keypad_read@num	PTR unsigned char  size(1) Largest target is 1
		 -> in0(COMRAM[1]), in1(COMRAM[1]), in2(COMRAM[1]), 

    latx	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> LATA(BITBIGSFRll[1]), LATB(BITBIGSFRlh[1]), LATC(BITBIGSFRlh[1]), LATD(BITBIGSFRlh[1]), 
		 -> LATE(BITBIGSFRlh[1]), 

    lcd_init@lcd	PTR struct . size(1) Largest target is 6
		 -> lcd(COMRAM[6]), 

    lcd_send_char_data@lcd	PTR struct . size(1) Largest target is 6
		 -> lcd(COMRAM[6]), 

    lcd_send_char_data_pos@lcd	PTR struct . size(1) Largest target is 6
		 -> lcd(COMRAM[6]), 

    lcd_send_command@lcd	PTR struct . size(1) Largest target is 6
		 -> lcd(COMRAM[6]), 

    lcd_send_custom_char@_chr	PTR unsigned char  size(1) Largest target is 8
		 -> customChar1(COMRAM[8]), customChar10(BANK0[8]), customChar11(BANK0[8]), customChar12(BANK0[8]), 
		 -> customChar2(BANK0[8]), customChar3(BANK0[8]), customChar4(BANK0[8]), customChar5(BANK0[8]), 
		 -> customChar6(BANK0[8]), customChar7(BANK0[8]), customChar8(BANK0[8]), customChar9(BANK0[8]), 

    lcd_send_custom_char@lcd	PTR struct . size(1) Largest target is 6
		 -> lcd(COMRAM[6]), 

    lcd_send_enable@lcd	PTR struct . size(1) Largest target is 6
		 -> lcd(COMRAM[6]), 

    lcd_send_nbits@lcd	PTR struct . size(1) Largest target is 6
		 -> lcd(COMRAM[6]), 

    lcd_send_string@lcd	PTR struct . size(1) Largest target is 6
		 -> lcd(COMRAM[6]), 

    lcd_send_string@str	PTR unsigned char  size(2) Largest target is 20
		 -> STR_10(CODE[20]), STR_11(CODE[20]), STR_12(CODE[20]), STR_13(CODE[20]), 
		 -> STR_14(CODE[20]), STR_15(CODE[20]), STR_16(CODE[20]), STR_17(CODE[20]), 
		 -> STR_18(CODE[20]), STR_19(CODE[20]), STR_4(CODE[8]), STR_5(CODE[18]), 
		 -> STR_6(CODE[8]), STR_7(CODE[15]), STR_8(CODE[20]), STR_9(CODE[20]), 

    lcd_send_string_pos@lcd	PTR struct . size(1) Largest target is 6
		 -> lcd(COMRAM[6]), 

    lcd_send_string_pos@str	PTR unsigned char  size(2) Largest target is 20
		 -> STR_10(CODE[20]), STR_11(CODE[20]), STR_12(CODE[20]), STR_13(CODE[20]), 
		 -> STR_14(CODE[20]), STR_15(CODE[20]), STR_16(CODE[20]), STR_17(CODE[20]), 
		 -> STR_18(CODE[20]), STR_19(CODE[20]), STR_4(CODE[8]), STR_5(CODE[18]), 
		 -> STR_6(CODE[8]), STR_7(CODE[15]), STR_8(CODE[20]), STR_9(CODE[20]), 

    lcd_set_curser@lcd	PTR struct . size(1) Largest target is 6
		 -> lcd(COMRAM[6]), 

    led_init@led	PTR struct . size(1) Largest target is 2
		 -> motor1_led1(COMRAM[2]), motor1_led2(COMRAM[2]), motor2_led1(COMRAM[2]), motor2_led2(COMRAM[2]), 

    led_off@led	PTR struct . size(1) Largest target is 2
		 -> motor1_led1(COMRAM[2]), motor1_led2(COMRAM[2]), motor2_led1(COMRAM[2]), motor2_led2(COMRAM[2]), 

    led_on@led	PTR struct . size(1) Largest target is 2
		 -> motor1_led1(COMRAM[2]), motor1_led2(COMRAM[2]), motor2_led1(COMRAM[2]), motor2_led2(COMRAM[2]), 

    portx	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> PORTA(BITBIGSFRll[1]), PORTB(BITBIGSFRll[1]), PORTC(BITBIGSFRll[1]), PORTD(BITBIGSFRll[1]), 
		 -> PORTE(BITBIGSFRll[1]), 

    S1221$buffer	PTR unsigned char  size(2) Largest target is 0

    S1221$source	PTR const unsigned char  size(2) Largest target is 0

    sp__memset	PTR void  size(2) Largest target is 0

    trisx	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> TRISA(BITBIGSFRll[1]), TRISB(BITBIGSFRh[1]), TRISC(BITBIGSFRh[1]), TRISD(BITBIGSFRh[1]), 
		 -> TRISE(BITBIGSFRh[1]), 

    vfprintf$0	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf$1	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), STR_2(CODE[3]), STR_3(CODE[3]), 

    vfprintf$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _print_welcome->_lcd_send_custom_char
    _print_select_bage->_lcd_send_string_pos
    _print_motor2_operation->_lcd_send_string_pos
    _print_motor1_operation->_lcd_send_string_pos
    _print_invalid->_lcd_send_custom_char
    _lcd_send_string_pos->_lcd_set_curser
    _lcd_send_string->_lcd_send_char_data
    _lcd_send_custom_char->_lcd_send_char_data_pos
    _lcd_send_char_data_pos->_lcd_set_curser
    _lcd_set_curser->_lcd_send_command
    _lcd_send_char_data->_lcd_send_nbits
    _led_on->_gpio_pin_logic_write
    _led_off->_gpio_pin_logic_write
    _keypad_read->_gpio_pin_logic_write
    _dc_motor_stop->_gpio_pin_logic_write
    _dc_motor_move_right->_gpio_pin_logic_write
    _dc_motor_move_left->_gpio_pin_logic_write
    _ecual_init->_lcd_init
    _led_init->_gpio_pin_output_low_init
    _lcd_init->_lcd_send_command
    _lcd_send_command->_lcd_send_nbits
    _lcd_send_nbits->_gpio_pin_logic_write
    _lcd_send_enable->_gpio_pin_logic_write
    _keypad_init->_gpio_pin_input_init
    _keypad_init->_gpio_pin_output_low_init
    _gpio_pin_input_init->_gpio_pin_direction_init
    _dc_motor_init->_gpio_pin_output_low_init
    _gpio_pin_output_low_init->_gpio_pin_direction_init
    _gpio_pin_output_low_init->_gpio_pin_logic_write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  387841
                                             41 COMRAM     2     2      0
                           _app_init
                 _dc_motor_move_left
                _dc_motor_move_right
                      _dc_motor_stop
                        _keypad_read
                   _lcd_send_command
                            _led_off
                             _led_on
                      _print_invalid
             _print_motor1_operation
             _print_motor2_operation
                  _print_select_bage
                      _print_welcome
 ---------------------------------------------------------------------------------
 (1) _print_welcome                                        0     0      0   99786
               _lcd_send_custom_char
                _lcd_send_string_pos
 ---------------------------------------------------------------------------------
 (1) _print_select_bage                                    0     0      0   35720
                _lcd_send_string_pos
 ---------------------------------------------------------------------------------
 (1) _print_motor2_operation                               0     0      0   35720
                _lcd_send_string_pos
 ---------------------------------------------------------------------------------
 (1) _print_motor1_operation                               0     0      0   35720
                _lcd_send_string_pos
 ---------------------------------------------------------------------------------
 (1) _print_invalid                                        0     0      0   99786
               _lcd_send_custom_char
                _lcd_send_string_pos
 ---------------------------------------------------------------------------------
 (2) _lcd_send_string_pos                                  8     3      5   35720
                                             26 COMRAM     8     3      5
                    _lcd_send_string
                     _lcd_set_curser
 ---------------------------------------------------------------------------------
 (3) _lcd_send_string                                      6     3      3   12861
                                             19 COMRAM     6     3      3
                 _lcd_send_char_data
 ---------------------------------------------------------------------------------
 (2) _lcd_send_custom_char                                 8     3      5   64066
                                             33 COMRAM     8     3      5
                 _lcd_send_char_data
             _lcd_send_char_data_pos
                   _lcd_send_command
 ---------------------------------------------------------------------------------
 (3) _lcd_send_char_data_pos                               7     3      4   29902
                                             26 COMRAM     7     3      4
                 _lcd_send_char_data
                     _lcd_set_curser
 ---------------------------------------------------------------------------------
 (3) _lcd_set_curser                                       8     5      3   16768
                                             19 COMRAM     7     4      3
                   _lcd_send_command
 ---------------------------------------------------------------------------------
 (4) _lcd_send_char_data                                   5     3      2   12474
                                             14 COMRAM     5     3      2
               _gpio_pin_logic_write
                    _lcd_send_enable
                     _lcd_send_nbits
 ---------------------------------------------------------------------------------
 (1) _led_on                                               3     2      1    3919
                                              8 COMRAM     2     1      1
               _gpio_pin_logic_write
 ---------------------------------------------------------------------------------
 (1) _led_off                                              3     2      1    4999
                                              8 COMRAM     2     1      1
               _gpio_pin_logic_write
 ---------------------------------------------------------------------------------
 (1) _keypad_read                                          9     7      2    5204
                                              8 COMRAM     9     7      2
                _gpio_pin_logic_read
               _gpio_pin_logic_write
 ---------------------------------------------------------------------------------
 (2) _gpio_pin_logic_read                                  7     5      2     406
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _dc_motor_stop                                        3     2      1    4126
                                              8 COMRAM     3     2      1
               _gpio_pin_logic_write
 ---------------------------------------------------------------------------------
 (1) _dc_motor_move_right                                  3     2      1    3766
                                              8 COMRAM     3     2      1
               _gpio_pin_logic_write
 ---------------------------------------------------------------------------------
 (1) _dc_motor_move_left                                   3     2      1    3766
                                              8 COMRAM     3     2      1
               _gpio_pin_logic_write
 ---------------------------------------------------------------------------------
 (1) _app_init                                             0     0      0   39435
                         _ecual_init
 ---------------------------------------------------------------------------------
 (2) _ecual_init                                           1     1      0   39435
                      _dc_motor_init
                        _keypad_init
                           _lcd_init
                           _led_init
 ---------------------------------------------------------------------------------
 (3) _led_init                                             3     2      1    5639
                                             12 COMRAM     3     2      1
           _gpio_pin_output_low_init
 ---------------------------------------------------------------------------------
 (3) _lcd_init                                             6     5      1   21646
                                             19 COMRAM     6     5      1
           _gpio_pin_output_low_init
                   _lcd_send_command
 ---------------------------------------------------------------------------------
 (4) _lcd_send_command                                     5     3      2   15894
                                             14 COMRAM     5     3      2
               _gpio_pin_logic_write
                    _lcd_send_enable
                     _lcd_send_nbits
 ---------------------------------------------------------------------------------
 (5) _lcd_send_nbits                                       7     5      2    4334
                                              8 COMRAM     6     4      2
               _gpio_pin_logic_write
 ---------------------------------------------------------------------------------
 (5) _lcd_send_enable                                      3     2      1    3878
                                              8 COMRAM     2     1      1
               _gpio_pin_logic_write
 ---------------------------------------------------------------------------------
 (3) _keypad_init                                          5     4      1    6661
                                             12 COMRAM     5     4      1
                _gpio_pin_input_init
           _gpio_pin_output_low_init
 ---------------------------------------------------------------------------------
 (4) _gpio_pin_input_init                                  4     3      1    1122
                                              8 COMRAM     4     3      1
            _gpio_pin_direction_init
 ---------------------------------------------------------------------------------
 (3) _dc_motor_init                                        3     2      1    5462
                                             12 COMRAM     3     2      1
           _gpio_pin_output_low_init
 ---------------------------------------------------------------------------------
 (4) _gpio_pin_output_low_init                             4     3      1    5109
                                              8 COMRAM     4     3      1
            _gpio_pin_direction_init
               _gpio_pin_logic_write
 ---------------------------------------------------------------------------------
 (6) _gpio_pin_logic_write                                 8     6      2    3413
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (5) _gpio_pin_direction_init                              8     6      2     893
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _app_init
     _ecual_init
       _dc_motor_init
         _gpio_pin_output_low_init
           _gpio_pin_direction_init
           _gpio_pin_logic_write
       _keypad_init
         _gpio_pin_input_init
           _gpio_pin_direction_init
         _gpio_pin_output_low_init
       _lcd_init
         _gpio_pin_output_low_init
         _lcd_send_command
           _gpio_pin_logic_write
           _lcd_send_enable
             _gpio_pin_logic_write
           _lcd_send_nbits
             _gpio_pin_logic_write
       _led_init
         _gpio_pin_output_low_init
   _dc_motor_move_left
     _gpio_pin_logic_write
   _dc_motor_move_right
     _gpio_pin_logic_write
   _dc_motor_stop
     _gpio_pin_logic_write
   _keypad_read
     _gpio_pin_logic_read
     _gpio_pin_logic_write
   _lcd_send_command
   _led_off
     _gpio_pin_logic_write
   _led_on
     _gpio_pin_logic_write
   _print_invalid
     _lcd_send_custom_char
       _lcd_send_char_data
         _gpio_pin_logic_write
         _lcd_send_enable
         _lcd_send_nbits
       _lcd_send_char_data_pos
         _lcd_send_char_data
         _lcd_set_curser
           _lcd_send_command
       _lcd_send_command
     _lcd_send_string_pos
       _lcd_send_string
         _lcd_send_char_data
       _lcd_set_curser
   _print_motor1_operation
     _lcd_send_string_pos
   _print_motor2_operation
     _lcd_send_string_pos
   _print_select_bage
     _lcd_send_string_pos
   _print_welcome
     _lcd_send_custom_char
     _lcd_send_string_pos

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      40        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      34        0.0%
BANK15              80      0       0      35        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      68       5       81.2%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     2B      75       1       92.1%
BITBIGSFRh          69      0       0      36        0.0%
BITBIGSFRlh          4      0       0      37        0.0%
BITBIGSFRll          4      0       0      38        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      DD      39        0.0%
DATA                 0      0      DD       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Oct 19 20:50:24 2023

        lcd_send_char_data_pos@column 0061                                     l9 EBAC  
                      ?_print_welcome 0045                                     _n 0020  
                                   _t 001F           gpio_pin_output_low_init@pin 004D  
         gpio_pin_output_low_init@ret 0050                                    l14 EDB8  
                                  l40 EF70                                    l24 ED1C  
                                  l19 ED6A                                    l51 F782  
                                  l45 EF72                                    l59 F784  
                                  l92 EFD8                                    l87 F874  
                                  l97 F03E                                   l110 F2BA  
                                 l104 F0A6                                   l121 F336  
                                 l114 F2BC                                   l132 F462  
                                 l241 F9A8                                   l155 ECD0  
                                 l260 FADC                                   l158 EB26  
                                 l183 EC84                                   l167 F3CA  
                                 l281 EF0C                                   l178 EE58  
                                 l506 EB68                                   l267 F506  
                                 l188 EC3A                                   l295 EE08  
                                 l471 F24C                                   l393 EAFE  
                                 l465 F6AA                                   l474 F178  
                                 l468 F5D8                                   l477 F1E2  
                   _print_select_bage F1E4                       ?_lcd_send_nbits 004D  
           lcd_send_string_pos@column 0061                                   _in0 0074  
                                 _in1 0073                                   _in2 0072  
                                 _in3 0070                ??_gpio_pin_logic_write 0047  
                                 _lcd 0031                                   _ret 0075  
                         lcd_init@lcd 0058                           lcd_init@ret 005B  
                                 wreg 0FE8                    ?_print_select_bage 0045  
          __end_of_lcd_send_char_data F040                       ?_lcd_set_curser 0058  
              lcd_set_curser@gpio_ret 005D                                  l3311 EB24  
                                l3303 EB00                                  l3305 EB04  
                                l3321 EFD2                                  l3401 F358  
                                l3331 F8A6                                  l3307 EB10  
                                l3323 EFD6                                  l3315 EF74  
                                l3403 F36A                                  l3411 F3C8  
                                l3341 F968                                  l3333 F8B6  
                                l3421 EB7E                                  l3309 EB18  
                                l3317 EF8C                                  l3501 F86E  
                                l3405 F37C                                  l3343 F992  
                                l3335 F8BE                                  l3327 F876  
                                l3271 F9F2                                  l3263 F9AA  
                                l3423 EB86                                  l3319 EF94  
                                l3503 F872                                  l3511 F068  
                                l3345 F9A2                                  l3337 F914  
                                l3329 F886                                  l3281 FAD6  
                                l3273 FA48                                  l3265 F9BA  
                                l3361 EEEA                                  l3425 EB9A  
                                l3433 EF0E                                  l3409 F38E  
                                l3513 F078                                  l3339 F964  
                                l3347 F9A6                                  l3275 FA98  
                                l3283 FADA                                  l3267 F9DA  
                                l3363 EF06                                  l3355 EEAE  
                                l3427 EBA6                                  l3419 EB6A  
                                l3371 EDCE                                  l3443 EF2E  
                                l3435 EF22                                  l3291 EC86  
                                l3515 F080                                  l3507 F040  
                                l3611 F448                                  l3531 F296  
                                l3523 F24E                                  l3277 FA9C  
                                l3269 F9EA                                  l3365 EF0A  
                                l3357 EEC2                                  l3429 EBAA  
                                l3373 EDEE                                  l3461 EF6C  
                                l3445 EF38                                  l3437 EF2A  
                                l3293 EC92                                  l3541 EE1E  
                                l3621 EB28                                  l3701 F6F0  
                                l3517 F0A0                                  l3509 F058  
                                l3613 F45C                                  l3605 F422  
                                l3533 F29A                                  l3525 F266  
                                l3279 FAC6                                  l3359 EEE2  
                                l3375 EDF6                                  l3455 EF4E  
                                l3447 EF3A                                  l3295 ECBC  
                                l3471 F7BA                                  l3543 EE26  
                                l3631 EB50                                  l3623 EB30  
                                l3703 F700                                  l3391 F03C  
                                l3383 EFDA                                  l3519 F0A4  
                                l3607 F436                                  l3615 F460  
                                l3535 F2B6                                  l3527 F278  
                                l3377 EE02                                  l3369 EDBA  
                                l3457 EF5A                                  l3449 EF4A  
                                l3297 ECBE                                  l3481 F7EE  
                                l3473 F7C2                                  l3465 F786  
                                l3545 EE2E                                  l3633 EB58  
                                l3625 EB38                                  l3641 ED88  
                                l3561 F4AC                                  l3553 F464  
                                l3721 F75C                                  l3713 F722  
                                l3705 F70E                                  l3385 EFF2  
                                l3609 F438                                  l3529 F280  
                                l3379 EE06                                  l3459 EF5C  
                                l3299 ECCE                                  l3491 F832  
                                l3483 F7FA                                  l3475 F7CE  
                                l3467 F79E                                  l3547 EE52  
                                l3539 EE0A                                  l3635 EB60  
                                l3627 EB40                                  l3619 EB28  
                                l3651 ED1E                                  l3643 EDA4  
                                l3563 F500                                  l3555 F474  
                                l3723 F76C                                  l3715 F732  
                                l3707 F71E                                  l3731 EC3C  
                                l3387 EFFA                                  l3395 F338  
                                l3571 F2D6                                  l3811 FAEE  
                                l3493 F83E                                  l3485 F814  
                                l3477 F7D0                                  l3469 F7A6  
                                l3549 EE56                                  l3629 EB48  
                                l3661 ED68                                  l3653 ED32  
                                l3645 EDB2                                  l3637 ED6C  
                                l3565 F504                                  l3557 F484  
                                l3725 F76E                                  l3717 F742  
                                l3733 EC50                                  l3389 F038  
                                l3397 F340                                  l3581 F320  
                                l3573 F2E8                                  l3901 FD28  
                                l3821 FB3A                                  l3813 FAFC  
                                l3805 FADE                                  l3495 F84A  
                                l3487 F81A                                  l3479 F7E0  
                                l3655 ED3A                                  l3647 EDB6  
                                l3639 ED80                                  l3671 ED0A  
                                l3559 F4A4                                  l3727 F77E  
                                l3719 F75A                                  l3751 EC3A  
                                l3743 EBF2                                  l3735 EC54  
                                l3399 F346                                  l3591 F3E4  
                                l3583 F330                                  l3575 F2F8  
                                l3911 FD80                                  l3903 FD36  
                                l3831 FB88                                  l3823 FB48  
                                l3815 FB0C                                  l3807 FAE2  
                                l3497 F856                                  l3489 F826  
                                l3657 ED56                                  l3673 ED16  
                                l3665 ECD2                                  l3681 F6C0  
                                l3745 EC06                                  l3737 EC60  
                                l3593 F3F4                                  l3585 F334  
                                l3577 F308                                  l3569 F2BE  
                                l3761 F60E                                  l3905 FD46  
                                l3841 FBDC                                  l3833 FB98  
                                l3825 FB5A                                  l3817 FB24  
                                l3809 FAEA                                  l3499 F862  
                                l3755 EAFA                                  l3659 ED64  
                                l3675 ED1A                                  l3667 ECE6  
                                l3691 F6DC                                  l3683 F6D0  
                                l3747 EC0A                                  l3739 EC84  
                                l3595 F404                                  l3579 F310  
                                l3771 F1E4                                  l3763 F628  
                                l3931 FDEE                                  l3923 FDBE  
                                l3915 FD8E                                  l3907 FD5E  
                                l3851 FC14                                  l3843 FBE4  
                                l3835 FBB0                                  l3827 FB76  
                                l3819 FB36                                  l3669 ECEE  
                                l3685 F6D8                                  l3749 EC16  
                                l3597 F40C                                  l3589 F3CC  
                                l3781 F556                                  l3773 F110  
                                l3765 F642                                  l3757 F5DA  
                                l3941 FE2E                                  l3933 FE00  
                                l3925 FDD0                                  l3917 FDA0  
                                l3909 FD70                                  l3861 FC56  
                                l3853 FC26                                  l3845 FBF6  
                                l3837 FBC2                                  l3829 FB7A  
                                l3679 F6AC                                  l3599 F41E  
                                l3783 F570                                  l3775 F508  
                                l3767 F65C                                  l3759 F5F4  
                                l3951 FE60                                  l3943 FE38  
                                l3927 FDE0                                  l3919 FDB0  
                                l3871 FC8E                                  l3855 FC36  
                                l3847 FC06                                  l3839 FBD2  
                                l3697 F6E0                                  l3785 F58A  
                                l3777 F522                                  l3769 F676  
                                l3953 FE6E                                  l3945 FE40  
                                l3961 FE7E                                  l3937 FE0C  
                                l3881 FCC4                                  l3873 FC96  
                                l3865 FC62                                  l3699 F6EE  
                                l3787 F5A4                                  l3779 F53C  
                                l3963 FE9A                                  l3955 FE72  
                                l3947 FE48                                  l3939 FE1E  
                                l3891 FCF0                                  l3883 FCC8  
                                l3875 FC9E                                  l3867 FC74  
                                l3859 FC44                                  l3971 FECE  
                                l3789 F17A                                  l3965 FE9E  
                                l3957 FE76                                  l3949 FE52  
                                l3893 FCF4                                  l3885 FCCC  
                                l3877 FCA8                                  l3869 FC84  
                                l3879 FCB6                                  l3985 F3A2  
                                l3889 FCD4                                  l3969 FEB8  
                                l3897 FD0E                                  l3987 FAB0  
                                l3899 FD24                                  l3989 F97C  
                                STR_1 FFFC                                  STR_4 FFF4  
                                STR_5 FFCB                                  STR_6 FFEC  
                                STR_7 FFDD                                  STR_8 FF67  
                                STR_9 FF17                      ?_lcd_send_enable 004D  
                                u3000 EC50                                  u3001 EC4C  
                                u3010 EC80                                  u3011 EC7A  
                                u3020 EC06                                  u3100 FBC2  
                                u3021 EC02                                  u3101 FBBE  
                                _LATA 0F89                                  u3030 EC36  
                                u3110 FBF6                                  _LATB 0F8A  
                                u3031 EC30                                  u3111 FBF2  
                                _LATC 0F8B                                  u3016 EC82  
                                u3200 FE00                                  u3120 FC26  
                                _LATD 0F8C                                  u3201 FDFC  
                                u3121 FC22                                  _LATE 0F8D  
                                u3210 FE1E                                  u3130 FC56  
                                u3211 FE1A                                  u3131 FC52  
                                u3036 EC38                                  u3220 FECA  
                                u3140 FC74                                  u3060 FB0C  
                                u3221 FEC6                                  u3141 FC70  
                                u3061 FB08                                  u3150 FD20  
                                u3070 FB36                                  u3151 FD1C  
                                u3071 FB32                                  u2600 EEC2  
                                u2520 ECCE                                  u3160 FD46  
                                u3080 FB5A                                  u2505 FAD4  
                                u2601 EEBE                                  u2521 ECCA  
                                u3161 FD42                                  u3081 FB56  
                                u2506 FAD6                                  u2450 F9BA  
                                u2610 EEE2                                  u2514 ECAC  
                                u2530 EF8C                                  u3170 FD70  
                                u3090 FB98                                  u2451 F9B6  
                                u2611 EEDE                                  u2515 ECA8  
                                u2531 EF88                                  u3307 F7E6  
                                u3171 FD6C                                  u3091 FB94  
                                u2540 F886                                  u2460 F9DA  
                                u2620 EDCE                                  u2700 F7E0  
                                u3180 FDA0                                  u2541 F882  
                                u2461 F9D6                                  u2621 EDCA  
                                u3317 F800                                  u2701 F7DC  
                                u3181 FD9C                                  u3237 FB16  
                                u2550 F8A6                                  u2470 F9EA  
                                u2630 EDEE                                  u2710 F058  
                                u3190 FDD0                                  u2551 F8A2  
                                u2471 F9E6                                  u2631 EDEA  
                                u3327 F816                                  u2711 F054  
                                u3191 FDCC                                  u3247 FB64  
                                u2560 F8B6                                  u2800 F484  
                                u2640 EFF2                                  u2720 F068  
                                u2561 F8B2                                  u3337 EB12  
                                u2801 F480                                  u2641 EFEE  
                                u2721 F064                                  u3257 FBA2  
                                u2650 EB7E                                  u2810 F4A4  
                                u2730 F078                                  u2651 EB7A  
                                u2811 F4A0                                  u2731 F074  
                                u3267 FCFE                                  u2484 FA10  
                                u2660 EF22                                  u2900 F448  
                                u2740 F266                                  u2485 FA0C  
                                u2661 EF1E                                  u2901 F444  
                                u2741 F262                                  u3277 FD50  
                                u2574 F8DC                                  u2494 FA66  
                                u2670 EF4A                                  u2910 ED80  
                                u2750 F278                                  u2830 F2D6  
                                u2575 F8D8                                  u2495 FA62  
                                u2671 EF46                                  u2911 ED7C  
                                u2751 F274                                  u2831 F2D2  
                                u3287 FEA8                                  u2584 F932  
                                u2680 EF6C                                  u2920 ED32  
                                u2824 F4F4                                  u2760 F2B6  
                                u2840 F2E8                                  u2585 F92E  
                                u2681 EF68                                  u2921 ED2E  
                                u2825 F4F0                                  u3297 F714  
                                u2761 F2B2                                  u2841 F2E4  
                                u2690 F79E                                  u2770 EE1E  
                                u2930 ECE6                                  u2850 F2F8  
                                u2595 F9A0                                  u2691 F79A  
                                u2771 EE1A                                  u2931 ECE2  
                                u2851 F2F4                                  u2596 F9A2  
                                u2780 EE4E                                  u2940 F6C0  
                                u2860 F308                                  u2781 EE48  
                                u2941 F6BC                                  u2861 F304  
                                u2790 F474                                  u2950 F6D0  
                                u2870 F3E4                                  u2791 F470  
                                u2951 F6CC                                  u2871 F3E0  
                                u2960 F700                                  u2880 F3F4  
                                u2961 F6FC                                  u2881 F3F0  
                                u2786 EE50                                  u2970 F742  
                                u2890 F404                                  u2971 F73E  
                                u2891 F400                                  u2980 F76C  
                                u2981 F768                                  u2990 F77E  
                                u2991 F77A                   ??_print_select_bage 0067  
                                _main FADE                                  _latx 000B  
                                fsr1h 0FE2                                  fsr2h 0FDA  
                                indf1 0FE7                                  indf2 0FDF  
                                fsr1l 0FE1                                  fsr2l 0FD9  
            ?_gpio_pin_direction_init 0045                      ?_lcd_send_string 0058  
                                prodl 0FF3                                  start 0000  
                         led_init@led 0051                           led_init@ret 0053  
                        ___param_bank 0000             ?_gpio_pin_output_low_init 004D  
           __end_of_print_select_bage F24E                                 ?_main 0045  
                               STR_10 FF2B                                 STR_11 FEEF  
                               STR_12 FF7B                                 STR_13 FFA3  
                               STR_14 FF3F                                 STR_15 FF03  
                               STR_16 FF8F                                 STR_17 FFB7  
                               STR_18 FF53                                 STR_19 FEDB  
                   ?_lcd_send_command 0053                                 _PORTA 0F80  
                               _PORTB 0F81                                 _PORTC 0F82  
                               _PORTD 0F83                                 _PORTE 0F84  
                               _TRISA 0F92                                 _TRISB 0F93  
                               _TRISC 0F94                                 _TRISD 0F95  
                               _TRISE 0F96                gpio_pin_input_init@pin 004D  
              gpio_pin_input_init@ret 0050                    ??_lcd_send_command 0055  
                     __end_of_led_off EC3C                lcd_send_string@lcd_ret 005C  
                        ?_keypad_init 0051                          ?_keypad_read 004D  
                               _portx 0001                                 _trisx 0015  
                               tablat 0FF5                                 status 0FD8  
                     ??_print_invalid 006E                       ??_print_welcome 006E  
                     __initialization EE5A                          __end_of_main FEDA  
             keypad_read@column_logic 0052                                ??_main 006E  
           lcd_send_nbits@pin_counter 0052                         __activetblptr 0002  
             lcd_send_enable@gpio_ret 004E                lcd_send_string_pos@lcd 005F  
              _lcd_send_char_data_pos F040                lcd_send_string_pos@ret 0066  
              lcd_send_string_pos@row 0060                lcd_send_string_pos@str 0062  
            ??_print_motor1_operation 0067                      __end_of_app_init EB00  
         __end_of_dc_motor_move_right EDBA              ??_print_motor2_operation 0067  
                    __end_of_lcd_init F876                      __end_of_led_init EE5A  
                              _led_on EC3C                                _keypad 0029  
             lcd_send_string@gpio_ret 005B                                _motor1 003A  
                              _motor2 0037                                isa$std 0001  
                           ??_led_off 004E                          __pdataCOMRAM 0001  
                        __mediumconst FEDA                                tblptrh 0FF7  
                              tblptrl 0FF6                                tblptru 0FF8  
                          __accesstop 0080               __end_of__initialization EEA4  
                       ___rparam_used 0001                  lcd_set_curser@column 005A  
            lcd_send_custom_char@_chr 0069                        __pcstackCOMRAM 0045  
                        __pidataBANK0 F0A8                      ??_lcd_send_nbits 004F  
         __end_of_lcd_send_string_pos F338           lcd_send_string_pos@gpio_ret 0064  
                    ??_lcd_set_curser 005B                 lcd_send_char_data@lcd 0053  
               lcd_send_char_data@ret 0057                    lcd_send_enable@lcd 004D  
                          __pnvCOMRAM 0075                    _lcd_send_char_data EFDA  
        __end_of_lcd_send_custom_char F464                   ?_lcd_send_char_data 0053  
                          _ecual_init EB28                               ?_led_on 004D  
                 keypad_init@gpio_ret 0052                  ??_lcd_send_char_data 0055  
                           ?_app_init 0045                             ?_lcd_init 0058  
                           ?_led_init 0051                   keypad_read@gpio_ret 0050  
       lcd_send_nbits@data_or_command 004E                               __Hparam 0000  
                             __Lparam 0000                 dc_motor_move_left@ret 004F  
                 _gpio_pin_logic_read F464                               __pcinit EE5A  
       gpio_pin_logic_write@pin_logic 0046                               __ramtop 1000  
              _print_motor1_operation F110                               __ptext0 FADE  
                             __ptext1 F5DA                               __ptext2 F1E4  
                             __ptext3 F17A                               __ptext4 F110  
                             __ptext5 F508                               __ptext6 F2BE  
                             __ptext7 F24E                               __ptext8 F3CC  
                             __ptext9 F040                               _led_off EBF2  
                 _gpio_pin_input_init EDBA               ?_lcd_send_char_data_pos 005F  
              _print_motor2_operation F17A                            ??_app_init 005E  
                          ??_lcd_init 0059                       lcd_init@lcd_ret 005D  
                          ??_led_init 0052                  end_of_initialization EEA4  
                      led_on@gpio_ret 004E                  ?_gpio_pin_logic_read 0045  
                       __Lmediumconst FEDA                  ?_gpio_pin_input_init 004D  
                       _dc_motor_init EB6A                 __end_of_print_invalid F5DA  
                       _dc_motor_stop ECD2              _gpio_pin_output_low_init EEAE  
                             postdec1 0FE5                               postdec2 0FDD  
                             postinc0 0FEE                               postinc1 0FE6  
               __end_of_print_welcome F6AC                               postinc2 0FDE  
                         ?_ecual_init 0045           dc_motor_move_right@dc_motor 004D  
      __end_of_lcd_send_char_data_pos F0A8                  lcd_init@pins_counter 005C  
                _lcd_send_custom_char F3CC                    lcd_send_string@lcd 0058  
                  lcd_send_string@ret 005D                    lcd_send_string@str 0059  
         dc_motor_move_right@gpio_ret 004E                 ??_gpio_pin_logic_read 0047  
    gpio_pin_output_low_init@gpio_ret 004F                 lcd_set_curser@lcd_ret 005E  
               ??_gpio_pin_input_init 004E                        ?_dc_motor_init 0051  
                          led_off@led 004D                        ?_dc_motor_stop 004D  
             _gpio_pin_direction_init F876                     ??_lcd_send_enable 004E  
                       __pidataCOMRAM EBAE                        __end_of_led_on EC86  
                   ??_lcd_send_string 005B                   start_initialization EE5A  
               ?_lcd_send_custom_char 0066                      _lcd_send_command EF74  
         gpio_pin_input_init@gpio_ret 004F                      dc_motor_init@ret 0053  
       lcd_send_char_data_pos@lcd_ret 0064            __end_of_dc_motor_move_left ED6C  
                            ??_led_on 004E                           __pdataBANK0 0080  
                    dc_motor_stop@ret 004F                           __pbssCOMRAM 0070  
              lcd_send_char_data@data 0054             lcd_send_char_data@lcd_ret 0056  
             lcd_send_custom_char@lcd 0066               lcd_send_custom_char@ret 006D  
             lcd_send_custom_char@row 0067                         ??_keypad_init 0052  
                       ??_keypad_read 004F            lcd_send_string_pos@lcd_ret 0065  
          dc_motor_move_left@dc_motor 004D     gpio_pin_logic_read@pin_logic_read 0046  
         lcd_send_custom_char@lcd_ret 006C           lcd_send_custom_char@counter 0071  
         lcd_send_custom_char@mem_pos 006A                       ??_dc_motor_init 0052  
                     ??_dc_motor_stop 004E          __end_of_gpio_pin_logic_write FADE  
          dc_motor_move_left@gpio_ret 004E                          _customChar10 00A0  
                        _customChar11 0098                          _customChar12 0090  
           ??_gpio_pin_direction_init 0047                         __pmediumconst FEDA  
             ?_print_motor1_operation 0045                   lcd_send_command@lcd 0053  
                 lcd_send_command@ret 0057                              ?_led_off 004D  
                   lcd_send_nbits@lcd 004D                     lcd_send_nbits@ret 0051  
             ?_print_motor2_operation 0045                    keypad_read@counter 0053  
              ??_lcd_send_custom_char 006B             lcd_send_char_data_pos@lcd 005F  
           lcd_send_char_data_pos@ret 0065             lcd_send_char_data_pos@row 0060  
          ??_gpio_pin_output_low_init 004E                   __end_of_keypad_init EF74  
                 __end_of_keypad_read F786        __end_of_print_motor1_operation F17A  
                        ??_ecual_init 005E        __end_of_print_motor2_operation F1E4  
                           led_on@led 004D       __end_of_gpio_pin_direction_init F9AA  
                           copy_data0 EE6E                             copy_data1 EE8E  
                  __end_of_ecual_init EB6A                   _dc_motor_move_right ED6C  
      lcd_send_char_data_pos@gpio_ret 0063                       _lcd_send_enable EB00  
                            __Hrparam 0000  gpio_pin_direction_init@pin_direction 0046  
                            __Lrparam 0000                       _lcd_send_string F24E  
               dc_motor_stop@dc_motor 004D              lcd_send_command@gpio_ret 0055  
                ?_dc_motor_move_right 004D              __end_of_lcd_send_command EFDA  
          lcd_send_custom_char@column 0068                 dc_motor_stop@gpio_ret 004E  
         __end_of_gpio_pin_logic_read F508                           _customChar1 0021  
                         _customChar2 00E0                           _customChar3 00D8  
                         _customChar4 00D0                           _customChar5 00C8  
                         _customChar6 00C0                           _customChar7 00B8  
                         _customChar8 00B0                           _customChar9 00A8  
                _gpio_pin_logic_write F9AA                              __ptext10 F338  
                            __ptext11 EFDA                              __ptext20 EB28  
                            __ptext12 EC3C                              __ptext21 EE0A  
                            __ptext13 EBF2                              __ptext30 F9AA  
                            __ptext22 F786                              __ptext14 F6AC  
                            __ptext31 F876                              __ptext23 EF74  
                            __ptext15 F464                              __ptext24 EC86  
                            __ptext16 ECD2                              __ptext25 EB00  
                            __ptext17 ED6C                              __ptext26 EF0E  
                            __ptext18 ED1E                              __ptext27 EDBA  
                            __ptext19 EAFA                              __ptext28 EB6A  
                            __ptext29 EEAE                     keypad_init@column 0055  
                            _app_init EAFA                           _keypad_btns 0080  
                   keypad_init@keypad 0051                           _keypad_init EF0E  
                         _keypad_read F6AC           __end_of_gpio_pin_input_init EE0A  
                            _lcd_init F786                dc_motor_move_right@ret 004F  
                            _led_init EE0A                     keypad_read@column 0055  
                   keypad_read@keypad 004D                 dc_motor_init@dc_motor 0051  
          lcd_send_char_data@gpio_ret 0055                   _lcd_send_string_pos F2BE  
                            isa$xinst 0000                 dc_motor_init@gpio_ret 0052  
               ??_dc_motor_move_right 004E                      lcd_init@gpio_ret 005A  
                  _dc_motor_move_left ED1E          lcd_send_custom_char@gpio_ret 006B  
               ?_gpio_pin_logic_write 0045                       led_off@gpio_ret 004E  
                      _lcd_send_nbits EC86                  ?_lcd_send_string_pos 005F  
             lcd_send_command@command 0054               lcd_send_command@lcd_ret 0056  
                   lcd_set_curser@lcd 0058               gpio_pin_logic_write@pin 0045  
             gpio_pin_logic_write@ret 004C                   ?_dc_motor_move_left 004D  
                   lcd_set_curser@row 0059      __end_of_gpio_pin_output_low_init EF0E  
             __end_of_lcd_send_enable EB28                        _lcd_set_curser F338  
              gpio_pin_logic_read@pin 0045                gpio_pin_logic_read@ret 004B  
             __end_of_lcd_send_string F2BE                           _motor1_led1 0043  
                         _motor1_led2 0041                           _motor2_led1 003F  
                         _motor2_led2 003D                         _print_invalid F508  
                ??_dc_motor_move_left 004E                         _print_welcome F5DA  
            ??_lcd_send_char_data_pos 0063                __end_of_lcd_send_nbits ECD2  
               ??_lcd_send_string_pos 0064                __end_of_lcd_set_curser F3CC  
          gpio_pin_direction_init@pin 0045            gpio_pin_direction_init@ret 004C  
                    led_init@gpio_ret 0052                        keypad_init@ret 0053  
                      keypad_init@row 0054                        keypad_read@ret 0051  
                      keypad_read@num 004E                        keypad_read@row 0054  
               __end_of_dc_motor_init EBAE                 __end_of_dc_motor_stop ED1E  
                      ?_print_invalid 0045            lcd_send_char_data_pos@data 0062  
